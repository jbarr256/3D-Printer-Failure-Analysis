{
  "version": 3,
  "sources": ["../../echarts-gl/lib/chart/bar3D/cartesian3DLayout.js", "../../echarts-gl/lib/chart/bar3D/evaluateBarSparseness.js", "../../echarts-gl/lib/chart/bar3D/bar3DLayout.js", "../../echarts-gl/lib/util/format.js", "../../echarts-gl/lib/chart/common/formatTooltip.js", "../../echarts-gl/lib/chart/common/createList.js", "../../echarts-gl/lib/chart/bar3D/Bar3DSeries.js", "../../echarts-gl/lib/util/geometry/Bars3DGeometry.js", "../../echarts-gl/lib/chart/bar3D/Bar3DView.js", "../../echarts-gl/lib/chart/bar3D/install.js", "../../echarts-gl/lib/chart/line3D/Line3DSeries.js", "../../echarts-gl/lib/chart/line3D/Line3DView.js", "../../echarts-gl/lib/chart/line3D/install.js", "../../echarts-gl/lib/chart/scatter3D/Scatter3DSeries.js", "../../echarts-gl/lib/util/sprite.js", "../../echarts-gl/lib/util/geometry/verticesSortMixin.js", "../../echarts-gl/lib/chart/common/sdfSprite.glsl.js", "../../echarts-gl/lib/chart/common/PointsMesh.js", "../../echarts-gl/lib/chart/common/PointsBuilder.js", "../../echarts-gl/lib/chart/scatter3D/Scatter3DView.js", "../../echarts-gl/lib/chart/scatter3D/install.js", "../../echarts-gl/lib/chart/lines3D/lines3DLayout.js", "../../echarts-gl/lib/chart/lines3D/Lines3DSeries.js", "../../echarts-gl/lib/chart/lines3D/shader/trail2.glsl.js", "../../echarts-gl/lib/chart/lines3D/TrailMesh2.js", "../../echarts-gl/lib/chart/lines3D/Lines3DView.js", "../../echarts-gl/lib/chart/lines3D/install.js", "../../echarts-gl/lib/chart/polygons3D/Polygons3DSeries.js", "../../echarts-gl/lib/chart/polygons3D/Polygons3DView.js", "../../echarts-gl/lib/chart/polygons3D/install.js", "../../echarts-gl/lib/chart/surface/SurfaceSeries.js", "../../echarts-gl/lib/chart/surface/SurfaceView.js", "../../echarts-gl/lib/chart/surface/install.js", "../../echarts-gl/lib/chart/map3D/Map3DSeries.js", "../../echarts-gl/lib/chart/map3D/Map3DView.js", "../../echarts-gl/lib/chart/map3D/install.js", "../../echarts-gl/lib/chart/scatterGL/ScatterGLSeries.js", "../../echarts-gl/lib/chart/common/GLViewHelper.js", "../../echarts-gl/lib/chart/scatterGL/ScatterGLView.js", "../../echarts-gl/lib/chart/scatterGL/install.js", "../../echarts/lib/data/helper/linkList.js", "../../echarts-gl/lib/chart/graphGL/createGraphFromNodeEdge.js", "../../echarts-gl/lib/chart/graphGL/GraphGLSeries.js", "../../echarts-gl/lib/util/geometry/Lines2D.js", "../../echarts-gl/lib/chart/graphGL/forceAtlas2.glsl.js", "../../echarts-gl/lib/chart/graphGL/ForceAtlas2GPU.js", "../../echarts-gl/lib/chart/graphGL/forceAtlas2Worker.js", "../../echarts-gl/lib/chart/graphGL/ForceAtlas2.js", "../../echarts-gl/lib/util/Roam2DControl.js", "../../echarts-gl/lib/util/shader/lines2D.glsl.js", "../../echarts-gl/lib/chart/graphGL/GraphGLView.js", "../../echarts-gl/lib/chart/graphGL/install.js", "../../echarts-gl/lib/chart/flowGL/FlowGLSeries.js", "../../echarts-gl/lib/chart/flowGL/Line2D.js", "../../echarts-gl/lib/chart/flowGL/vectorFieldParticle.glsl.js", "../../echarts-gl/lib/chart/flowGL/VectorFieldParticleSurface.js", "../../echarts-gl/lib/chart/flowGL/FlowGLView.js", "../../echarts-gl/lib/chart/flowGL/install.js", "../../echarts-gl/lib/chart/linesGL/LinesGLSeries.js", "../../echarts-gl/lib/chart/linesGL/LinesGLView.js", "../../echarts-gl/lib/chart/linesGL/install.js"],
  "sourcesContent": ["import * as echarts from 'echarts/lib/echarts';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nvar vec3 = glmatrix.vec3;\nvar isDimensionStacked = echarts.helper.dataStack.isDimensionStacked;\n\nfunction ifCrossZero(extent) {\n  var min = extent[0];\n  var max = extent[1];\n  return !(min > 0 && max > 0 || min < 0 && max < 0);\n}\n\n;\n\nfunction cartesian3DLayout(seriesModel, coordSys) {\n  var data = seriesModel.getData(); // var barOnPlane = seriesModel.get('onGridPlane');\n\n  var barSize = seriesModel.get('barSize');\n\n  if (barSize == null) {\n    var size = coordSys.size;\n    var barWidth;\n    var barDepth;\n    var xAxis = coordSys.getAxis('x');\n    var yAxis = coordSys.getAxis('y');\n\n    if (xAxis.type === 'category') {\n      barWidth = xAxis.getBandWidth() * 0.7;\n    } else {\n      // PENDING\n      barWidth = Math.round(size[0] / Math.sqrt(data.count())) * 0.6;\n    }\n\n    if (yAxis.type === 'category') {\n      barDepth = yAxis.getBandWidth() * 0.7;\n    } else {\n      barDepth = Math.round(size[1] / Math.sqrt(data.count())) * 0.6;\n    }\n\n    barSize = [barWidth, barDepth];\n  } else if (!echarts.util.isArray(barSize)) {\n    barSize = [barSize, barSize];\n  }\n\n  var zAxisExtent = coordSys.getAxis('z').scale.getExtent();\n  var ifZAxisCrossZero = ifCrossZero(zAxisExtent);\n  var dims = ['x', 'y', 'z'].map(function (coordDimName) {\n    return seriesModel.coordDimToDataDim(coordDimName)[0];\n  });\n  var isStacked = isDimensionStacked(data, dims[2]);\n  var valueDim = isStacked ? data.getCalculationInfo('stackResultDimension') : dims[2];\n  data.each(dims, function (x, y, z, idx) {\n    // TODO zAxis is inversed\n    // TODO On different plane.\n    var stackedValue = data.get(valueDim, idx);\n    var baseValue = isStacked ? stackedValue - z : ifZAxisCrossZero ? 0 : zAxisExtent[0];\n    var start = coordSys.dataToPoint([x, y, baseValue]);\n    var end = coordSys.dataToPoint([x, y, stackedValue]);\n    var height = vec3.dist(start, end); // PENDING When zAxis is not cross zero.\n\n    var dir = [0, end[1] < start[1] ? -1 : 1, 0];\n\n    if (Math.abs(height) === 0) {\n      // TODO\n      height = 0.1;\n    }\n\n    var size = [barSize[0], height, barSize[1]];\n    data.setItemLayout(idx, [start, dir, size]);\n  });\n  data.setLayout('orient', [1, 0, 0]);\n}\n\nexport default cartesian3DLayout;", "export default function (data, dimX, dimY) {\n  var xExtent = data.getDataExtent(dimX);\n  var yExtent = data.getDataExtent(dimY); // TODO Handle one data situation\n\n  var xSpan = xExtent[1] - xExtent[0] || xExtent[0];\n  var ySpan = yExtent[1] - yExtent[0] || yExtent[0];\n  var dimSize = 50;\n  var tmp = new Uint8Array(dimSize * dimSize);\n\n  for (var i = 0; i < data.count(); i++) {\n    var x = data.get(dimX, i);\n    var y = data.get(dimY, i);\n    var xIdx = Math.floor((x - xExtent[0]) / xSpan * (dimSize - 1));\n    var yIdx = Math.floor((y - yExtent[0]) / ySpan * (dimSize - 1));\n    var idx = yIdx * dimSize + xIdx;\n    tmp[idx] = tmp[idx] || 1;\n  }\n\n  var filledCount = 0;\n\n  for (var i = 0; i < tmp.length; i++) {\n    if (tmp[i]) {\n      filledCount++;\n    }\n  }\n\n  return filledCount / tmp.length;\n}\n;", "import * as echarts from 'echarts/lib/echarts';\nimport Vector3 from 'claygl/src/math/Vector3';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nimport cartesian3DLayout from './cartesian3DLayout';\nimport evaluateBarSparseness from './evaluateBarSparseness';\nvar vec3 = glmatrix.vec3;\nvar isDimensionStacked = echarts.helper.dataStack.isDimensionStacked;\n\nfunction globeLayout(seriesModel, coordSys) {\n  var data = seriesModel.getData();\n  var barMinHeight = seriesModel.get('minHeight') || 0;\n  var barSize = seriesModel.get('barSize');\n  var dims = ['lng', 'lat', 'alt'].map(function (coordDimName) {\n    return seriesModel.coordDimToDataDim(coordDimName)[0];\n  });\n\n  if (barSize == null) {\n    var perimeter = coordSys.radius * Math.PI;\n    var fillRatio = evaluateBarSparseness(data, dims[0], dims[1]);\n    barSize = [perimeter / Math.sqrt(data.count() / fillRatio), perimeter / Math.sqrt(data.count() / fillRatio)];\n  } else if (!echarts.util.isArray(barSize)) {\n    barSize = [barSize, barSize];\n  }\n\n  var valueDim = getValueDimension(data, dims);\n  data.each(dims, function (lng, lat, val, idx) {\n    var stackedValue = data.get(valueDim.dimension, idx);\n    var baseValue = valueDim.isStacked ? stackedValue - val : coordSys.altitudeAxis.scale.getExtent()[0]; // TODO Stacked with minHeight.\n\n    var height = Math.max(coordSys.altitudeAxis.dataToCoord(val), barMinHeight);\n    var start = coordSys.dataToPoint([lng, lat, baseValue]);\n    var end = coordSys.dataToPoint([lng, lat, stackedValue]);\n    var dir = vec3.sub([], end, start);\n    vec3.normalize(dir, dir);\n    var size = [barSize[0], height, barSize[1]];\n    data.setItemLayout(idx, [start, dir, size]);\n  });\n  data.setLayout('orient', Vector3.UP.array);\n}\n\nfunction geo3DLayout(seriesModel, coordSys) {\n  var data = seriesModel.getData();\n  var barSize = seriesModel.get('barSize');\n  var barMinHeight = seriesModel.get('minHeight') || 0;\n  var dims = ['lng', 'lat', 'alt'].map(function (coordDimName) {\n    return seriesModel.coordDimToDataDim(coordDimName)[0];\n  });\n\n  if (barSize == null) {\n    var size = Math.min(coordSys.size[0], coordSys.size[2]);\n    var fillRatio = evaluateBarSparseness(data, dims[0], dims[1]);\n    barSize = [size / Math.sqrt(data.count() / fillRatio), size / Math.sqrt(data.count() / fillRatio)];\n  } else if (!echarts.util.isArray(barSize)) {\n    barSize = [barSize, barSize];\n  }\n\n  var dir = [0, 1, 0];\n  var valueDim = getValueDimension(data, dims);\n  data.each(dims, function (lng, lat, val, idx) {\n    var stackedValue = data.get(valueDim.dimension, idx);\n    var baseValue = valueDim.isStacked ? stackedValue - val : coordSys.altitudeAxis.scale.getExtent()[0];\n    var height = Math.max(coordSys.altitudeAxis.dataToCoord(val), barMinHeight);\n    var start = coordSys.dataToPoint([lng, lat, baseValue]);\n    var size = [barSize[0], height, barSize[1]];\n    data.setItemLayout(idx, [start, dir, size]);\n  });\n  data.setLayout('orient', [1, 0, 0]);\n}\n\nfunction mapService3DLayout(seriesModel, coordSys) {\n  var data = seriesModel.getData();\n  var dimLng = seriesModel.coordDimToDataDim('lng')[0];\n  var dimLat = seriesModel.coordDimToDataDim('lat')[0];\n  var dimAlt = seriesModel.coordDimToDataDim('alt')[0];\n  var barSize = seriesModel.get('barSize');\n  var barMinHeight = seriesModel.get('minHeight') || 0;\n\n  if (barSize == null) {\n    var xExtent = data.getDataExtent(dimLng);\n    var yExtent = data.getDataExtent(dimLat);\n    var corner0 = coordSys.dataToPoint([xExtent[0], yExtent[0]]);\n    var corner1 = coordSys.dataToPoint([xExtent[1], yExtent[1]]);\n    var size = Math.min(Math.abs(corner0[0] - corner1[0]), Math.abs(corner0[1] - corner1[1])) || 1;\n    var fillRatio = evaluateBarSparseness(data, dimLng, dimLat); // PENDING, data density\n\n    barSize = [size / Math.sqrt(data.count() / fillRatio), size / Math.sqrt(data.count() / fillRatio)];\n  } else {\n    if (!echarts.util.isArray(barSize)) {\n      barSize = [barSize, barSize];\n    }\n\n    barSize[0] /= coordSys.getScale() / 16;\n    barSize[1] /= coordSys.getScale() / 16;\n  }\n\n  var dir = [0, 0, 1];\n  var dims = [dimLng, dimLat, dimAlt];\n  var valueDim = getValueDimension(data, dims);\n  data.each(dims, function (lng, lat, val, idx) {\n    var stackedValue = data.get(valueDim.dimension, idx);\n    var baseValue = valueDim.isStacked ? stackedValue - val : 0;\n    var start = coordSys.dataToPoint([lng, lat, baseValue]);\n    var end = coordSys.dataToPoint([lng, lat, stackedValue]);\n    var height = Math.max(end[2] - start[2], barMinHeight);\n    var size = [barSize[0], height, barSize[1]];\n    data.setItemLayout(idx, [start, dir, size]);\n  });\n  data.setLayout('orient', [1, 0, 0]);\n}\n\nfunction getValueDimension(data, dataDims) {\n  var isStacked = isDimensionStacked(data, dataDims[2]);\n  return {\n    dimension: isStacked ? data.getCalculationInfo('stackResultDimension') : dataDims[2],\n    isStacked: isStacked\n  };\n}\n\nexport default function registerBarLayout(registers) {\n  registers.registerLayout(function (ecModel, api) {\n    ecModel.eachSeriesByType('bar3D', function (seriesModel) {\n      var coordSys = seriesModel.coordinateSystem;\n      var coordSysType = coordSys && coordSys.type;\n\n      if (coordSysType === 'globe') {\n        globeLayout(seriesModel, coordSys);\n      } else if (coordSysType === 'cartesian3D') {\n        cartesian3DLayout(seriesModel, coordSys);\n      } else if (coordSysType === 'geo3D') {\n        geo3DLayout(seriesModel, coordSys);\n      } else if (coordSysType === 'mapbox3D' || coordSysType === 'maptalks3D') {\n        mapService3DLayout(seriesModel, coordSys);\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          if (!coordSys) {\n            throw new Error('bar3D doesn\\'t have coordinate system.');\n          } else {\n            throw new Error('bar3D doesn\\'t support coordinate system ' + coordSys.type);\n          }\n        }\n      }\n    });\n  });\n}", "import * as echarts from 'echarts/lib/echarts';\nvar formatUtil = {};\n\nformatUtil.getFormattedLabel = function (seriesModel, dataIndex, status, dataType, dimIndex) {\n  status = status || 'normal';\n  var data = seriesModel.getData(dataType);\n  var itemModel = data.getItemModel(dataIndex);\n  var params = seriesModel.getDataParams(dataIndex, dataType);\n\n  if (dimIndex != null && params.value instanceof Array) {\n    params.value = params.value[dimIndex];\n  }\n\n  var formatter = itemModel.get(status === 'normal' ? ['label', 'formatter'] : ['emphasis', 'label', 'formatter']);\n\n  if (formatter == null) {\n    formatter = itemModel.get(['label', 'formatter']);\n  }\n\n  var text;\n\n  if (typeof formatter === 'function') {\n    params.status = status;\n    text = formatter(params);\n  } else if (typeof formatter === 'string') {\n    text = echarts.format.formatTpl(formatter, params);\n  }\n\n  return text;\n};\n/**\n * If value is not array, then convert it to array.\n * @param  {*} value\n * @return {Array} [value] or value\n */\n\n\nformatUtil.normalizeToArray = function (value) {\n  return value instanceof Array ? value : value == null ? [] : [value];\n};\n\nexport default formatUtil;", "import * as echarts from 'echarts/lib/echarts';\nimport { getItemVisualColor } from '../../util/visual';\n\nfunction otherDimToDataDim(data, otherDim) {\n  var dataDim = [];\n  echarts.util.each(data.dimensions, function (dimName) {\n    var dimItem = data.getDimensionInfo(dimName);\n    var otherDims = dimItem.otherDims;\n    var dimIndex = otherDims[otherDim];\n\n    if (dimIndex != null && dimIndex !== false) {\n      dataDim[dimIndex] = dimItem.name;\n    }\n  });\n  return dataDim;\n}\n\nexport default function (seriesModel, dataIndex, multipleSeries) {\n  function formatArrayValue(value) {\n    var vertially = true;\n    var result = [];\n    var tooltipDims = otherDimToDataDim(data, 'tooltip');\n    tooltipDims.length ? echarts.util.each(tooltipDims, function (dimIdx) {\n      setEachItem(data.get(dimIdx, dataIndex), dimIdx);\n    }) // By default, all dims is used on tooltip.\n    : echarts.util.each(value, setEachItem);\n\n    function setEachItem(val, dimIdx) {\n      var dimInfo = data.getDimensionInfo(dimIdx); // If `dimInfo.tooltip` is not set, show tooltip.\n\n      if (!dimInfo || dimInfo.otherDims.tooltip === false) {\n        return;\n      }\n\n      var dimType = dimInfo.type;\n      var valStr = (vertially ? '- ' + (dimInfo.tooltipName || dimInfo.name) + ': ' : '') + (dimType === 'ordinal' ? val + '' : dimType === 'time' ? multipleSeries ? '' : echarts.format.formatTime('yyyy/MM/dd hh:mm:ss', val) : echarts.format.addCommas(val));\n      valStr && result.push(echarts.format.encodeHTML(valStr));\n    }\n\n    return (vertially ? '<br/>' : '') + result.join(vertially ? '<br/>' : ', ');\n  }\n\n  var data = seriesModel.getData();\n  var value = seriesModel.getRawValue(dataIndex);\n  var formattedValue = echarts.util.isArray(value) ? formatArrayValue(value) : echarts.format.encodeHTML(echarts.format.addCommas(value));\n  var name = data.getName(dataIndex);\n  var color = getItemVisualColor(data, dataIndex);\n\n  if (echarts.util.isObject(color) && color.colorStops) {\n    color = (color.colorStops[0] || {}).color;\n  }\n\n  color = color || 'transparent';\n  var colorEl = echarts.format.getTooltipMarker(color);\n  var seriesName = seriesModel.name; // FIXME\n\n  if (seriesName === '\\0-') {\n    // Not show '-'\n    seriesName = '';\n  }\n\n  seriesName = seriesName ? echarts.format.encodeHTML(seriesName) + (!multipleSeries ? '<br/>' : ': ') : '';\n  return !multipleSeries ? seriesName + colorEl + (name ? echarts.format.encodeHTML(name) + ': ' + formattedValue : formattedValue) : colorEl + seriesName + formattedValue;\n}\n;", "import * as echarts from 'echarts/lib/echarts';\nexport default function (seriesModel, dims, source) {\n  source = source || seriesModel.getSource();\n  var coordSysDimensions = dims || echarts.getCoordinateSystemDimensions(seriesModel.get('coordinateSystem')) || ['x', 'y', 'z'];\n  var dimensions = echarts.helper.createDimensions(source, {\n    dimensionsDefine: source.dimensionsDefine || seriesModel.get('dimensions'),\n    encodeDefine: source.encodeDefine || seriesModel.get('encode'),\n    coordDimensions: coordSysDimensions.map(function (dim) {\n      var axis3DModel = seriesModel.getReferringComponents(dim + 'Axis3D').models[0];\n      return {\n        type: axis3DModel && axis3DModel.get('type') === 'category' ? 'ordinal' : 'float',\n        name: dim // Find stackable dimension. Which will represent value.\n        // stackable: dim === 'z'\n\n      };\n    })\n  });\n\n  if (seriesModel.get('coordinateSystem') === 'cartesian3D') {\n    dimensions.forEach(function (dimInfo) {\n      if (coordSysDimensions.indexOf(dimInfo.coordDim) >= 0) {\n        var axis3DModel = seriesModel.getReferringComponents(dimInfo.coordDim + 'Axis3D').models[0];\n\n        if (axis3DModel && axis3DModel.get('type') === 'category') {\n          dimInfo.ordinalMeta = axis3DModel.getOrdinalMeta();\n        }\n      }\n    });\n  }\n\n  var stackCalculationInfo = echarts.helper.dataStack.enableDataStack( // Only support 'z' and `byIndex` now.\n  seriesModel, dimensions, {\n    byIndex: true,\n    stackedCoordDimension: 'z'\n  });\n  var data = new echarts.List(dimensions, seriesModel);\n  data.setCalculationInfo(stackCalculationInfo);\n  data.initData(source);\n  return data;\n}", "import * as echarts from 'echarts/lib/echarts';\nimport componentShadingMixin from '../../component/common/componentShadingMixin';\nimport formatUtil from '../../util/format';\nimport formatTooltip from '../common/formatTooltip';\nimport createList from '../common/createList';\nvar Bar3DSeries = echarts.SeriesModel.extend({\n  type: 'series.bar3D',\n  dependencies: ['globe'],\n  visualStyleAccessPathvisu: 'itemStyle',\n  getInitialData: function (option, ecModel) {\n    return createList(this);\n  },\n  getFormattedLabel: function (dataIndex, status, dataType, dimIndex) {\n    var text = formatUtil.getFormattedLabel(this, dataIndex, status, dataType, dimIndex);\n\n    if (text == null) {\n      text = this.getData().get('z', dataIndex);\n    }\n\n    return text;\n  },\n  formatTooltip: function (dataIndex) {\n    return formatTooltip(this, dataIndex);\n  },\n  defaultOption: {\n    coordinateSystem: 'cartesian3D',\n    globeIndex: 0,\n    grid3DIndex: 0,\n    zlevel: -10,\n    // bevelSize, 0 has no bevel\n    bevelSize: 0,\n    // higher is smoother\n    bevelSmoothness: 2,\n    // Bar width and depth\n    // barSize: [1, 1],\n    // On grid plane when coordinateSystem is cartesian3D\n    onGridPlane: 'xy',\n    // Shading of globe\n    shading: 'color',\n    minHeight: 0,\n    itemStyle: {\n      opacity: 1\n    },\n    label: {\n      show: false,\n      distance: 2,\n      textStyle: {\n        fontSize: 14,\n        color: '#000',\n        backgroundColor: 'rgba(255,255,255,0.7)',\n        padding: 3,\n        borderRadius: 3\n      }\n    },\n    emphasis: {\n      label: {\n        show: true\n      }\n    },\n    animationDurationUpdate: 500\n  }\n});\necharts.util.merge(Bar3DSeries.prototype, componentShadingMixin);\nexport default Bar3DSeries;", "/**\n * Geometry collecting bars data\n *\n * @module echarts-gl/chart/bars/BarsGeometry\n * @author Yi Shen(http://github.com/pissang)\n */\nimport * as echarts from 'echarts/lib/echarts';\nimport dynamicConvertMixin from './dynamicConvertMixin';\nimport trianglesSortMixin from './trianglesSortMixin';\nimport Geometry from 'claygl/src/Geometry';\nimport glMatrix from 'claygl/src/dep/glmatrix';\nvar vec3 = glMatrix.vec3;\nvar mat3 = glMatrix.mat3;\n/**\n * @constructor\n * @alias module:echarts-gl/chart/bars/BarsGeometry\n * @extends clay.Geometry\n */\n\nvar BarsGeometry = Geometry.extend(function () {\n  return {\n    attributes: {\n      position: new Geometry.Attribute('position', 'float', 3, 'POSITION'),\n      normal: new Geometry.Attribute('normal', 'float', 3, 'NORMAL'),\n      color: new Geometry.Attribute('color', 'float', 4, 'COLOR'),\n      prevPosition: new Geometry.Attribute('prevPosition', 'float', 3),\n      prevNormal: new Geometry.Attribute('prevNormal', 'float', 3)\n    },\n    dynamic: true,\n    enableNormal: false,\n    bevelSize: 1,\n    bevelSegments: 0,\n    // Map from vertexIndex to dataIndex.\n    _dataIndices: null,\n    _vertexOffset: 0,\n    _triangleOffset: 0\n  };\n},\n/** @lends module:echarts-gl/chart/bars/BarsGeometry.prototype */\n{\n  resetOffset: function () {\n    this._vertexOffset = 0;\n    this._triangleOffset = 0;\n  },\n  setBarCount: function (barCount) {\n    var enableNormal = this.enableNormal;\n    var vertexCount = this.getBarVertexCount() * barCount;\n    var triangleCount = this.getBarTriangleCount() * barCount;\n\n    if (this.vertexCount !== vertexCount) {\n      this.attributes.position.init(vertexCount);\n\n      if (enableNormal) {\n        this.attributes.normal.init(vertexCount);\n      } else {\n        this.attributes.normal.value = null;\n      }\n\n      this.attributes.color.init(vertexCount);\n    }\n\n    if (this.triangleCount !== triangleCount) {\n      this.indices = vertexCount > 0xffff ? new Uint32Array(triangleCount * 3) : new Uint16Array(triangleCount * 3);\n      this._dataIndices = new Uint32Array(vertexCount);\n    }\n  },\n  getBarVertexCount: function () {\n    var bevelSegments = this.bevelSize > 0 ? this.bevelSegments : 0;\n    return bevelSegments > 0 ? this._getBevelBarVertexCount(bevelSegments) : this.enableNormal ? 24 : 8;\n  },\n  getBarTriangleCount: function () {\n    var bevelSegments = this.bevelSize > 0 ? this.bevelSegments : 0;\n    return bevelSegments > 0 ? this._getBevelBarTriangleCount(bevelSegments) : 12;\n  },\n  _getBevelBarVertexCount: function (bevelSegments) {\n    return (bevelSegments + 1) * 4 * (bevelSegments + 1) * 2;\n  },\n  _getBevelBarTriangleCount: function (bevelSegments) {\n    var widthSegments = bevelSegments * 4 + 3;\n    var heightSegments = bevelSegments * 2 + 1;\n    return (widthSegments + 1) * heightSegments * 2 + 4;\n  },\n  setColor: function (idx, color) {\n    var vertexCount = this.getBarVertexCount();\n    var start = vertexCount * idx;\n    var end = vertexCount * (idx + 1);\n\n    for (var i = start; i < end; i++) {\n      this.attributes.color.set(i, color);\n    }\n\n    this.dirtyAttribute('color');\n  },\n\n  /**\n   * Get dataIndex of vertex.\n   * @param {number} vertexIndex\n   */\n  getDataIndexOfVertex: function (vertexIndex) {\n    return this._dataIndices ? this._dataIndices[vertexIndex] : null;\n  },\n\n  /**\n   * Add a bar\n   * @param {Array.<number>} start\n   * @param {Array.<number>} end\n   * @param {Array.<number>} orient  right direction\n   * @param {Array.<number>} size size on x and z\n   * @param {Array.<number>} color\n   */\n  addBar: function () {\n    var v3Create = vec3.create;\n    var v3ScaleAndAdd = vec3.scaleAndAdd;\n    var end = v3Create();\n    var px = v3Create();\n    var py = v3Create();\n    var pz = v3Create();\n    var nx = v3Create();\n    var ny = v3Create();\n    var nz = v3Create();\n    var pts = [];\n    var normals = [];\n\n    for (var i = 0; i < 8; i++) {\n      pts[i] = v3Create();\n    }\n\n    var cubeFaces4 = [// PX\n    [0, 1, 5, 4], // NX\n    [2, 3, 7, 6], // PY\n    [4, 5, 6, 7], // NY\n    [3, 2, 1, 0], // PZ\n    [0, 4, 7, 3], // NZ\n    [1, 2, 6, 5]];\n    var face4To3 = [0, 1, 2, 0, 2, 3];\n    var cubeFaces3 = [];\n\n    for (var i = 0; i < cubeFaces4.length; i++) {\n      var face4 = cubeFaces4[i];\n\n      for (var j = 0; j < 2; j++) {\n        var face = [];\n\n        for (var k = 0; k < 3; k++) {\n          face.push(face4[face4To3[j * 3 + k]]);\n        }\n\n        cubeFaces3.push(face);\n      }\n    }\n\n    return function (start, dir, leftDir, size, color, dataIndex) {\n      // Use vertex, triangle maybe sorted.\n      var startVertex = this._vertexOffset;\n\n      if (this.bevelSize > 0 && this.bevelSegments > 0) {\n        this._addBevelBar(start, dir, leftDir, size, this.bevelSize, this.bevelSegments, color);\n      } else {\n        vec3.copy(py, dir);\n        vec3.normalize(py, py); // x * y => z\n\n        vec3.cross(pz, leftDir, py);\n        vec3.normalize(pz, pz); // y * z => x\n\n        vec3.cross(px, py, pz);\n        vec3.normalize(pz, pz);\n        vec3.negate(nx, px);\n        vec3.negate(ny, py);\n        vec3.negate(nz, pz);\n        v3ScaleAndAdd(pts[0], start, px, size[0] / 2);\n        v3ScaleAndAdd(pts[0], pts[0], pz, size[2] / 2);\n        v3ScaleAndAdd(pts[1], start, px, size[0] / 2);\n        v3ScaleAndAdd(pts[1], pts[1], nz, size[2] / 2);\n        v3ScaleAndAdd(pts[2], start, nx, size[0] / 2);\n        v3ScaleAndAdd(pts[2], pts[2], nz, size[2] / 2);\n        v3ScaleAndAdd(pts[3], start, nx, size[0] / 2);\n        v3ScaleAndAdd(pts[3], pts[3], pz, size[2] / 2);\n        v3ScaleAndAdd(end, start, py, size[1]);\n        v3ScaleAndAdd(pts[4], end, px, size[0] / 2);\n        v3ScaleAndAdd(pts[4], pts[4], pz, size[2] / 2);\n        v3ScaleAndAdd(pts[5], end, px, size[0] / 2);\n        v3ScaleAndAdd(pts[5], pts[5], nz, size[2] / 2);\n        v3ScaleAndAdd(pts[6], end, nx, size[0] / 2);\n        v3ScaleAndAdd(pts[6], pts[6], nz, size[2] / 2);\n        v3ScaleAndAdd(pts[7], end, nx, size[0] / 2);\n        v3ScaleAndAdd(pts[7], pts[7], pz, size[2] / 2);\n        var attributes = this.attributes;\n\n        if (this.enableNormal) {\n          normals[0] = px;\n          normals[1] = nx;\n          normals[2] = py;\n          normals[3] = ny;\n          normals[4] = pz;\n          normals[5] = nz;\n          var vertexOffset = this._vertexOffset;\n\n          for (var i = 0; i < cubeFaces4.length; i++) {\n            var idx3 = this._triangleOffset * 3;\n\n            for (var k = 0; k < 6; k++) {\n              this.indices[idx3++] = vertexOffset + face4To3[k];\n            }\n\n            vertexOffset += 4;\n            this._triangleOffset += 2;\n          }\n\n          for (var i = 0; i < cubeFaces4.length; i++) {\n            var normal = normals[i];\n\n            for (var k = 0; k < 4; k++) {\n              var idx = cubeFaces4[i][k];\n              attributes.position.set(this._vertexOffset, pts[idx]);\n              attributes.normal.set(this._vertexOffset, normal);\n              attributes.color.set(this._vertexOffset++, color);\n            }\n          }\n        } else {\n          for (var i = 0; i < cubeFaces3.length; i++) {\n            var idx3 = this._triangleOffset * 3;\n\n            for (var k = 0; k < 3; k++) {\n              this.indices[idx3 + k] = cubeFaces3[i][k] + this._vertexOffset;\n            }\n\n            this._triangleOffset++;\n          }\n\n          for (var i = 0; i < pts.length; i++) {\n            attributes.position.set(this._vertexOffset, pts[i]);\n            attributes.color.set(this._vertexOffset++, color);\n          }\n        }\n      }\n\n      var endVerex = this._vertexOffset;\n\n      for (var i = startVertex; i < endVerex; i++) {\n        this._dataIndices[i] = dataIndex;\n      }\n    };\n  }(),\n\n  /**\n   * Add a bar with bevel\n   * @param {Array.<number>} start\n   * @param {Array.<number>} end\n   * @param {Array.<number>} orient  right direction\n   * @param {Array.<number>} size size on x and z\n   * @param {number} bevelSize\n   * @param {number} bevelSegments\n   * @param {Array.<number>} color\n   */\n  _addBevelBar: function () {\n    var px = vec3.create();\n    var py = vec3.create();\n    var pz = vec3.create();\n    var rotateMat = mat3.create();\n    var bevelStartSize = [];\n    var xOffsets = [1, -1, -1, 1];\n    var zOffsets = [1, 1, -1, -1];\n    var yOffsets = [2, 0];\n    return function (start, dir, leftDir, size, bevelSize, bevelSegments, color) {\n      vec3.copy(py, dir);\n      vec3.normalize(py, py); // x * y => z\n\n      vec3.cross(pz, leftDir, py);\n      vec3.normalize(pz, pz); // y * z => x\n\n      vec3.cross(px, py, pz);\n      vec3.normalize(pz, pz);\n      rotateMat[0] = px[0];\n      rotateMat[1] = px[1];\n      rotateMat[2] = px[2];\n      rotateMat[3] = py[0];\n      rotateMat[4] = py[1];\n      rotateMat[5] = py[2];\n      rotateMat[6] = pz[0];\n      rotateMat[7] = pz[1];\n      rotateMat[8] = pz[2];\n      bevelSize = Math.min(size[0], size[2]) / 2 * bevelSize;\n\n      for (var i = 0; i < 3; i++) {\n        bevelStartSize[i] = Math.max(size[i] - bevelSize * 2, 0);\n      }\n\n      var rx = (size[0] - bevelStartSize[0]) / 2;\n      var ry = (size[1] - bevelStartSize[1]) / 2;\n      var rz = (size[2] - bevelStartSize[2]) / 2;\n      var pos = [];\n      var normal = [];\n      var vertexOffset = this._vertexOffset;\n      var endIndices = [];\n\n      for (var i = 0; i < 2; i++) {\n        endIndices[i] = endIndices[i] = [];\n\n        for (var m = 0; m <= bevelSegments; m++) {\n          for (var j = 0; j < 4; j++) {\n            if (m === 0 && i === 0 || i === 1 && m === bevelSegments) {\n              endIndices[i].push(vertexOffset);\n            }\n\n            for (var n = 0; n <= bevelSegments; n++) {\n              var phi = n / bevelSegments * Math.PI / 2 + Math.PI / 2 * j;\n              var theta = m / bevelSegments * Math.PI / 2 + Math.PI / 2 * i; // var r = rx < ry ? (rz < rx ? rz : rx) : (rz < ry ? rz : ry);\n\n              normal[0] = rx * Math.cos(phi) * Math.sin(theta);\n              normal[1] = ry * Math.cos(theta);\n              normal[2] = rz * Math.sin(phi) * Math.sin(theta);\n              pos[0] = normal[0] + xOffsets[j] * bevelStartSize[0] / 2;\n              pos[1] = normal[1] + ry + yOffsets[i] * bevelStartSize[1] / 2;\n              pos[2] = normal[2] + zOffsets[j] * bevelStartSize[2] / 2; // Normal is not right if rx, ry, rz not equal.\n\n              if (!(Math.abs(rx - ry) < 1e-6 && Math.abs(ry - rz) < 1e-6)) {\n                normal[0] /= rx * rx;\n                normal[1] /= ry * ry;\n                normal[2] /= rz * rz;\n              }\n\n              vec3.normalize(normal, normal);\n              vec3.transformMat3(pos, pos, rotateMat);\n              vec3.transformMat3(normal, normal, rotateMat);\n              vec3.add(pos, pos, start);\n              this.attributes.position.set(vertexOffset, pos);\n\n              if (this.enableNormal) {\n                this.attributes.normal.set(vertexOffset, normal);\n              }\n\n              this.attributes.color.set(vertexOffset, color);\n              vertexOffset++;\n            }\n          }\n        }\n      }\n\n      var widthSegments = bevelSegments * 4 + 3;\n      var heightSegments = bevelSegments * 2 + 1;\n      var len = widthSegments + 1;\n\n      for (var j = 0; j < heightSegments; j++) {\n        for (var i = 0; i <= widthSegments; i++) {\n          var i2 = j * len + i + this._vertexOffset;\n          var i1 = j * len + (i + 1) % len + this._vertexOffset;\n          var i4 = (j + 1) * len + (i + 1) % len + this._vertexOffset;\n          var i3 = (j + 1) * len + i + this._vertexOffset;\n          this.setTriangleIndices(this._triangleOffset++, [i4, i2, i1]);\n          this.setTriangleIndices(this._triangleOffset++, [i4, i3, i2]);\n        }\n      } // Close top and bottom\n\n\n      this.setTriangleIndices(this._triangleOffset++, [endIndices[0][0], endIndices[0][2], endIndices[0][1]]);\n      this.setTriangleIndices(this._triangleOffset++, [endIndices[0][0], endIndices[0][3], endIndices[0][2]]);\n      this.setTriangleIndices(this._triangleOffset++, [endIndices[1][0], endIndices[1][1], endIndices[1][2]]);\n      this.setTriangleIndices(this._triangleOffset++, [endIndices[1][0], endIndices[1][2], endIndices[1][3]]);\n      this._vertexOffset = vertexOffset;\n    };\n  }()\n});\necharts.util.defaults(BarsGeometry.prototype, dynamicConvertMixin);\necharts.util.defaults(BarsGeometry.prototype, trianglesSortMixin);\nexport default BarsGeometry;", "import * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport retrieve from '../../util/retrieve';\nimport format from '../../util/format';\nimport BarsGeometry from '../../util/geometry/Bars3DGeometry';\nimport LabelsBuilder from '../../component/common/LabelsBuilder';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nimport { getItemVisualColor, getItemVisualOpacity } from '../../util/visual';\nvar vec3 = glmatrix.vec3;\nexport default echarts.ChartView.extend({\n  type: 'bar3D',\n  __ecgl__: true,\n  init: function (ecModel, api) {\n    this.groupGL = new graphicGL.Node();\n    this._api = api;\n    this._labelsBuilder = new LabelsBuilder(256, 256, api);\n    var self = this;\n\n    this._labelsBuilder.getLabelPosition = function (dataIndex, position, distance) {\n      if (self._data) {\n        var layout = self._data.getItemLayout(dataIndex);\n\n        var start = layout[0];\n        var dir = layout[1];\n        var height = layout[2][1];\n        return vec3.scaleAndAdd([], start, dir, distance + height);\n      } else {\n        return [0, 0];\n      }\n    }; // Give a large render order.\n\n\n    this._labelsBuilder.getMesh().renderOrder = 100;\n  },\n  render: function (seriesModel, ecModel, api) {\n    // Swap barMesh\n    var tmp = this._prevBarMesh;\n    this._prevBarMesh = this._barMesh;\n    this._barMesh = tmp;\n\n    if (!this._barMesh) {\n      this._barMesh = new graphicGL.Mesh({\n        geometry: new BarsGeometry(),\n        shadowDepthMaterial: new graphicGL.Material({\n          shader: new graphicGL.Shader(graphicGL.Shader.source('ecgl.sm.depth.vertex'), graphicGL.Shader.source('ecgl.sm.depth.fragment'))\n        }),\n        // Only cartesian3D enable culling\n        // FIXME Performance\n        culling: seriesModel.coordinateSystem.type === 'cartesian3D',\n        // Render after axes\n        renderOrder: 10,\n        // Render normal in normal pass\n        renderNormal: true\n      });\n    }\n\n    this.groupGL.remove(this._prevBarMesh);\n    this.groupGL.add(this._barMesh);\n    this.groupGL.add(this._labelsBuilder.getMesh());\n    var coordSys = seriesModel.coordinateSystem;\n\n    this._doRender(seriesModel, api);\n\n    if (coordSys && coordSys.viewGL) {\n      coordSys.viewGL.add(this.groupGL);\n      var methodName = coordSys.viewGL.isLinearSpace() ? 'define' : 'undefine';\n\n      this._barMesh.material[methodName]('fragment', 'SRGB_DECODE');\n    }\n\n    this._data = seriesModel.getData();\n\n    this._labelsBuilder.updateData(this._data);\n\n    this._labelsBuilder.updateLabels();\n\n    this._updateAnimation(seriesModel);\n  },\n  _updateAnimation: function (seriesModel) {\n    graphicGL.updateVertexAnimation([['prevPosition', 'position'], ['prevNormal', 'normal']], this._prevBarMesh, this._barMesh, seriesModel);\n  },\n  _doRender: function (seriesModel, api) {\n    var data = seriesModel.getData();\n    var shading = seriesModel.get('shading');\n    var enableNormal = shading !== 'color';\n    var self = this;\n    var barMesh = this._barMesh;\n    var shadingPrefix = 'ecgl.' + shading;\n\n    if (!barMesh.material || barMesh.material.shader.name !== shadingPrefix) {\n      barMesh.material = graphicGL.createMaterial(shadingPrefix, ['VERTEX_COLOR']);\n    }\n\n    graphicGL.setMaterialFromModel(shading, barMesh.material, seriesModel, api);\n    barMesh.geometry.enableNormal = enableNormal;\n    barMesh.geometry.resetOffset(); // Bevel settings\n\n    var bevelSize = seriesModel.get('bevelSize');\n    var bevelSegments = seriesModel.get('bevelSmoothness');\n    barMesh.geometry.bevelSegments = bevelSegments;\n    barMesh.geometry.bevelSize = bevelSize;\n    var colorArr = [];\n    var vertexColors = new Float32Array(data.count() * 4);\n    var colorOffset = 0;\n    var barCount = 0;\n    var hasTransparent = false;\n    data.each(function (idx) {\n      if (!data.hasValue(idx)) {\n        return;\n      }\n\n      var color = getItemVisualColor(data, idx);\n      var opacity = getItemVisualOpacity(data, idx);\n\n      if (opacity == null) {\n        opacity = 1;\n      }\n\n      graphicGL.parseColor(color, colorArr);\n      colorArr[3] *= opacity;\n      vertexColors[colorOffset++] = colorArr[0];\n      vertexColors[colorOffset++] = colorArr[1];\n      vertexColors[colorOffset++] = colorArr[2];\n      vertexColors[colorOffset++] = colorArr[3];\n\n      if (colorArr[3] > 0) {\n        barCount++;\n\n        if (colorArr[3] < 0.99) {\n          hasTransparent = true;\n        }\n      }\n    });\n    barMesh.geometry.setBarCount(barCount);\n    var orient = data.getLayout('orient'); // Map of dataIndex and barIndex.\n\n    var barIndexOfData = this._barIndexOfData = new Int32Array(data.count());\n    var barCount = 0;\n    data.each(function (idx) {\n      if (!data.hasValue(idx)) {\n        barIndexOfData[idx] = -1;\n        return;\n      }\n\n      var layout = data.getItemLayout(idx);\n      var start = layout[0];\n      var dir = layout[1];\n      var size = layout[2];\n      var idx4 = idx * 4;\n      colorArr[0] = vertexColors[idx4++];\n      colorArr[1] = vertexColors[idx4++];\n      colorArr[2] = vertexColors[idx4++];\n      colorArr[3] = vertexColors[idx4++];\n\n      if (colorArr[3] > 0) {\n        self._barMesh.geometry.addBar(start, dir, orient, size, colorArr, idx);\n\n        barIndexOfData[idx] = barCount++;\n      }\n    });\n    barMesh.geometry.dirty();\n    barMesh.geometry.updateBoundingBox();\n    var material = barMesh.material;\n    material.transparent = hasTransparent;\n    material.depthMask = !hasTransparent;\n    barMesh.geometry.sortTriangles = hasTransparent;\n\n    this._initHandler(seriesModel, api);\n  },\n  _initHandler: function (seriesModel, api) {\n    var data = seriesModel.getData();\n    var barMesh = this._barMesh;\n    var isCartesian3D = seriesModel.coordinateSystem.type === 'cartesian3D';\n    barMesh.seriesIndex = seriesModel.seriesIndex;\n    var lastDataIndex = -1;\n    barMesh.off('mousemove');\n    barMesh.off('mouseout');\n    barMesh.on('mousemove', function (e) {\n      var dataIndex = barMesh.geometry.getDataIndexOfVertex(e.triangle[0]);\n\n      if (dataIndex !== lastDataIndex) {\n        this._downplay(lastDataIndex);\n\n        this._highlight(dataIndex);\n\n        this._labelsBuilder.updateLabels([dataIndex]);\n\n        if (isCartesian3D) {\n          api.dispatchAction({\n            type: 'grid3DShowAxisPointer',\n            value: [data.get('x', dataIndex), data.get('y', dataIndex), data.get('z', dataIndex, true)]\n          });\n        }\n      }\n\n      lastDataIndex = dataIndex;\n      barMesh.dataIndex = dataIndex;\n    }, this);\n    barMesh.on('mouseout', function (e) {\n      this._downplay(lastDataIndex);\n\n      this._labelsBuilder.updateLabels();\n\n      lastDataIndex = -1;\n      barMesh.dataIndex = -1;\n\n      if (isCartesian3D) {\n        api.dispatchAction({\n          type: 'grid3DHideAxisPointer'\n        });\n      }\n    }, this);\n  },\n  _highlight: function (dataIndex) {\n    var data = this._data;\n\n    if (!data) {\n      return;\n    }\n\n    var barIndex = this._barIndexOfData[dataIndex];\n\n    if (barIndex < 0) {\n      return;\n    }\n\n    var itemModel = data.getItemModel(dataIndex);\n    var emphasisItemStyleModel = itemModel.getModel('emphasis.itemStyle');\n    var emphasisColor = emphasisItemStyleModel.get('color');\n    var emphasisOpacity = emphasisItemStyleModel.get('opacity');\n\n    if (emphasisColor == null) {\n      var color = getItemVisualColor(data, dataIndex);\n      emphasisColor = echarts.color.lift(color, -0.4);\n    }\n\n    if (emphasisOpacity == null) {\n      emphasisOpacity = getItemVisualOpacity(data, dataIndex);\n    }\n\n    var colorArr = graphicGL.parseColor(emphasisColor);\n    colorArr[3] *= emphasisOpacity;\n\n    this._barMesh.geometry.setColor(barIndex, colorArr);\n\n    this._api.getZr().refresh();\n  },\n  _downplay: function (dataIndex) {\n    var data = this._data;\n\n    if (!data) {\n      return;\n    }\n\n    var barIndex = this._barIndexOfData[dataIndex];\n\n    if (barIndex < 0) {\n      return;\n    }\n\n    var color = getItemVisualColor(data, dataIndex);\n    var opacity = getItemVisualOpacity(data, dataIndex);\n    var colorArr = graphicGL.parseColor(color);\n    colorArr[3] *= opacity;\n\n    this._barMesh.geometry.setColor(barIndex, colorArr);\n\n    this._api.getZr().refresh();\n  },\n  highlight: function (seriesModel, ecModel, api, payload) {\n    this._toggleStatus('highlight', seriesModel, ecModel, api, payload);\n  },\n  downplay: function (seriesModel, ecModel, api, payload) {\n    this._toggleStatus('downplay', seriesModel, ecModel, api, payload);\n  },\n  _toggleStatus: function (status, seriesModel, ecModel, api, payload) {\n    var data = seriesModel.getData();\n    var dataIndex = retrieve.queryDataIndex(data, payload);\n    var self = this;\n\n    if (dataIndex != null) {\n      echarts.util.each(format.normalizeToArray(dataIndex), function (dataIdx) {\n        status === 'highlight' ? this._highlight(dataIdx) : this._downplay(dataIdx);\n      }, this);\n    } else {\n      data.each(function (dataIdx) {\n        status === 'highlight' ? self._highlight(dataIdx) : self._downplay(dataIdx);\n      });\n    }\n  },\n  remove: function () {\n    this.groupGL.removeAll();\n  },\n  dispose: function () {\n    this._labelsBuilder.dispose();\n\n    this.groupGL.removeAll();\n  }\n});", "// TODO ECharts GL must be imported whatever component,charts is imported.\nimport '../../echarts-gl';\nimport registerBarLayout from './bar3DLayout';\nimport Bar3DSeries from './Bar3DSeries';\nimport Bar3DView from './Bar3DView';\nexport function install(registers) {\n  registers.registerChartView(Bar3DView);\n  registers.registerSeriesModel(Bar3DSeries);\n  registerBarLayout(registers);\n  registers.registerProcessor(function (ecModel, api) {\n    ecModel.eachSeriesByType('bar3d', function (seriesModel) {\n      var data = seriesModel.getData();\n      data.filterSelf(function (idx) {\n        return data.hasValue(idx);\n      });\n    });\n  });\n}", "import * as echarts from 'echarts/lib/echarts';\nimport formatTooltip from '../common/formatTooltip';\nimport createList from '../common/createList';\nvar Line3DSeries = echarts.SeriesModel.extend({\n  type: 'series.line3D',\n  dependencies: ['grid3D'],\n  visualStyleAccessPath: 'lineStyle',\n  visualDrawType: 'stroke',\n  getInitialData: function (option, ecModel) {\n    return createList(this);\n  },\n  formatTooltip: function (dataIndex) {\n    return formatTooltip(this, dataIndex);\n  },\n  defaultOption: {\n    coordinateSystem: 'cartesian3D',\n    zlevel: -10,\n    // Cartesian coordinate system\n    grid3DIndex: 0,\n    lineStyle: {\n      width: 2\n    },\n    animationDurationUpdate: 500\n  }\n});\nexport default Line3DSeries;", "import * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport retrieve from '../../util/retrieve';\nimport Lines3DGeometry from '../../util/geometry/Lines3D';\nimport Matrix4 from 'claygl/src/math/Matrix4';\nimport Vector3 from 'claygl/src/math/Vector3';\nimport * as lineContain from 'zrender/lib/contain/line';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nimport { getItemVisualColor, getItemVisualOpacity } from '../../util/visual';\nimport lines3DGLSL from '../../util/shader/lines3D.glsl.js';\nvar vec3 = glmatrix.vec3;\ngraphicGL.Shader.import(lines3DGLSL);\nexport default echarts.ChartView.extend({\n  type: 'line3D',\n  __ecgl__: true,\n  init: function (ecModel, api) {\n    this.groupGL = new graphicGL.Node();\n    this._api = api;\n  },\n  render: function (seriesModel, ecModel, api) {\n    var tmp = this._prevLine3DMesh;\n    this._prevLine3DMesh = this._line3DMesh;\n    this._line3DMesh = tmp;\n\n    if (!this._line3DMesh) {\n      this._line3DMesh = new graphicGL.Mesh({\n        geometry: new Lines3DGeometry({\n          useNativeLine: false,\n          sortTriangles: true\n        }),\n        material: new graphicGL.Material({\n          shader: graphicGL.createShader('ecgl.meshLines3D')\n        }),\n        // Render after axes\n        renderOrder: 10\n      });\n      this._line3DMesh.geometry.pick = this._pick.bind(this);\n    }\n\n    this.groupGL.remove(this._prevLine3DMesh);\n    this.groupGL.add(this._line3DMesh);\n    var coordSys = seriesModel.coordinateSystem;\n\n    if (coordSys && coordSys.viewGL) {\n      coordSys.viewGL.add(this.groupGL); // TODO\n\n      var methodName = coordSys.viewGL.isLinearSpace() ? 'define' : 'undefine';\n\n      this._line3DMesh.material[methodName]('fragment', 'SRGB_DECODE');\n    }\n\n    this._doRender(seriesModel, api);\n\n    this._data = seriesModel.getData();\n    this._camera = coordSys.viewGL.camera;\n    this.updateCamera();\n\n    this._updateAnimation(seriesModel);\n  },\n  updateCamera: function () {\n    this._updateNDCPosition();\n  },\n  _doRender: function (seriesModel, api) {\n    var data = seriesModel.getData();\n    var lineMesh = this._line3DMesh;\n    lineMesh.geometry.resetOffset();\n    var points = data.getLayout('points');\n    var colorArr = [];\n    var vertexColors = new Float32Array(points.length / 3 * 4);\n    var colorOffset = 0;\n    var hasTransparent = false;\n    data.each(function (idx) {\n      var color = getItemVisualColor(data, idx);\n      var opacity = getItemVisualOpacity(data, idx);\n\n      if (opacity == null) {\n        opacity = 1;\n      }\n\n      graphicGL.parseColor(color, colorArr);\n      colorArr[3] *= opacity;\n      vertexColors[colorOffset++] = colorArr[0];\n      vertexColors[colorOffset++] = colorArr[1];\n      vertexColors[colorOffset++] = colorArr[2];\n      vertexColors[colorOffset++] = colorArr[3];\n\n      if (colorArr[3] < 0.99) {\n        hasTransparent = true;\n      }\n    });\n    lineMesh.geometry.setVertexCount(lineMesh.geometry.getPolylineVertexCount(points));\n    lineMesh.geometry.setTriangleCount(lineMesh.geometry.getPolylineTriangleCount(points));\n    lineMesh.geometry.addPolyline(points, vertexColors, retrieve.firstNotNull(seriesModel.get('lineStyle.width'), 1));\n    lineMesh.geometry.dirty();\n    lineMesh.geometry.updateBoundingBox();\n    var material = lineMesh.material;\n    material.transparent = hasTransparent;\n    material.depthMask = !hasTransparent;\n    var debugWireframeModel = seriesModel.getModel('debug.wireframe');\n\n    if (debugWireframeModel.get('show')) {\n      lineMesh.geometry.createAttribute('barycentric', 'float', 3);\n      lineMesh.geometry.generateBarycentric();\n      lineMesh.material.set('both', 'WIREFRAME_TRIANGLE');\n      lineMesh.material.set('wireframeLineColor', graphicGL.parseColor(debugWireframeModel.get('lineStyle.color') || 'rgba(0,0,0,0.5)'));\n      lineMesh.material.set('wireframeLineWidth', retrieve.firstNotNull(debugWireframeModel.get('lineStyle.width'), 1));\n    } else {\n      lineMesh.material.set('both', 'WIREFRAME_TRIANGLE');\n    }\n\n    this._points = points;\n\n    this._initHandler(seriesModel, api);\n  },\n  _updateAnimation: function (seriesModel) {\n    graphicGL.updateVertexAnimation([['prevPosition', 'position'], ['prevPositionPrev', 'positionPrev'], ['prevPositionNext', 'positionNext']], this._prevLine3DMesh, this._line3DMesh, seriesModel);\n  },\n  _initHandler: function (seriesModel, api) {\n    var data = seriesModel.getData();\n    var coordSys = seriesModel.coordinateSystem;\n    var lineMesh = this._line3DMesh;\n    var lastDataIndex = -1;\n    lineMesh.seriesIndex = seriesModel.seriesIndex;\n    lineMesh.off('mousemove');\n    lineMesh.off('mouseout');\n    lineMesh.on('mousemove', function (e) {\n      var value = coordSys.pointToData(e.point.array);\n      var dataIndex = data.indicesOfNearest('x', value[0])[0];\n\n      if (dataIndex !== lastDataIndex) {\n        // this._downplay(lastDataIndex);\n        // this._highlight(dataIndex);\n        api.dispatchAction({\n          type: 'grid3DShowAxisPointer',\n          value: [data.get('x', dataIndex), data.get('y', dataIndex), data.get('z', dataIndex)]\n        });\n        lineMesh.dataIndex = dataIndex;\n      }\n\n      lastDataIndex = dataIndex;\n    }, this);\n    lineMesh.on('mouseout', function (e) {\n      // this._downplay(lastDataIndex);\n      lastDataIndex = -1;\n      lineMesh.dataIndex = -1;\n      api.dispatchAction({\n        type: 'grid3DHideAxisPointer'\n      });\n    }, this);\n  },\n  // _highlight: function (dataIndex) {\n  //     var data = this._data;\n  //     if (!data) {\n  //         return;\n  //     }\n  // },\n  // _downplay: function (dataIndex) {\n  //     var data = this._data;\n  //     if (!data) {\n  //         return;\n  //     }\n  // },\n  _updateNDCPosition: function () {\n    var worldViewProjection = new Matrix4();\n    var camera = this._camera;\n    Matrix4.multiply(worldViewProjection, camera.projectionMatrix, camera.viewMatrix);\n    var positionNDC = this._positionNDC;\n    var points = this._points;\n    var nPoints = points.length / 3;\n\n    if (!positionNDC || positionNDC.length / 2 !== nPoints) {\n      positionNDC = this._positionNDC = new Float32Array(nPoints * 2);\n    }\n\n    var pos = [];\n\n    for (var i = 0; i < nPoints; i++) {\n      var i3 = i * 3;\n      var i2 = i * 2;\n      pos[0] = points[i3];\n      pos[1] = points[i3 + 1];\n      pos[2] = points[i3 + 2];\n      pos[3] = 1;\n      vec3.transformMat4(pos, pos, worldViewProjection.array);\n      positionNDC[i2] = pos[0] / pos[3];\n      positionNDC[i2 + 1] = pos[1] / pos[3];\n    }\n  },\n  _pick: function (x, y, renderer, camera, renderable, out) {\n    var positionNDC = this._positionNDC;\n    var seriesModel = this._data.hostModel;\n    var lineWidth = seriesModel.get('lineStyle.width');\n    var dataIndex = -1;\n    var width = renderer.viewport.width;\n    var height = renderer.viewport.height;\n    var halfWidth = width * 0.5;\n    var halfHeight = height * 0.5;\n    x = (x + 1) * halfWidth;\n    y = (y + 1) * halfHeight;\n\n    for (var i = 1; i < positionNDC.length / 2; i++) {\n      var x0 = (positionNDC[(i - 1) * 2] + 1) * halfWidth;\n      var y0 = (positionNDC[(i - 1) * 2 + 1] + 1) * halfHeight;\n      var x1 = (positionNDC[i * 2] + 1) * halfWidth;\n      var y1 = (positionNDC[i * 2 + 1] + 1) * halfHeight;\n\n      if (lineContain.containStroke(x0, y0, x1, y1, lineWidth, x, y)) {\n        var dist0 = (x0 - x) * (x0 - x) + (y0 - y) * (y0 - y);\n        var dist1 = (x1 - x) * (x1 - x) + (y1 - y) * (y1 - y); // Nearest point.\n\n        dataIndex = dist0 < dist1 ? i - 1 : i;\n      }\n    }\n\n    if (dataIndex >= 0) {\n      var i3 = dataIndex * 3;\n      var point = new Vector3(this._points[i3], this._points[i3 + 1], this._points[i3 + 2]);\n      out.push({\n        dataIndex: dataIndex,\n        point: point,\n        pointWorld: point.clone(),\n        target: this._line3DMesh,\n        distance: this._camera.getWorldPosition().dist(point)\n      });\n    }\n  },\n  remove: function () {\n    this.groupGL.removeAll();\n  },\n  dispose: function () {\n    this.groupGL.removeAll();\n  }\n});", "// TODO ECharts GL must be imported whatever component,charts is imported.\nimport '../../echarts-gl';\nimport Line3DSeries from './Line3DSeries';\nimport Line3DView from './Line3DView';\nexport function install(registers) {\n  registers.registerChartView(Line3DView);\n  registers.registerSeriesModel(Line3DSeries);\n  registers.registerLayout(function (ecModel, api) {\n    ecModel.eachSeriesByType('line3D', function (seriesModel) {\n      var data = seriesModel.getData();\n      var coordSys = seriesModel.coordinateSystem;\n\n      if (coordSys) {\n        if (coordSys.type !== 'cartesian3D') {\n          if (process.env.NODE_ENV !== 'production') {\n            console.error('line3D needs cartesian3D coordinateSystem');\n          }\n\n          return;\n        }\n\n        var points = new Float32Array(data.count() * 3);\n        var item = [];\n        var out = [];\n        var coordDims = coordSys.dimensions;\n        var dims = coordDims.map(function (coordDim) {\n          return seriesModel.coordDimToDataDim(coordDim)[0];\n        });\n\n        if (coordSys) {\n          data.each(dims, function (x, y, z, idx) {\n            item[0] = x;\n            item[1] = y;\n            item[2] = z;\n            coordSys.dataToPoint(item, out);\n            points[idx * 3] = out[0];\n            points[idx * 3 + 1] = out[1];\n            points[idx * 3 + 2] = out[2];\n          });\n        }\n\n        data.setLayout('points', points);\n      }\n    });\n  });\n}", "import * as echarts from 'echarts/lib/echarts';\nimport formatUtil from '../../util/format';\nimport formatTooltip from '../common/formatTooltip';\nimport createList from '../common/createList';\nexport default echarts.SeriesModel.extend({\n  type: 'series.scatter3D',\n  dependencies: ['globe', 'grid3D', 'geo3D'],\n  visualStyleAccessPath: 'itemStyle',\n  hasSymbolVisual: true,\n  getInitialData: function (option, ecModel) {\n    return createList(this);\n  },\n  getFormattedLabel: function (dataIndex, status, dataType, dimIndex) {\n    var text = formatUtil.getFormattedLabel(this, dataIndex, status, dataType, dimIndex);\n\n    if (text == null) {\n      var data = this.getData();\n      var lastDim = data.dimensions[data.dimensions.length - 1];\n      text = data.get(lastDim, dataIndex);\n    }\n\n    return text;\n  },\n  formatTooltip: function (dataIndex) {\n    return formatTooltip(this, dataIndex);\n  },\n  defaultOption: {\n    coordinateSystem: 'cartesian3D',\n    zlevel: -10,\n    progressive: 1e5,\n    progressiveThreshold: 1e5,\n    // Cartesian coordinate system\n    grid3DIndex: 0,\n    globeIndex: 0,\n    symbol: 'circle',\n    symbolSize: 10,\n    // Support source-over, lighter\n    blendMode: 'source-over',\n    label: {\n      show: false,\n      position: 'right',\n      // Screen space distance\n      distance: 5,\n      textStyle: {\n        fontSize: 14,\n        color: '#000',\n        backgroundColor: 'rgba(255,255,255,0.7)',\n        padding: 3,\n        borderRadius: 3\n      }\n    },\n    itemStyle: {\n      opacity: 0.8\n    },\n    emphasis: {\n      label: {\n        show: true\n      }\n    },\n    animationDurationUpdate: 500\n  }\n});", "import * as echarts from 'echarts/lib/echarts';\n\nfunction makeSprite(size, canvas, draw) {\n  // http://simonsarris.com/blog/346-how-you-clear-your-canvas-matters\n  // http://jsperf.com/canvasclear\n  // Set width and height is fast\n  // And use the exist canvas if possible\n  // http://jsperf.com/create-canvas-vs-set-width-height/2\n  var canvas = canvas || document.createElement('canvas');\n  canvas.width = size;\n  canvas.height = size;\n  var ctx = canvas.getContext('2d');\n  draw && draw(ctx);\n  return canvas;\n}\n\nfunction makePath(symbol, symbolSize, style, marginBias) {\n  if (!echarts.util.isArray(symbolSize)) {\n    symbolSize = [symbolSize, symbolSize];\n  }\n\n  var margin = spriteUtil.getMarginByStyle(style, marginBias);\n  var width = symbolSize[0] + margin.left + margin.right;\n  var height = symbolSize[1] + margin.top + margin.bottom;\n  var path = echarts.helper.createSymbol(symbol, 0, 0, symbolSize[0], symbolSize[1]);\n  var size = Math.max(width, height);\n  path.x = margin.left;\n  path.y = margin.top;\n\n  if (width > height) {\n    path.y += (size - height) / 2;\n  } else {\n    path.x += (size - width) / 2;\n  }\n\n  var rect = path.getBoundingRect();\n  path.x -= rect.x;\n  path.y -= rect.y;\n  path.setStyle(style);\n  path.update();\n  path.__size = size;\n  return path;\n} // http://www.valvesoftware.com/publications/2007/SIGGRAPH2007_AlphaTestedMagnification.pdf\n\n\nfunction generateSDF(ctx, sourceImageData, range) {\n  var sourceWidth = sourceImageData.width;\n  var sourceHeight = sourceImageData.height;\n  var width = ctx.canvas.width;\n  var height = ctx.canvas.height;\n  var scaleX = sourceWidth / width;\n  var scaleY = sourceHeight / height;\n\n  function sign(r) {\n    return r < 128 ? 1 : -1;\n  }\n\n  function searchMinDistance(x, y) {\n    var minDistSqr = Infinity;\n    x = Math.floor(x * scaleX);\n    y = Math.floor(y * scaleY);\n    var i = y * sourceWidth + x;\n    var r = sourceImageData.data[i * 4];\n    var a = sign(r); // Search for min distance\n\n    for (var y2 = Math.max(y - range, 0); y2 < Math.min(y + range, sourceHeight); y2++) {\n      for (var x2 = Math.max(x - range, 0); x2 < Math.min(x + range, sourceWidth); x2++) {\n        var i = y2 * sourceWidth + x2;\n        var r2 = sourceImageData.data[i * 4];\n        var b = sign(r2);\n        var dx = x2 - x;\n        var dy = y2 - y;\n\n        if (a !== b) {\n          var distSqr = dx * dx + dy * dy;\n\n          if (distSqr < minDistSqr) {\n            minDistSqr = distSqr;\n          }\n        }\n      }\n    }\n\n    return a * Math.sqrt(minDistSqr);\n  }\n\n  var sdfImageData = ctx.createImageData(width, height);\n\n  for (var y = 0; y < height; y++) {\n    for (var x = 0; x < width; x++) {\n      var dist = searchMinDistance(x, y);\n      var normalized = dist / range * 0.5 + 0.5;\n      var i = (y * width + x) * 4;\n      sdfImageData.data[i++] = (1.0 - normalized) * 255;\n      sdfImageData.data[i++] = (1.0 - normalized) * 255;\n      sdfImageData.data[i++] = (1.0 - normalized) * 255;\n      sdfImageData.data[i++] = 255;\n    }\n  }\n\n  return sdfImageData;\n}\n\nvar spriteUtil = {\n  getMarginByStyle: function (style) {\n    var minMargin = style.minMargin || 0;\n    var lineWidth = 0;\n\n    if (style.stroke && style.stroke !== 'none') {\n      lineWidth = style.lineWidth == null ? 1 : style.lineWidth;\n    }\n\n    var shadowBlurSize = style.shadowBlur || 0;\n    var shadowOffsetX = style.shadowOffsetX || 0;\n    var shadowOffsetY = style.shadowOffsetY || 0;\n    var margin = {};\n    margin.left = Math.max(lineWidth / 2, -shadowOffsetX + shadowBlurSize, minMargin);\n    margin.right = Math.max(lineWidth / 2, shadowOffsetX + shadowBlurSize, minMargin);\n    margin.top = Math.max(lineWidth / 2, -shadowOffsetY + shadowBlurSize, minMargin);\n    margin.bottom = Math.max(lineWidth / 2, shadowOffsetY + shadowBlurSize, minMargin);\n    return margin;\n  },\n  // TODO Not consider shadowOffsetX, shadowOffsetY.\n\n  /**\n   * @param {string} symbol\n   * @param {number | Array.<number>} symbolSize\n   * @param {Object} style\n   */\n  createSymbolSprite: function (symbol, symbolSize, style, canvas) {\n    var path = makePath(symbol, symbolSize, style);\n    var margin = spriteUtil.getMarginByStyle(style);\n    return {\n      image: makeSprite(path.__size, canvas, function (ctx) {\n        echarts.innerDrawElementOnCanvas(ctx, path);\n      }),\n      margin: margin\n    };\n  },\n  createSDFFromCanvas: function (canvas, size, range, outCanvas) {\n    // TODO Create a low resolution SDF from high resolution image.\n    return makeSprite(size, outCanvas, function (outCtx) {\n      var ctx = canvas.getContext('2d');\n      var imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      outCtx.putImageData(generateSDF(outCtx, imgData, range), 0, 0);\n    });\n  },\n  createSimpleSprite: function (size, canvas) {\n    return makeSprite(size, canvas, function (ctx) {\n      var halfSize = size / 2;\n      ctx.beginPath();\n      ctx.arc(halfSize, halfSize, 60, 0, Math.PI * 2, false);\n      ctx.closePath();\n      var gradient = ctx.createRadialGradient(halfSize, halfSize, 0, halfSize, halfSize, halfSize);\n      gradient.addColorStop(0, 'rgba(255, 255, 255, 1)');\n      gradient.addColorStop(0.5, 'rgba(255, 255, 255, 0.5)');\n      gradient.addColorStop(1, 'rgba(255, 255, 255, 0)');\n      ctx.fillStyle = gradient;\n      ctx.fill();\n    });\n  }\n};\nexport default spriteUtil;", "import ProgressiveQuickSort from '../ProgressiveQuickSort';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nvar vec3 = glmatrix.vec3;\nexport default {\n  needsSortVertices: function () {\n    return this.sortVertices;\n  },\n  needsSortVerticesProgressively: function () {\n    return this.needsSortVertices() && this.vertexCount >= 2e4;\n  },\n  doSortVertices: function (cameraPos, frame) {\n    var indices = this.indices;\n    var p = vec3.create();\n\n    if (!indices) {\n      indices = this.indices = this.vertexCount > 0xffff ? new Uint32Array(this.vertexCount) : new Uint16Array(this.vertexCount);\n\n      for (var i = 0; i < indices.length; i++) {\n        indices[i] = i;\n      }\n    } // Do progressive quick sort.\n\n\n    if (frame === 0) {\n      var posAttr = this.attributes.position;\n      var cameraPos = cameraPos.array;\n      var noneCount = 0;\n\n      if (!this._zList || this._zList.length !== this.vertexCount) {\n        this._zList = new Float32Array(this.vertexCount);\n      }\n\n      var firstZ;\n\n      for (var i = 0; i < this.vertexCount; i++) {\n        posAttr.get(i, p); // Camera position is in object space\n\n        var z = vec3.sqrDist(p, cameraPos);\n\n        if (isNaN(z)) {\n          // Put far away, NaN value may cause sort slow\n          z = 1e7;\n          noneCount++;\n        }\n\n        if (i === 0) {\n          firstZ = z;\n          z = 0;\n        } else {\n          // Only store the difference to avoid the precision issue.\n          z = z - firstZ;\n        }\n\n        this._zList[i] = z;\n      }\n\n      this._noneCount = noneCount;\n    }\n\n    if (this.vertexCount < 2e4) {\n      // Use simple native sort for simple geometries.\n      if (frame === 0) {\n        this._simpleSort(this._noneCount / this.vertexCount > 0.05);\n      }\n    } else {\n      for (var i = 0; i < 3; i++) {\n        this._progressiveQuickSort(frame * 3 + i);\n      }\n    }\n\n    this.dirtyIndices();\n  },\n  _simpleSort: function (useNativeQuickSort) {\n    var zList = this._zList;\n    var indices = this.indices;\n\n    function compare(a, b) {\n      // Sort from far to near. which is descending order\n      return zList[b] - zList[a];\n    } // When too much value are equal, using native quick sort with three partition..\n    // or the simple quick sort will be nearly O(n*n)\n    // http://stackoverflow.com/questions/5126586/quicksort-complexity-when-all-the-elements-are-same\n    // Otherwise simple quicksort is more effecient than v8 native quick sort when data all different.\n\n\n    if (useNativeQuickSort) {\n      Array.prototype.sort.call(indices, compare);\n    } else {\n      ProgressiveQuickSort.sort(indices, compare, 0, indices.length - 1);\n    }\n  },\n  _progressiveQuickSort: function (frame) {\n    var zList = this._zList;\n    var indices = this.indices;\n    this._quickSort = this._quickSort || new ProgressiveQuickSort();\n\n    this._quickSort.step(indices, function (a, b) {\n      return zList[b] - zList[a];\n    }, frame);\n  }\n};", "export default \"@export ecgl.sdfSprite.vertex\\n\\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\\nuniform float elapsedTime : 0;\\n\\nattribute vec3 position : POSITION;\\n\\n#ifdef VERTEX_SIZE\\nattribute float size;\\n#else\\nuniform float u_Size;\\n#endif\\n\\n#ifdef VERTEX_COLOR\\nattribute vec4 a_FillColor: COLOR;\\nvarying vec4 v_Color;\\n#endif\\n\\n#ifdef VERTEX_ANIMATION\\nattribute vec3 prevPosition;\\nattribute float prevSize;\\nuniform float percent : 1.0;\\n#endif\\n\\n\\n#ifdef POSITIONTEXTURE_ENABLED\\nuniform sampler2D positionTexture;\\n#endif\\n\\nvarying float v_Size;\\n\\nvoid main()\\n{\\n\\n#ifdef POSITIONTEXTURE_ENABLED\\n gl_Position = worldViewProjection * vec4(texture2D(positionTexture, position.xy).xy, -10.0, 1.0);\\n#else\\n\\n #ifdef VERTEX_ANIMATION\\n vec3 pos = mix(prevPosition, position, percent);\\n #else\\n vec3 pos = position;\\n #endif\\n gl_Position = worldViewProjection * vec4(pos, 1.0);\\n#endif\\n\\n#ifdef VERTEX_SIZE\\n#ifdef VERTEX_ANIMATION\\n v_Size = mix(prevSize, size, percent);\\n#else\\n v_Size = size;\\n#endif\\n#else\\n v_Size = u_Size;\\n#endif\\n\\n#ifdef VERTEX_COLOR\\n v_Color = a_FillColor;\\n #endif\\n\\n gl_PointSize = v_Size;\\n}\\n\\n@end\\n\\n@export ecgl.sdfSprite.fragment\\n\\nuniform vec4 color: [1, 1, 1, 1];\\nuniform vec4 strokeColor: [1, 1, 1, 1];\\nuniform float smoothing: 0.07;\\n\\nuniform float lineWidth: 0.0;\\n\\n#ifdef VERTEX_COLOR\\nvarying vec4 v_Color;\\n#endif\\n\\nvarying float v_Size;\\n\\nuniform sampler2D sprite;\\n\\n@import clay.util.srgb\\n\\nvoid main()\\n{\\n gl_FragColor = color;\\n\\n vec4 _strokeColor = strokeColor;\\n\\n#ifdef VERTEX_COLOR\\n gl_FragColor *= v_Color;\\n #endif\\n\\n#ifdef SPRITE_ENABLED\\n float d = texture2D(sprite, gl_PointCoord).r;\\n gl_FragColor.a *= smoothstep(0.5 - smoothing, 0.5 + smoothing, d);\\n\\n if (lineWidth > 0.0) {\\n float sLineWidth = lineWidth / 2.0;\\n\\n float outlineMaxValue0 = 0.5 + sLineWidth;\\n float outlineMaxValue1 = 0.5 + sLineWidth + smoothing;\\n float outlineMinValue0 = 0.5 - sLineWidth - smoothing;\\n float outlineMinValue1 = 0.5 - sLineWidth;\\n\\n if (d <= outlineMaxValue1 && d >= outlineMinValue0) {\\n float a = _strokeColor.a;\\n if (d <= outlineMinValue1) {\\n a = a * smoothstep(outlineMinValue0, outlineMinValue1, d);\\n }\\n else {\\n a = a * smoothstep(outlineMaxValue1, outlineMaxValue0, d);\\n }\\n gl_FragColor.rgb = mix(gl_FragColor.rgb * gl_FragColor.a, _strokeColor.rgb, a);\\n gl_FragColor.a = gl_FragColor.a * (1.0 - a) + a;\\n }\\n }\\n#endif\\n\\n#ifdef SRGB_DECODE\\n gl_FragColor = sRGBToLinear(gl_FragColor);\\n#endif\\n}\\n@end\";", "import graphicGL from '../../util/graphicGL';\nimport verticesSortMixin from '../../util/geometry/verticesSortMixin';\nimport * as echarts from 'echarts/lib/echarts';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nvar vec4 = glmatrix.vec4;\nimport sdfSpriteGLSL from './sdfSprite.glsl.js';\ngraphicGL.Shader.import(sdfSpriteGLSL);\nvar PointsMesh = graphicGL.Mesh.extend(function () {\n  var geometry = new graphicGL.Geometry({\n    dynamic: true,\n    attributes: {\n      color: new graphicGL.Geometry.Attribute('color', 'float', 4, 'COLOR'),\n      position: new graphicGL.Geometry.Attribute('position', 'float', 3, 'POSITION'),\n      size: new graphicGL.Geometry.Attribute('size', 'float', 1),\n      prevPosition: new graphicGL.Geometry.Attribute('prevPosition', 'float', 3),\n      prevSize: new graphicGL.Geometry.Attribute('prevSize', 'float', 1)\n    }\n  });\n  Object.assign(geometry, verticesSortMixin);\n  var material = new graphicGL.Material({\n    shader: graphicGL.createShader('ecgl.sdfSprite'),\n    transparent: true,\n    depthMask: false\n  });\n  material.enableTexture('sprite');\n  material.define('both', 'VERTEX_COLOR');\n  material.define('both', 'VERTEX_SIZE');\n  var sdfTexture = new graphicGL.Texture2D({\n    image: document.createElement('canvas'),\n    flipY: false\n  });\n  material.set('sprite', sdfTexture); // Custom pick methods.\n\n  geometry.pick = this._pick.bind(this);\n  return {\n    geometry: geometry,\n    material: material,\n    mode: graphicGL.Mesh.POINTS,\n    sizeScale: 1\n  };\n}, {\n  _pick: function (x, y, renderer, camera, renderable, out) {\n    var positionNDC = this._positionNDC;\n\n    if (!positionNDC) {\n      return;\n    }\n\n    var viewport = renderer.viewport;\n    var ndcScaleX = 2 / viewport.width;\n    var ndcScaleY = 2 / viewport.height; // From near to far. indices have been sorted.\n\n    for (var i = this.geometry.vertexCount - 1; i >= 0; i--) {\n      var idx;\n\n      if (!this.geometry.indices) {\n        idx = i;\n      } else {\n        idx = this.geometry.indices[i];\n      }\n\n      var cx = positionNDC[idx * 2];\n      var cy = positionNDC[idx * 2 + 1];\n      var size = this.geometry.attributes.size.get(idx) / this.sizeScale;\n      var halfSize = size / 2;\n\n      if (x > cx - halfSize * ndcScaleX && x < cx + halfSize * ndcScaleX && y > cy - halfSize * ndcScaleY && y < cy + halfSize * ndcScaleY) {\n        var point = new graphicGL.Vector3();\n        var pointWorld = new graphicGL.Vector3();\n        this.geometry.attributes.position.get(idx, point.array);\n        graphicGL.Vector3.transformMat4(pointWorld, point, this.worldTransform);\n        out.push({\n          vertexIndex: idx,\n          point: point,\n          pointWorld: pointWorld,\n          target: this,\n          distance: pointWorld.distance(camera.getWorldPosition())\n        });\n      }\n    }\n  },\n  updateNDCPosition: function (worldViewProjection, is2D, api) {\n    var positionNDC = this._positionNDC;\n    var geometry = this.geometry;\n\n    if (!positionNDC || positionNDC.length / 2 !== geometry.vertexCount) {\n      positionNDC = this._positionNDC = new Float32Array(geometry.vertexCount * 2);\n    }\n\n    var pos = vec4.create();\n\n    for (var i = 0; i < geometry.vertexCount; i++) {\n      geometry.attributes.position.get(i, pos);\n      pos[3] = 1;\n      vec4.transformMat4(pos, pos, worldViewProjection.array);\n      vec4.scale(pos, pos, 1 / pos[3]);\n      positionNDC[i * 2] = pos[0];\n      positionNDC[i * 2 + 1] = pos[1];\n    }\n  }\n});\nexport default PointsMesh;", "import * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport spriteUtil from '../../util/sprite';\nimport PointsMesh from './PointsMesh';\nimport LabelsBuilder from '../../component/common/LabelsBuilder';\nimport Matrix4 from 'claygl/src/math/Matrix4';\nimport retrieve from '../../util/retrieve';\nimport { getItemVisualColor, getItemVisualOpacity } from '../../util/visual';\nimport { getVisualColor, getVisualOpacity } from '../../util/visual';\nvar SDF_RANGE = 20;\nvar Z_2D = -10;\n\nfunction isSymbolSizeSame(a, b) {\n  return a && b && a[0] === b[0] && a[1] === b[1];\n} // TODO gl_PointSize has max value.\n\n\nfunction PointsBuilder(is2D, api) {\n  this.rootNode = new graphicGL.Node();\n  /**\n   * @type {boolean}\n   */\n\n  this.is2D = is2D;\n  this._labelsBuilder = new LabelsBuilder(256, 256, api); // Give a large render order.\n\n  this._labelsBuilder.getMesh().renderOrder = 100;\n  this.rootNode.add(this._labelsBuilder.getMesh());\n  this._api = api;\n  this._spriteImageCanvas = document.createElement('canvas');\n  this._startDataIndex = 0;\n  this._endDataIndex = 0;\n  this._sizeScale = 1;\n}\n\nPointsBuilder.prototype = {\n  constructor: PointsBuilder,\n\n  /**\n   * If highlight on over\n   */\n  highlightOnMouseover: true,\n  update: function (seriesModel, ecModel, api, start, end) {\n    // Swap barMesh\n    var tmp = this._prevMesh;\n    this._prevMesh = this._mesh;\n    this._mesh = tmp;\n    var data = seriesModel.getData();\n\n    if (start == null) {\n      start = 0;\n    }\n\n    if (end == null) {\n      end = data.count();\n    }\n\n    this._startDataIndex = start;\n    this._endDataIndex = end - 1;\n\n    if (!this._mesh) {\n      var material = this._prevMesh && this._prevMesh.material;\n      this._mesh = new PointsMesh({\n        // Render after axes\n        renderOrder: 10,\n        // FIXME\n        frustumCulling: false\n      });\n\n      if (material) {\n        this._mesh.material = material;\n      }\n    }\n\n    var material = this._mesh.material;\n    var geometry = this._mesh.geometry;\n    var attributes = geometry.attributes;\n    this.rootNode.remove(this._prevMesh);\n    this.rootNode.add(this._mesh);\n\n    this._setPositionTextureToMesh(this._mesh, this._positionTexture);\n\n    var symbolInfo = this._getSymbolInfo(seriesModel, start, end);\n\n    var dpr = api.getDevicePixelRatio(); // TODO image symbol\n\n    var itemStyle = seriesModel.getModel('itemStyle').getItemStyle();\n    var largeMode = seriesModel.get('large');\n    var pointSizeScale = 1;\n\n    if (symbolInfo.maxSize > 2) {\n      pointSizeScale = this._updateSymbolSprite(seriesModel, itemStyle, symbolInfo, dpr);\n      material.enableTexture('sprite');\n    } else {\n      material.disableTexture('sprite');\n    }\n\n    attributes.position.init(end - start);\n    var rgbaArr = [];\n\n    if (largeMode) {\n      material.undefine('VERTEX_SIZE');\n      material.undefine('VERTEX_COLOR');\n      var color = getVisualColor(data);\n      var opacity = getVisualOpacity(data);\n      graphicGL.parseColor(color, rgbaArr);\n      rgbaArr[3] *= opacity;\n      material.set({\n        color: rgbaArr,\n        'u_Size': symbolInfo.maxSize * this._sizeScale\n      });\n    } else {\n      material.set({\n        color: [1, 1, 1, 1]\n      });\n      material.define('VERTEX_SIZE');\n      material.define('VERTEX_COLOR');\n      attributes.size.init(end - start);\n      attributes.color.init(end - start);\n      this._originalOpacity = new Float32Array(end - start);\n    }\n\n    var points = data.getLayout('points');\n    var positionArr = attributes.position.value;\n    var hasTransparentPoint = false;\n\n    for (var i = 0; i < end - start; i++) {\n      var i3 = i * 3;\n      var i2 = i * 2;\n\n      if (this.is2D) {\n        positionArr[i3] = points[i2];\n        positionArr[i3 + 1] = points[i2 + 1];\n        positionArr[i3 + 2] = Z_2D;\n      } else {\n        positionArr[i3] = points[i3];\n        positionArr[i3 + 1] = points[i3 + 1];\n        positionArr[i3 + 2] = points[i3 + 2];\n      }\n\n      if (!largeMode) {\n        var color = getItemVisualColor(data, i);\n        var opacity = getItemVisualOpacity(data, i);\n        graphicGL.parseColor(color, rgbaArr);\n        rgbaArr[3] *= opacity;\n        attributes.color.set(i, rgbaArr);\n\n        if (rgbaArr[3] < 0.99) {\n          hasTransparentPoint = true;\n        }\n\n        var symbolSize = data.getItemVisual(i, 'symbolSize');\n        symbolSize = symbolSize instanceof Array ? Math.max(symbolSize[0], symbolSize[1]) : symbolSize; // NaN pointSize may have strange result.\n\n        if (isNaN(symbolSize)) {\n          symbolSize = 0;\n        } // Scale point size because canvas has margin.\n\n\n        attributes.size.value[i] = symbolSize * pointSizeScale * this._sizeScale; // Save the original opacity for recover from fadeIn.\n\n        this._originalOpacity[i] = rgbaArr[3];\n      }\n    }\n\n    this._mesh.sizeScale = pointSizeScale;\n    geometry.updateBoundingBox();\n    geometry.dirty(); // Update material.\n\n    this._updateMaterial(seriesModel, itemStyle);\n\n    var coordSys = seriesModel.coordinateSystem;\n\n    if (coordSys && coordSys.viewGL) {\n      var methodName = coordSys.viewGL.isLinearSpace() ? 'define' : 'undefine';\n      material[methodName]('fragment', 'SRGB_DECODE');\n    }\n\n    if (!largeMode) {\n      this._updateLabelBuilder(seriesModel, start, end);\n    }\n\n    this._updateHandler(seriesModel, ecModel, api);\n\n    this._updateAnimation(seriesModel);\n\n    this._api = api;\n  },\n  getPointsMesh: function () {\n    return this._mesh;\n  },\n  updateLabels: function (highlightDataIndices) {\n    this._labelsBuilder.updateLabels(highlightDataIndices);\n  },\n  hideLabels: function () {\n    this.rootNode.remove(this._labelsBuilder.getMesh());\n  },\n  showLabels: function () {\n    this.rootNode.add(this._labelsBuilder.getMesh());\n  },\n  dispose: function () {\n    this._labelsBuilder.dispose();\n  },\n  _updateSymbolSprite: function (seriesModel, itemStyle, symbolInfo, dpr) {\n    symbolInfo.maxSize = Math.min(symbolInfo.maxSize * 2, 200);\n    var symbolSize = [];\n\n    if (symbolInfo.aspect > 1) {\n      symbolSize[0] = symbolInfo.maxSize;\n      symbolSize[1] = symbolInfo.maxSize / symbolInfo.aspect;\n    } else {\n      symbolSize[1] = symbolInfo.maxSize;\n      symbolSize[0] = symbolInfo.maxSize * symbolInfo.aspect;\n    } // In case invalid data.\n\n\n    symbolSize[0] = symbolSize[0] || 1;\n    symbolSize[1] = symbolSize[1] || 1;\n\n    if (this._symbolType !== symbolInfo.type || !isSymbolSizeSame(this._symbolSize, symbolSize) || this._lineWidth !== itemStyle.lineWidth) {\n      spriteUtil.createSymbolSprite(symbolInfo.type, symbolSize, {\n        fill: '#fff',\n        lineWidth: itemStyle.lineWidth,\n        stroke: 'transparent',\n        shadowColor: 'transparent',\n        minMargin: Math.min(symbolSize[0] / 2, 10)\n      }, this._spriteImageCanvas);\n      spriteUtil.createSDFFromCanvas(this._spriteImageCanvas, Math.min(this._spriteImageCanvas.width, 32), SDF_RANGE, this._mesh.material.get('sprite').image);\n      this._symbolType = symbolInfo.type;\n      this._symbolSize = symbolSize;\n      this._lineWidth = itemStyle.lineWidth;\n    }\n\n    return this._spriteImageCanvas.width / symbolInfo.maxSize * dpr;\n  },\n  _updateMaterial: function (seriesModel, itemStyle) {\n    var blendFunc = seriesModel.get('blendMode') === 'lighter' ? graphicGL.additiveBlend : null;\n    var material = this._mesh.material;\n    material.blend = blendFunc;\n    material.set('lineWidth', itemStyle.lineWidth / SDF_RANGE);\n    var strokeColor = graphicGL.parseColor(itemStyle.stroke);\n    material.set('strokeColor', strokeColor); // Because of symbol texture, we always needs it be transparent.\n\n    material.transparent = true;\n    material.depthMask = false;\n    material.depthTest = !this.is2D;\n    material.sortVertices = !this.is2D;\n  },\n  _updateLabelBuilder: function (seriesModel, start, end) {\n    var data = seriesModel.getData();\n    var geometry = this._mesh.geometry;\n    var positionArr = geometry.attributes.position.value;\n    var start = this._startDataIndex;\n    var pointSizeScale = this._mesh.sizeScale;\n\n    this._labelsBuilder.updateData(data, start, end);\n\n    this._labelsBuilder.getLabelPosition = function (dataIndex, positionDesc, distance) {\n      var idx3 = (dataIndex - start) * 3;\n      return [positionArr[idx3], positionArr[idx3 + 1], positionArr[idx3 + 2]];\n    };\n\n    this._labelsBuilder.getLabelDistance = function (dataIndex, positionDesc, distance) {\n      var size = geometry.attributes.size.get(dataIndex - start) / pointSizeScale;\n      return size / 2 + distance;\n    };\n\n    this._labelsBuilder.updateLabels();\n  },\n  _updateAnimation: function (seriesModel) {\n    graphicGL.updateVertexAnimation([['prevPosition', 'position'], ['prevSize', 'size']], this._prevMesh, this._mesh, seriesModel);\n  },\n  _updateHandler: function (seriesModel, ecModel, api) {\n    var data = seriesModel.getData();\n    var pointsMesh = this._mesh;\n    var self = this;\n    var lastDataIndex = -1;\n    var isCartesian3D = seriesModel.coordinateSystem && seriesModel.coordinateSystem.type === 'cartesian3D';\n    var grid3DModel;\n\n    if (isCartesian3D) {\n      grid3DModel = seriesModel.coordinateSystem.model;\n    }\n\n    pointsMesh.seriesIndex = seriesModel.seriesIndex;\n    pointsMesh.off('mousemove');\n    pointsMesh.off('mouseout');\n    pointsMesh.on('mousemove', function (e) {\n      var dataIndex = e.vertexIndex + self._startDataIndex;\n\n      if (dataIndex !== lastDataIndex) {\n        if (this.highlightOnMouseover) {\n          this.downplay(data, lastDataIndex);\n          this.highlight(data, dataIndex);\n\n          this._labelsBuilder.updateLabels([dataIndex]);\n        }\n\n        if (isCartesian3D) {\n          api.dispatchAction({\n            type: 'grid3DShowAxisPointer',\n            value: [data.get(seriesModel.coordDimToDataDim('x')[0], dataIndex), data.get(seriesModel.coordDimToDataDim('y')[0], dataIndex), data.get(seriesModel.coordDimToDataDim('z')[0], dataIndex)],\n            grid3DIndex: grid3DModel.componentIndex\n          });\n        }\n      }\n\n      pointsMesh.dataIndex = dataIndex;\n      lastDataIndex = dataIndex;\n    }, this);\n    pointsMesh.on('mouseout', function (e) {\n      var dataIndex = e.vertexIndex + self._startDataIndex;\n\n      if (this.highlightOnMouseover) {\n        this.downplay(data, dataIndex);\n\n        this._labelsBuilder.updateLabels();\n      }\n\n      lastDataIndex = -1;\n      pointsMesh.dataIndex = -1;\n\n      if (isCartesian3D) {\n        api.dispatchAction({\n          type: 'grid3DHideAxisPointer',\n          grid3DIndex: grid3DModel.componentIndex\n        });\n      }\n    }, this);\n  },\n  updateLayout: function (seriesModel, ecModel, api) {\n    var data = seriesModel.getData();\n\n    if (!this._mesh) {\n      return;\n    }\n\n    var positionArr = this._mesh.geometry.attributes.position.value;\n    var points = data.getLayout('points');\n\n    if (this.is2D) {\n      for (var i = 0; i < points.length / 2; i++) {\n        var i3 = i * 3;\n        var i2 = i * 2;\n        positionArr[i3] = points[i2];\n        positionArr[i3 + 1] = points[i2 + 1];\n        positionArr[i3 + 2] = Z_2D;\n      }\n    } else {\n      for (var i = 0; i < points.length; i++) {\n        positionArr[i] = points[i];\n      }\n    }\n\n    this._mesh.geometry.dirty();\n\n    api.getZr().refresh();\n  },\n  updateView: function (camera) {\n    if (!this._mesh) {\n      return;\n    }\n\n    var worldViewProjection = new Matrix4();\n    Matrix4.mul(worldViewProjection, camera.viewMatrix, this._mesh.worldTransform);\n    Matrix4.mul(worldViewProjection, camera.projectionMatrix, worldViewProjection);\n\n    this._mesh.updateNDCPosition(worldViewProjection, this.is2D, this._api);\n  },\n  highlight: function (data, dataIndex) {\n    if (dataIndex > this._endDataIndex || dataIndex < this._startDataIndex) {\n      return;\n    }\n\n    var itemModel = data.getItemModel(dataIndex);\n    var emphasisItemStyleModel = itemModel.getModel('emphasis.itemStyle');\n    var emphasisColor = emphasisItemStyleModel.get('color');\n    var emphasisOpacity = emphasisItemStyleModel.get('opacity');\n\n    if (emphasisColor == null) {\n      var color = getItemVisualColor(data, dataIndex);\n      emphasisColor = echarts.color.lift(color, -0.4);\n    }\n\n    if (emphasisOpacity == null) {\n      emphasisOpacity = getItemVisualOpacity(data, dataIndex);\n    }\n\n    var colorArr = graphicGL.parseColor(emphasisColor);\n    colorArr[3] *= emphasisOpacity;\n\n    this._mesh.geometry.attributes.color.set(dataIndex - this._startDataIndex, colorArr);\n\n    this._mesh.geometry.dirtyAttribute('color');\n\n    this._api.getZr().refresh();\n  },\n  downplay: function (data, dataIndex) {\n    if (dataIndex > this._endDataIndex || dataIndex < this._startDataIndex) {\n      return;\n    }\n\n    var color = getItemVisualColor(data, dataIndex);\n    var opacity = getItemVisualOpacity(data, dataIndex);\n    var colorArr = graphicGL.parseColor(color);\n    colorArr[3] *= opacity;\n\n    this._mesh.geometry.attributes.color.set(dataIndex - this._startDataIndex, colorArr);\n\n    this._mesh.geometry.dirtyAttribute('color');\n\n    this._api.getZr().refresh();\n  },\n  fadeOutAll: function (fadeOutPercent) {\n    if (this._originalOpacity) {\n      var geo = this._mesh.geometry;\n\n      for (var i = 0; i < geo.vertexCount; i++) {\n        var fadeOutOpacity = this._originalOpacity[i] * fadeOutPercent;\n        geo.attributes.color.value[i * 4 + 3] = fadeOutOpacity;\n      }\n\n      geo.dirtyAttribute('color');\n\n      this._api.getZr().refresh();\n    }\n  },\n  fadeInAll: function () {\n    this.fadeOutAll(1);\n  },\n  setPositionTexture: function (texture) {\n    if (this._mesh) {\n      this._setPositionTextureToMesh(this._mesh, texture);\n    }\n\n    this._positionTexture = texture;\n  },\n  removePositionTexture: function () {\n    this._positionTexture = null;\n\n    if (this._mesh) {\n      this._setPositionTextureToMesh(this._mesh, null);\n    }\n  },\n  setSizeScale: function (sizeScale) {\n    if (sizeScale !== this._sizeScale) {\n      if (this._mesh) {\n        var originalSize = this._mesh.material.get('u_Size');\n\n        this._mesh.material.set('u_Size', originalSize / this._sizeScale * sizeScale);\n\n        var attributes = this._mesh.geometry.attributes;\n\n        if (attributes.size.value) {\n          for (var i = 0; i < attributes.size.value.length; i++) {\n            attributes.size.value[i] = attributes.size.value[i] / this._sizeScale * sizeScale;\n          }\n        }\n      }\n\n      this._sizeScale = sizeScale;\n    }\n  },\n  _setPositionTextureToMesh: function (mesh, texture) {\n    if (texture) {\n      mesh.material.set('positionTexture', texture);\n    }\n\n    mesh.material[texture ? 'enableTexture' : 'disableTexture']('positionTexture');\n  },\n  _getSymbolInfo: function (seriesModel, start, end) {\n    if (seriesModel.get('large')) {\n      var symbolSize = retrieve.firstNotNull(seriesModel.get('symbolSize'), 1);\n      var maxSymbolSize;\n      var symbolAspect;\n\n      if (symbolSize instanceof Array) {\n        maxSymbolSize = Math.max(symbolSize[0], symbolSize[1]);\n        symbolAspect = symbolSize[0] / symbolSize[1];\n      } else {\n        maxSymbolSize = symbolSize;\n        symbolAspect = 1;\n      }\n\n      return {\n        maxSize: symbolSize,\n        type: seriesModel.get('symbol'),\n        aspect: symbolAspect\n      };\n    }\n\n    var data = seriesModel.getData();\n    var symbolAspect;\n    var differentSymbolAspect = false;\n    var symbolType = data.getItemVisual(0, 'symbol') || 'circle';\n    var differentSymbolType = false;\n    var maxSymbolSize = 0;\n\n    for (var idx = start; idx < end; idx++) {\n      var symbolSize = data.getItemVisual(idx, 'symbolSize');\n      var currentSymbolType = data.getItemVisual(idx, 'symbol');\n      var currentSymbolAspect;\n\n      if (!(symbolSize instanceof Array)) {\n        // Ignore NaN value.\n        if (isNaN(symbolSize)) {\n          continue;\n        }\n\n        currentSymbolAspect = 1;\n        maxSymbolSize = Math.max(symbolSize, maxSymbolSize);\n      } else {\n        currentSymbolAspect = symbolSize[0] / symbolSize[1];\n        maxSymbolSize = Math.max(Math.max(symbolSize[0], symbolSize[1]), maxSymbolSize);\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (symbolAspect != null && Math.abs(currentSymbolAspect - symbolAspect) > 0.05) {\n          differentSymbolAspect = true;\n        }\n\n        if (currentSymbolType !== symbolType) {\n          differentSymbolType = true;\n        }\n      }\n\n      symbolType = currentSymbolType;\n      symbolAspect = currentSymbolAspect;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (differentSymbolAspect) {\n        console.warn('Different symbol width / height ratio will be ignored.');\n      }\n\n      if (differentSymbolType) {\n        console.warn('Different symbol type will be ignored.');\n      }\n    }\n\n    return {\n      maxSize: maxSymbolSize,\n      type: symbolType,\n      aspect: symbolAspect\n    };\n  }\n};\nexport default PointsBuilder;", "import * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport retrieve from '../../util/retrieve';\nimport format from '../../util/format';\nimport PointsBuilder from '../common/PointsBuilder';\nexport default echarts.ChartView.extend({\n  type: 'scatter3D',\n  hasSymbolVisual: true,\n  __ecgl__: true,\n  init: function (ecModel, api) {\n    this.groupGL = new graphicGL.Node();\n    this._pointsBuilderList = [];\n    this._currentStep = 0;\n  },\n  render: function (seriesModel, ecModel, api) {\n    this.groupGL.removeAll();\n\n    if (!seriesModel.getData().count()) {\n      return;\n    }\n\n    var coordSys = seriesModel.coordinateSystem;\n\n    if (coordSys && coordSys.viewGL) {\n      coordSys.viewGL.add(this.groupGL);\n      this._camera = coordSys.viewGL.camera;\n      var pointsBuilder = this._pointsBuilderList[0];\n\n      if (!pointsBuilder) {\n        pointsBuilder = this._pointsBuilderList[0] = new PointsBuilder(false, api);\n      }\n\n      this._pointsBuilderList.length = 1;\n      this.groupGL.add(pointsBuilder.rootNode);\n      pointsBuilder.update(seriesModel, ecModel, api);\n      pointsBuilder.updateView(coordSys.viewGL.camera);\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error('Invalid coordinate system');\n      }\n    }\n  },\n  incrementalPrepareRender: function (seriesModel, ecModel, api) {\n    var coordSys = seriesModel.coordinateSystem;\n\n    if (coordSys && coordSys.viewGL) {\n      coordSys.viewGL.add(this.groupGL);\n      this._camera = coordSys.viewGL.camera;\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error('Invalid coordinate system');\n      }\n    }\n\n    this.groupGL.removeAll();\n    this._currentStep = 0;\n  },\n  incrementalRender: function (params, seriesModel, ecModel, api) {\n    // TODO Sort transparency.\n    if (params.end <= params.start) {\n      return;\n    }\n\n    var pointsBuilder = this._pointsBuilderList[this._currentStep];\n\n    if (!pointsBuilder) {\n      pointsBuilder = new PointsBuilder(false, api);\n      this._pointsBuilderList[this._currentStep] = pointsBuilder;\n    }\n\n    this.groupGL.add(pointsBuilder.rootNode);\n    pointsBuilder.update(seriesModel, ecModel, api, params.start, params.end);\n    pointsBuilder.updateView(seriesModel.coordinateSystem.viewGL.camera);\n    this._currentStep++;\n  },\n  updateCamera: function () {\n    this._pointsBuilderList.forEach(function (pointsBuilder) {\n      pointsBuilder.updateView(this._camera);\n    }, this);\n  },\n  highlight: function (seriesModel, ecModel, api, payload) {\n    this._toggleStatus('highlight', seriesModel, ecModel, api, payload);\n  },\n  downplay: function (seriesModel, ecModel, api, payload) {\n    this._toggleStatus('downplay', seriesModel, ecModel, api, payload);\n  },\n  _toggleStatus: function (status, seriesModel, ecModel, api, payload) {\n    var data = seriesModel.getData();\n    var dataIndex = retrieve.queryDataIndex(data, payload);\n    var isHighlight = status === 'highlight';\n\n    if (dataIndex != null) {\n      echarts.util.each(format.normalizeToArray(dataIndex), function (dataIdx) {\n        for (var i = 0; i < this._pointsBuilderList.length; i++) {\n          var pointsBuilder = this._pointsBuilderList[i];\n          isHighlight ? pointsBuilder.highlight(data, dataIdx) : pointsBuilder.downplay(data, dataIdx);\n        }\n      }, this);\n    } else {\n      // PENDING, OPTIMIZE\n      data.each(function (dataIdx) {\n        for (var i = 0; i < this._pointsBuilderList.length; i++) {\n          var pointsBuilder = this._pointsBuilderList[i];\n          isHighlight ? pointsBuilder.highlight(data, dataIdx) : pointsBuilder.downplay(data, dataIdx);\n        }\n      });\n    }\n  },\n  dispose: function () {\n    this._pointsBuilderList.forEach(function (pointsBuilder) {\n      pointsBuilder.dispose();\n    });\n\n    this.groupGL.removeAll();\n  },\n  remove: function () {\n    this.groupGL.removeAll();\n  }\n});", "// TODO ECharts GL must be imported whatever component,charts is imported.\nimport '../../echarts-gl';\nimport Scatter3DSeries from './Scatter3DSeries';\nimport Scatter3DView from './Scatter3DView';\nexport function install(registers) {\n  registers.registerChartView(Scatter3DView);\n  registers.registerSeriesModel(Scatter3DSeries);\n  registers.registerLayout({\n    seriesType: 'scatter3D',\n    reset: function (seriesModel) {\n      var coordSys = seriesModel.coordinateSystem;\n\n      if (coordSys) {\n        var coordDims = coordSys.dimensions;\n\n        if (coordDims.length < 3) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.error('scatter3D needs 3D coordinateSystem');\n          }\n\n          return;\n        }\n\n        var dims = coordDims.map(function (coordDim) {\n          return seriesModel.coordDimToDataDim(coordDim)[0];\n        });\n        var item = [];\n        var out = [];\n        return {\n          progress: function (params, data) {\n            var points = new Float32Array((params.end - params.start) * 3);\n\n            for (var idx = params.start; idx < params.end; idx++) {\n              var idx3 = (idx - params.start) * 3;\n              item[0] = data.get(dims[0], idx);\n              item[1] = data.get(dims[1], idx);\n              item[2] = data.get(dims[2], idx);\n              coordSys.dataToPoint(item, out);\n              points[idx3] = out[0];\n              points[idx3 + 1] = out[1];\n              points[idx3 + 2] = out[2];\n            }\n\n            data.setLayout('points', points);\n          }\n        };\n      }\n    }\n  });\n}", "import * as echarts from 'echarts/lib/echarts';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nvar vec3 = glmatrix.vec3;\nvar vec2 = glmatrix.vec2;\nvar normalize = vec3.normalize;\nvar cross = vec3.cross;\nvar sub = vec3.sub;\nvar add = vec3.add;\nvar create = vec3.create;\nvar normal = create();\nvar tangent = create();\nvar bitangent = create();\nvar halfVector = create();\nvar coord0 = [];\nvar coord1 = [];\n\nfunction getCubicPointsOnGlobe(coords, coordSys) {\n  vec2.copy(coord0, coords[0]);\n  vec2.copy(coord1, coords[1]);\n  var pts = [];\n  var p0 = pts[0] = create();\n  var p1 = pts[1] = create();\n  var p2 = pts[2] = create();\n  var p3 = pts[3] = create();\n  coordSys.dataToPoint(coord0, p0);\n  coordSys.dataToPoint(coord1, p3); // Get p1\n\n  normalize(normal, p0); // TODO p0-p3 is parallel with normal\n\n  sub(tangent, p3, p0);\n  normalize(tangent, tangent);\n  cross(bitangent, tangent, normal);\n  normalize(bitangent, bitangent);\n  cross(tangent, normal, bitangent); // p1 is half vector of p0 and tangent on p0\n\n  add(p1, normal, tangent);\n  normalize(p1, p1); // Get p2\n\n  normalize(normal, p3);\n  sub(tangent, p0, p3);\n  normalize(tangent, tangent);\n  cross(bitangent, tangent, normal);\n  normalize(bitangent, bitangent);\n  cross(tangent, normal, bitangent); // p2 is half vector of p3 and tangent on p3\n\n  add(p2, normal, tangent);\n  normalize(p2, p2); // Project distance of p0 on halfVector\n\n  add(halfVector, p0, p3);\n  normalize(halfVector, halfVector);\n  var projDist = vec3.dot(p0, halfVector); // Angle of halfVector and p1\n\n  var cosTheta = vec3.dot(halfVector, p1);\n  var len = (Math.max(vec3.len(p0), vec3.len(p3)) - projDist) / cosTheta * 2;\n  vec3.scaleAndAdd(p1, p0, p1, len);\n  vec3.scaleAndAdd(p2, p3, p2, len);\n  return pts;\n}\n\nfunction getCubicPointsOnPlane(coords, coordSys, up) {\n  var pts = [];\n  var p0 = pts[0] = vec3.create();\n  var p1 = pts[1] = vec3.create();\n  var p2 = pts[2] = vec3.create();\n  var p3 = pts[3] = vec3.create();\n  coordSys.dataToPoint(coords[0], p0);\n  coordSys.dataToPoint(coords[1], p3);\n  var len = vec3.dist(p0, p3);\n  vec3.lerp(p1, p0, p3, 0.3);\n  vec3.lerp(p2, p0, p3, 0.3);\n  vec3.scaleAndAdd(p1, p1, up, Math.min(len * 0.1, 10));\n  vec3.scaleAndAdd(p2, p2, up, Math.min(len * 0.1, 10));\n  return pts;\n}\n\nfunction getPolylinePoints(coords, coordSys) {\n  var pts = new Float32Array(coords.length * 3);\n  var off = 0;\n  var pt = [];\n\n  for (var i = 0; i < coords.length; i++) {\n    coordSys.dataToPoint(coords[i], pt);\n    pts[off++] = pt[0];\n    pts[off++] = pt[1];\n    pts[off++] = pt[2];\n  }\n\n  return pts;\n}\n\nfunction prepareCoords(data) {\n  var coordsList = [];\n  data.each(function (idx) {\n    var itemModel = data.getItemModel(idx);\n    var coords = itemModel.option instanceof Array ? itemModel.option : itemModel.getShallow('coords', true);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!(coords instanceof Array && coords.length > 0 && coords[0] instanceof Array)) {\n        throw new Error('Invalid coords ' + JSON.stringify(coords) + '. Lines must have 2d coords array in data item.');\n      }\n    }\n\n    coordsList.push(coords);\n  });\n  return {\n    coordsList: coordsList\n  };\n}\n\nfunction layoutGlobe(seriesModel, coordSys) {\n  var data = seriesModel.getData();\n  var isPolyline = seriesModel.get('polyline');\n  data.setLayout('lineType', isPolyline ? 'polyline' : 'cubicBezier');\n  var res = prepareCoords(data);\n  data.each(function (idx) {\n    var coords = res.coordsList[idx];\n    var getPointsMethod = isPolyline ? getPolylinePoints : getCubicPointsOnGlobe;\n    data.setItemLayout(idx, getPointsMethod(coords, coordSys));\n  });\n}\n\nfunction layoutOnPlane(seriesModel, coordSys, normal) {\n  var data = seriesModel.getData();\n  var isPolyline = seriesModel.get('polyline');\n  var res = prepareCoords(data);\n  data.setLayout('lineType', isPolyline ? 'polyline' : 'cubicBezier');\n  data.each(function (idx) {\n    var coords = res.coordsList[idx];\n    var pts = isPolyline ? getPolylinePoints(coords, coordSys) : getCubicPointsOnPlane(coords, coordSys, normal);\n    data.setItemLayout(idx, pts);\n  });\n}\n\nexport default function lines3DLayout(ecModel, api) {\n  ecModel.eachSeriesByType('lines3D', function (seriesModel) {\n    var coordSys = seriesModel.coordinateSystem;\n\n    if (coordSys.type === 'globe') {\n      layoutGlobe(seriesModel, coordSys);\n    } else if (coordSys.type === 'geo3D') {\n      layoutOnPlane(seriesModel, coordSys, [0, 1, 0]);\n    } else if (coordSys.type === 'mapbox3D' || coordSys.type === 'maptalks3D') {\n      layoutOnPlane(seriesModel, coordSys, [0, 0, 1]);\n    }\n  });\n}\n;", "import * as echarts from 'echarts/lib/echarts';\nexport default echarts.SeriesModel.extend({\n  type: 'series.lines3D',\n  dependencies: ['globe'],\n  visualStyleAccessPath: 'lineStyle',\n  visualDrawType: 'stroke',\n  getInitialData: function (option, ecModel) {\n    var lineData = new echarts.List(['value'], this);\n    lineData.hasItemOption = false;\n    lineData.initData(option.data, [], function (dataItem, dimName, dataIndex, dimIndex) {\n      // dataItem is simply coords\n      if (dataItem instanceof Array) {\n        return NaN;\n      } else {\n        lineData.hasItemOption = true;\n        var value = dataItem.value;\n\n        if (value != null) {\n          return value instanceof Array ? value[dimIndex] : value;\n        }\n      }\n    });\n    return lineData;\n  },\n  defaultOption: {\n    coordinateSystem: 'globe',\n    globeIndex: 0,\n    geo3DIndex: 0,\n    zlevel: -10,\n    polyline: false,\n    effect: {\n      show: false,\n      period: 4,\n      // Trail width\n      trailWidth: 4,\n      trailLength: 0.2,\n      spotIntensity: 6\n    },\n    silent: true,\n    // Support source-over, lighter\n    blendMode: 'source-over',\n    lineStyle: {\n      width: 1,\n      opacity: 0.5 // color\n\n    }\n  }\n});", "export default \"@export ecgl.trail2.vertex\\nattribute vec3 position: POSITION;\\nattribute vec3 positionPrev;\\nattribute vec3 positionNext;\\nattribute float offset;\\nattribute float dist;\\nattribute float distAll;\\nattribute float start;\\n\\nattribute vec4 a_Color : COLOR;\\n\\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\\nuniform vec4 viewport : VIEWPORT;\\nuniform float near : NEAR;\\n\\nuniform float speed : 0;\\nuniform float trailLength: 0.3;\\nuniform float time;\\nuniform float period: 1000;\\n\\nuniform float spotSize: 1;\\n\\nvarying vec4 v_Color;\\nvarying float v_Percent;\\nvarying float v_SpotPercent;\\n\\n@import ecgl.common.wireframe.vertexHeader\\n\\n@import ecgl.lines3D.clipNear\\n\\nvoid main()\\n{\\n @import ecgl.lines3D.expandLine\\n\\n gl_Position = currProj;\\n\\n v_Color = a_Color;\\n\\n @import ecgl.common.wireframe.vertexMain\\n\\n#ifdef CONSTANT_SPEED\\n float t = mod((speed * time + start) / distAll, 1. + trailLength) - trailLength;\\n#else\\n float t = mod((time + start) / period, 1. + trailLength) - trailLength;\\n#endif\\n\\n float trailLen = distAll * trailLength;\\n\\n v_Percent = (dist - t * distAll) / trailLen;\\n\\n v_SpotPercent = spotSize / distAll;\\n\\n }\\n@end\\n\\n\\n@export ecgl.trail2.fragment\\n\\nuniform vec4 color : [1.0, 1.0, 1.0, 1.0];\\nuniform float spotIntensity: 5;\\n\\nvarying vec4 v_Color;\\nvarying float v_Percent;\\nvarying float v_SpotPercent;\\n\\n@import ecgl.common.wireframe.fragmentHeader\\n\\n@import clay.util.srgb\\n\\nvoid main()\\n{\\n if (v_Percent > 1.0 || v_Percent < 0.0) {\\n discard;\\n }\\n\\n float fade = v_Percent;\\n\\n#ifdef SRGB_DECODE\\n gl_FragColor = sRGBToLinear(color * v_Color);\\n#else\\n gl_FragColor = color * v_Color;\\n#endif\\n\\n @import ecgl.common.wireframe.fragmentMain\\n\\n if (v_Percent > (1.0 - v_SpotPercent)) {\\n gl_FragColor.rgb *= spotIntensity;\\n }\\n\\n gl_FragColor.a *= fade;\\n}\\n\\n@end\";", "import * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nimport Lines3DGeometry from '../../util/geometry/Lines3D';\nimport trail2GLSL from './shader/trail2.glsl.js';\nimport { getItemVisualColor, getItemVisualOpacity } from '../../util/visual';\nvar vec3 = glmatrix.vec3;\n\nfunction sign(a) {\n  return a > 0 ? 1 : -1;\n}\n\ngraphicGL.Shader.import(trail2GLSL);\nexport default graphicGL.Mesh.extend(function () {\n  var material = new graphicGL.Material({\n    shader: new graphicGL.Shader(graphicGL.Shader.source('ecgl.trail2.vertex'), graphicGL.Shader.source('ecgl.trail2.fragment')),\n    transparent: true,\n    depthMask: false\n  });\n  var geometry = new Lines3DGeometry({\n    dynamic: true\n  });\n  geometry.createAttribute('dist', 'float', 1);\n  geometry.createAttribute('distAll', 'float', 1);\n  geometry.createAttribute('start', 'float', 1);\n  return {\n    geometry: geometry,\n    material: material,\n    culling: false,\n    $ignorePicking: true\n  };\n}, {\n  updateData: function (data, api, lines3DGeometry) {\n    var seriesModel = data.hostModel;\n    var geometry = this.geometry;\n    var effectModel = seriesModel.getModel('effect');\n    var size = effectModel.get('trailWidth') * api.getDevicePixelRatio();\n    var trailLength = effectModel.get('trailLength');\n    var speed = seriesModel.get('effect.constantSpeed');\n    var period = seriesModel.get('effect.period') * 1000;\n    var useConstantSpeed = speed != null;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!this.getScene()) {\n        console.error('TrailMesh must been add to scene before updateData');\n      }\n    }\n\n    useConstantSpeed ? this.material.set('speed', speed / 1000) : this.material.set('period', period);\n    this.material[useConstantSpeed ? 'define' : 'undefine']('vertex', 'CONSTANT_SPEED');\n    var isPolyline = seriesModel.get('polyline');\n    geometry.trailLength = trailLength;\n    this.material.set('trailLength', trailLength);\n    geometry.resetOffset();\n    ['position', 'positionPrev', 'positionNext'].forEach(function (attrName) {\n      geometry.attributes[attrName].value = lines3DGeometry.attributes[attrName].value;\n    });\n    var extraAttrs = ['dist', 'distAll', 'start', 'offset', 'color'];\n    extraAttrs.forEach(function (attrName) {\n      geometry.attributes[attrName].init(geometry.vertexCount);\n    });\n    geometry.indices = lines3DGeometry.indices;\n    var colorArr = [];\n    var effectColor = effectModel.get('trailColor');\n    var effectOpacity = effectModel.get('trailOpacity');\n    var hasEffectColor = effectColor != null;\n    var hasEffectOpacity = effectOpacity != null;\n    this.updateWorldTransform();\n    var xScale = this.worldTransform.x.len();\n    var yScale = this.worldTransform.y.len();\n    var zScale = this.worldTransform.z.len();\n    var vertexOffset = 0;\n    var maxDistance = 0;\n    data.each(function (idx) {\n      var pts = data.getItemLayout(idx);\n      var opacity = hasEffectOpacity ? effectOpacity : getItemVisualOpacity(data, idx);\n      var color = getItemVisualColor(data, idx);\n\n      if (opacity == null) {\n        opacity = 1;\n      }\n\n      colorArr = graphicGL.parseColor(hasEffectColor ? effectColor : color, colorArr);\n      colorArr[3] *= opacity;\n      var vertexCount = isPolyline ? lines3DGeometry.getPolylineVertexCount(pts) : lines3DGeometry.getCubicCurveVertexCount(pts[0], pts[1], pts[2], pts[3]);\n      var dist = 0;\n      var pos = [];\n      var posPrev = [];\n\n      for (var i = vertexOffset; i < vertexOffset + vertexCount; i++) {\n        geometry.attributes.position.get(i, pos);\n        pos[0] *= xScale;\n        pos[1] *= yScale;\n        pos[2] *= zScale;\n\n        if (i > vertexOffset) {\n          dist += vec3.dist(pos, posPrev);\n        }\n\n        geometry.attributes.dist.set(i, dist);\n        vec3.copy(posPrev, pos);\n      }\n\n      maxDistance = Math.max(maxDistance, dist);\n      var randomStart = Math.random() * (useConstantSpeed ? dist : period);\n\n      for (var i = vertexOffset; i < vertexOffset + vertexCount; i++) {\n        geometry.attributes.distAll.set(i, dist);\n        geometry.attributes.start.set(i, randomStart);\n        geometry.attributes.offset.set(i, sign(lines3DGeometry.attributes.offset.get(i)) * size / 2);\n        geometry.attributes.color.set(i, colorArr);\n      }\n\n      vertexOffset += vertexCount;\n    });\n    this.material.set('spotSize', maxDistance * 0.1 * trailLength);\n    this.material.set('spotIntensity', effectModel.get('spotIntensity'));\n    geometry.dirty();\n  },\n  setAnimationTime: function (time) {\n    this.material.set('time', time);\n  }\n});", "import * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport LinesGeometry from '../../util/geometry/Lines3D'; // import TrailMesh from './TrailMesh';\n\nimport TrailMesh2 from './TrailMesh2';\nimport { getItemVisualColor, getItemVisualOpacity } from '../../util/visual';\nimport lines3DGLSL from '../../util/shader/lines3D.glsl.js';\ngraphicGL.Shader.import(lines3DGLSL);\n\nfunction getCoordSysSize(coordSys) {\n  if (coordSys.radius != null) {\n    return coordSys.radius;\n  }\n\n  if (coordSys.size != null) {\n    return Math.max(coordSys.size[0], coordSys.size[1], coordSys.size[2]);\n  } else {\n    return 100;\n  }\n}\n\nexport default echarts.ChartView.extend({\n  type: 'lines3D',\n  __ecgl__: true,\n  init: function (ecModel, api) {\n    this.groupGL = new graphicGL.Node();\n    this._meshLinesMaterial = new graphicGL.Material({\n      shader: graphicGL.createShader('ecgl.meshLines3D'),\n      transparent: true,\n      depthMask: false\n    });\n    this._linesMesh = new graphicGL.Mesh({\n      geometry: new LinesGeometry(),\n      material: this._meshLinesMaterial,\n      $ignorePicking: true\n    }); // this._trailMesh = new TrailMesh();\n\n    this._trailMesh = new TrailMesh2();\n  },\n  render: function (seriesModel, ecModel, api) {\n    this.groupGL.add(this._linesMesh);\n    var coordSys = seriesModel.coordinateSystem;\n    var data = seriesModel.getData();\n\n    if (coordSys && coordSys.viewGL) {\n      var viewGL = coordSys.viewGL;\n      viewGL.add(this.groupGL);\n\n      this._updateLines(seriesModel, ecModel, api);\n\n      var methodName = coordSys.viewGL.isLinearSpace() ? 'define' : 'undefine';\n\n      this._linesMesh.material[methodName]('fragment', 'SRGB_DECODE');\n\n      this._trailMesh.material[methodName]('fragment', 'SRGB_DECODE');\n    }\n\n    var trailMesh = this._trailMesh;\n    trailMesh.stopAnimation();\n\n    if (seriesModel.get('effect.show')) {\n      this.groupGL.add(trailMesh);\n      trailMesh.updateData(data, api, this._linesMesh.geometry);\n      trailMesh.__time = trailMesh.__time || 0;\n      var time = 3600 * 1000; // 1hour\n\n      this._curveEffectsAnimator = trailMesh.animate('', {\n        loop: true\n      }).when(time, {\n        __time: time\n      }).during(function () {\n        trailMesh.setAnimationTime(trailMesh.__time);\n      }).start();\n    } else {\n      this.groupGL.remove(trailMesh);\n      this._curveEffectsAnimator = null;\n    }\n\n    this._linesMesh.material.blend = this._trailMesh.material.blend = seriesModel.get('blendMode') === 'lighter' ? graphicGL.additiveBlend : null;\n  },\n  pauseEffect: function () {\n    if (this._curveEffectsAnimator) {\n      this._curveEffectsAnimator.pause();\n    }\n  },\n  resumeEffect: function () {\n    if (this._curveEffectsAnimator) {\n      this._curveEffectsAnimator.resume();\n    }\n  },\n  toggleEffect: function () {\n    var animator = this._curveEffectsAnimator;\n\n    if (animator) {\n      animator.isPaused() ? animator.resume() : animator.pause();\n    }\n  },\n  _updateLines: function (seriesModel, ecModel, api) {\n    var data = seriesModel.getData();\n    var coordSys = seriesModel.coordinateSystem;\n    var geometry = this._linesMesh.geometry;\n    var isPolyline = seriesModel.get('polyline');\n    geometry.expandLine = true;\n    var size = getCoordSysSize(coordSys);\n    geometry.segmentScale = size / 20;\n    var lineWidthQueryPath = 'lineStyle.width'.split('.');\n    var dpr = api.getDevicePixelRatio();\n    var maxLineWidth = 0;\n    data.each(function (idx) {\n      var itemModel = data.getItemModel(idx);\n      var lineWidth = itemModel.get(lineWidthQueryPath);\n\n      if (lineWidth == null) {\n        lineWidth = 1;\n      }\n\n      data.setItemVisual(idx, 'lineWidth', lineWidth);\n      maxLineWidth = Math.max(lineWidth, maxLineWidth);\n    }); // Must set useNativeLine before calling any other methods\n\n    geometry.useNativeLine = false;\n    var nVertex = 0;\n    var nTriangle = 0;\n    data.each(function (idx) {\n      var pts = data.getItemLayout(idx);\n\n      if (isPolyline) {\n        nVertex += geometry.getPolylineVertexCount(pts);\n        nTriangle += geometry.getPolylineTriangleCount(pts);\n      } else {\n        nVertex += geometry.getCubicCurveVertexCount(pts[0], pts[1], pts[2], pts[3]);\n        nTriangle += geometry.getCubicCurveTriangleCount(pts[0], pts[1], pts[2], pts[3]);\n      }\n    });\n    geometry.setVertexCount(nVertex);\n    geometry.setTriangleCount(nTriangle);\n    geometry.resetOffset();\n    var colorArr = [];\n    data.each(function (idx) {\n      var pts = data.getItemLayout(idx);\n      var color = getItemVisualColor(data, idx);\n      var opacity = getItemVisualOpacity(data, idx);\n      var lineWidth = data.getItemVisual(idx, 'lineWidth') * dpr;\n\n      if (opacity == null) {\n        opacity = 1;\n      }\n\n      colorArr = graphicGL.parseColor(color, colorArr);\n      colorArr[3] *= opacity;\n\n      if (isPolyline) {\n        geometry.addPolyline(pts, colorArr, lineWidth);\n      } else {\n        geometry.addCubicCurve(pts[0], pts[1], pts[2], pts[3], colorArr, lineWidth);\n      }\n    });\n    geometry.dirty();\n  },\n  remove: function () {\n    this.groupGL.removeAll();\n  },\n  dispose: function () {\n    this.groupGL.removeAll();\n  }\n});", "// TODO ECharts GL must be imported whatever component,charts is imported.\nimport '../../echarts-gl';\nimport lines3DLayout from './lines3DLayout';\nimport Lines3DSeries from './Lines3DSeries';\nimport Lines3DView from './Lines3DView';\nexport function install(registers) {\n  registers.registerChartView(Lines3DView);\n  registers.registerSeriesModel(Lines3DSeries);\n  registers.registerLayout(lines3DLayout);\n  registers.registerAction({\n    type: 'lines3DPauseEffect',\n    event: 'lines3deffectpaused',\n    update: 'series.lines3D:pauseEffect'\n  }, function () {});\n  registers.registerAction({\n    type: 'lines3DResumeEffect',\n    event: 'lines3deffectresumed',\n    update: 'series.lines3D:resumeEffect'\n  }, function () {});\n  registers.registerAction({\n    type: 'lines3DToggleEffect',\n    event: 'lines3deffectchanged',\n    update: 'series.lines3D:toggleEffect'\n  }, function () {});\n}", "import * as echarts from 'echarts/lib/echarts';\nimport componentShadingMixin from '../../component/common/componentShadingMixin';\n\nfunction transformPolygon(coordSys, poly) {\n  var ret = [];\n\n  for (var i = 0; i < poly.length; i++) {\n    ret.push(coordSys.dataToPoint(poly[i]));\n  }\n\n  return ret;\n}\n\nvar Polygons3DSeries = echarts.SeriesModel.extend({\n  type: 'series.polygons3D',\n  getRegionModel: function (idx) {\n    return this.getData().getItemModel(idx);\n  },\n  getRegionPolygonCoords: function (idx) {\n    var coordSys = this.coordinateSystem;\n    var itemModel = this.getData().getItemModel(idx);\n    var coords = itemModel.option instanceof Array ? itemModel.option : itemModel.getShallow('coords');\n\n    if (!itemModel.get('multiPolygon')) {\n      coords = [coords];\n    } // TODO Validate\n\n\n    var out = [];\n\n    for (var i = 0; i < coords.length; i++) {\n      // TODO Convert here ?\n      var interiors = [];\n\n      for (var k = 1; k < coords[i].length; k++) {\n        interiors.push(transformPolygon(coordSys, coords[i][k]));\n      }\n\n      out.push({\n        exterior: transformPolygon(coordSys, coords[i][0]),\n        interiors: interiors\n      });\n    }\n\n    return out;\n  },\n  getInitialData: function (option) {\n    var polygonsData = new echarts.List(['value'], this);\n    polygonsData.hasItemOption = false;\n    polygonsData.initData(option.data, [], function (dataItem, dimName, dataIndex, dimIndex) {\n      // dataItem is simply coords\n      if (dataItem instanceof Array) {\n        return NaN;\n      } else {\n        polygonsData.hasItemOption = true;\n        var value = dataItem.value;\n\n        if (value != null) {\n          return value instanceof Array ? value[dimIndex] : value;\n        }\n      }\n    });\n    return polygonsData;\n  },\n  defaultOption: {\n    show: true,\n    data: null,\n    multiPolygon: false,\n    progressiveThreshold: 1e3,\n    progressive: 1e3,\n    zlevel: -10,\n    label: {\n      show: false,\n      // Distance in 3d space.\n      distance: 2,\n      textStyle: {\n        fontSize: 20,\n        color: '#000',\n        backgroundColor: 'rgba(255,255,255,0.7)',\n        padding: 3,\n        borderRadius: 4\n      }\n    },\n    itemStyle: {\n      color: '#fff',\n      borderWidth: 0,\n      borderColor: '#333'\n    },\n    emphasis: {\n      itemStyle: {\n        color: '#639fc0'\n      },\n      label: {\n        show: true\n      }\n    }\n  }\n});\necharts.util.merge(Polygons3DSeries.prototype, componentShadingMixin);\nexport default Polygons3DSeries;", "import * as echarts from 'echarts/lib/echarts';\nimport Geo3DBuilder from '../../component/common/Geo3DBuilder';\nimport graphicGL from '../../util/graphicGL';\nexport default echarts.ChartView.extend({\n  type: 'polygons3D',\n  __ecgl__: true,\n  init: function (ecModel, api) {\n    this.groupGL = new graphicGL.Node();\n    this._geo3DBuilderList = [];\n    this._currentStep = 0;\n  },\n  render: function (seriesModel, ecModel, api) {\n    this.groupGL.removeAll();\n    var coordSys = seriesModel.coordinateSystem;\n\n    if (coordSys && coordSys.viewGL) {\n      coordSys.viewGL.add(this.groupGL);\n    }\n\n    var geo3DBuilder = this._geo3DBuilderList[0];\n\n    if (!geo3DBuilder) {\n      geo3DBuilder = new Geo3DBuilder(api);\n      geo3DBuilder.extrudeY = coordSys.type !== 'mapbox3D' && coordSys.type !== 'maptalks3D';\n      this._geo3DBuilderList[0] = geo3DBuilder;\n    }\n\n    this._updateShaderDefines(coordSys, geo3DBuilder);\n\n    geo3DBuilder.update(seriesModel, ecModel, api);\n    this._geo3DBuilderList.length = 1;\n    this.groupGL.add(geo3DBuilder.rootNode);\n  },\n  incrementalPrepareRender: function (seriesModel, ecModel, api) {\n    this.groupGL.removeAll();\n    var coordSys = seriesModel.coordinateSystem;\n\n    if (coordSys && coordSys.viewGL) {\n      coordSys.viewGL.add(this.groupGL);\n    }\n\n    this._currentStep = 0;\n  },\n  incrementalRender: function (params, seriesModel, ecModel, api) {\n    var geo3DBuilder = this._geo3DBuilderList[this._currentStep];\n    var coordSys = seriesModel.coordinateSystem;\n\n    if (!geo3DBuilder) {\n      geo3DBuilder = new Geo3DBuilder(api);\n      geo3DBuilder.extrudeY = coordSys.type !== 'mapbox3D' && coordSys.type !== 'maptalks3D';\n      this._geo3DBuilderList[this._currentStep] = geo3DBuilder;\n    }\n\n    geo3DBuilder.update(seriesModel, ecModel, api, params.start, params.end);\n    this.groupGL.add(geo3DBuilder.rootNode);\n\n    this._updateShaderDefines(coordSys, geo3DBuilder);\n\n    this._currentStep++;\n  },\n  _updateShaderDefines: function (coordSys, geo3DBuilder) {\n    var methodName = coordSys.viewGL.isLinearSpace() ? 'define' : 'undefine';\n    geo3DBuilder.rootNode.traverse(function (mesh) {\n      if (mesh.material) {\n        mesh.material[methodName]('fragment', 'SRGB_DECODE'); // FIXME\n\n        if (coordSys.type === 'mapbox3D' || coordSys.type === 'maptalks3D') {\n          mesh.material.define('fragment', 'NORMAL_UP_AXIS', 2);\n          mesh.material.define('fragment', 'NORMAL_FRONT_AXIS', 1);\n        }\n      }\n    });\n  },\n  remove: function () {\n    this.groupGL.removeAll();\n  },\n  dispose: function () {\n    this.groupGL.removeAll();\n\n    this._geo3DBuilderList.forEach(function (geo3DBuilder) {\n      geo3DBuilder.dispose();\n    });\n  }\n});", "// TODO ECharts GL must be imported whatever component,charts is imported.\nimport '../../echarts-gl';\nimport Polygons3DSeries from './Polygons3DSeries';\nimport Polygons3DView from './Polygons3DView';\nexport function install(registers) {\n  registers.registerChartView(Polygons3DView);\n  registers.registerSeriesModel(Polygons3DSeries);\n}", "import * as echarts from 'echarts/lib/echarts';\nimport componentShadingMixin from '../../component/common/componentShadingMixin';\nimport formatTooltip from '../common/formatTooltip';\nimport createList from '../common/createList';\nvar SurfaceSeries = echarts.SeriesModel.extend({\n  type: 'series.surface',\n  dependencies: ['globe', 'grid3D', 'geo3D'],\n  visualStyleAccessPath: 'itemStyle',\n  formatTooltip: function (dataIndex) {\n    return formatTooltip(this, dataIndex);\n  },\n  getInitialData: function (option, ecModel) {\n    var data = option.data;\n\n    function validateDimension(dimOpts) {\n      return !(isNaN(dimOpts.min) || isNaN(dimOpts.max) || isNaN(dimOpts.step));\n    }\n\n    function getPrecision(dimOpts) {\n      var getPrecision = echarts.number.getPrecisionSafe;\n      return Math.max(getPrecision(dimOpts.min), getPrecision(dimOpts.max), getPrecision(dimOpts.step)) + 1;\n    }\n\n    if (!data) {\n      if (!option.parametric) {\n        // From surface equation\n        var equation = option.equation || {};\n        var xOpts = equation.x || {};\n        var yOpts = equation.y || {};\n        ['x', 'y'].forEach(function (dim) {\n          if (!validateDimension(equation[dim])) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.error('Invalid equation.%s', dim);\n            }\n\n            return;\n          }\n        });\n\n        if (typeof equation.z !== 'function') {\n          if (process.env.NODE_ENV !== 'production') {\n            console.error('equation.z needs to be function');\n          }\n\n          return;\n        }\n\n        var xCount = Math.floor((xOpts.max + xOpts.step - xOpts.min) / xOpts.step);\n        var yCount = Math.floor((yOpts.max + yOpts.step - yOpts.min) / yOpts.step);\n        data = new Float32Array(xCount * yCount * 3);\n        var xPrecision = getPrecision(xOpts);\n        var yPrecision = getPrecision(yOpts);\n        var off = 0;\n\n        for (var j = 0; j < yCount; j++) {\n          for (var i = 0; i < xCount; i++) {\n            var x = i * xOpts.step + xOpts.min;\n            var y = j * yOpts.step + yOpts.min;\n            var x2 = echarts.number.round(Math.min(x, xOpts.max), xPrecision);\n            var y2 = echarts.number.round(Math.min(y, yOpts.max), yPrecision);\n            var z = equation.z(x2, y2);\n            data[off++] = x2;\n            data[off++] = y2;\n            data[off++] = z;\n          }\n        }\n      } else {\n        var parametricEquation = option.parametricEquation || {};\n        var uOpts = parametricEquation.u || {};\n        var vOpts = parametricEquation.v || {};\n        ['u', 'v'].forEach(function (dim) {\n          if (!validateDimension(parametricEquation[dim])) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.error('Invalid parametricEquation.%s', dim);\n            }\n\n            return;\n          }\n        });\n        ['x', 'y', 'z'].forEach(function (dim) {\n          if (typeof parametricEquation[dim] !== 'function') {\n            if (process.env.NODE_ENV !== 'production') {\n              console.error('parametricEquation.%s needs to be function', dim);\n            }\n\n            return;\n          }\n        });\n        var uCount = Math.floor((uOpts.max + uOpts.step - uOpts.min) / uOpts.step);\n        var vCount = Math.floor((vOpts.max + vOpts.step - vOpts.min) / vOpts.step);\n        data = new Float32Array(uCount * vCount * 5);\n        var uPrecision = getPrecision(uOpts);\n        var vPrecision = getPrecision(vOpts);\n        var off = 0;\n\n        for (var j = 0; j < vCount; j++) {\n          for (var i = 0; i < uCount; i++) {\n            var u = i * uOpts.step + uOpts.min;\n            var v = j * vOpts.step + vOpts.min;\n            var u2 = echarts.number.round(Math.min(u, uOpts.max), uPrecision);\n            var v2 = echarts.number.round(Math.min(v, vOpts.max), vPrecision);\n            var x = parametricEquation.x(u2, v2);\n            var y = parametricEquation.y(u2, v2);\n            var z = parametricEquation.z(u2, v2);\n            data[off++] = x;\n            data[off++] = y;\n            data[off++] = z;\n            data[off++] = u2;\n            data[off++] = v2;\n          }\n        }\n      }\n    }\n\n    var dims = ['x', 'y', 'z'];\n\n    if (option.parametric) {\n      dims.push('u', 'v');\n    } // PENDING getSource?\n\n\n    var list = createList(this, dims, data);\n    return list;\n  },\n  defaultOption: {\n    coordinateSystem: 'cartesian3D',\n    zlevel: -10,\n    // Cartesian coordinate system\n    grid3DIndex: 0,\n    // Surface needs lambert shading to show the difference\n    shading: 'lambert',\n    // If parametric surface\n    parametric: false,\n    wireframe: {\n      show: true,\n      lineStyle: {\n        color: 'rgba(0,0,0,0.5)',\n        width: 1\n      }\n    },\n\n    /**\n     * Generate surface data from z = f(x, y) equation\n     */\n    equation: {\n      // [min, max, step]\n      x: {\n        min: -1,\n        max: 1,\n        step: 0.1\n      },\n      y: {\n        min: -1,\n        max: 1,\n        step: 0.1\n      },\n      z: null\n    },\n    parametricEquation: {\n      // [min, max, step]\n      u: {\n        min: -1,\n        max: 1,\n        step: 0.1\n      },\n      v: {\n        min: -1,\n        max: 1,\n        step: 0.1\n      },\n      // [x, y, z] = f(x, y)\n      x: null,\n      y: null,\n      z: null\n    },\n    // Shape of give data\n    // It is an array to specify rows and columns.\n    // For example [30, 30]\n    dataShape: null,\n    itemStyle: {// Color\n    },\n    animationDurationUpdate: 500\n  }\n});\necharts.util.merge(SurfaceSeries.prototype, componentShadingMixin);\nexport default SurfaceSeries;", "import * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nimport trianglesSortMixin from '../../util/geometry/trianglesSortMixin';\nimport { getItemVisualColor, getItemVisualOpacity } from '../../util/visual';\nvar vec3 = glmatrix.vec3;\n\nfunction isPointsNaN(pt) {\n  return isNaN(pt[0]) || isNaN(pt[1]) || isNaN(pt[2]);\n}\n\nexport default echarts.ChartView.extend({\n  type: 'surface',\n  __ecgl__: true,\n  init: function (ecModel, api) {\n    this.groupGL = new graphicGL.Node();\n  },\n  render: function (seriesModel, ecModel, api) {\n    // Swap surfaceMesh\n    var tmp = this._prevSurfaceMesh;\n    this._prevSurfaceMesh = this._surfaceMesh;\n    this._surfaceMesh = tmp;\n\n    if (!this._surfaceMesh) {\n      this._surfaceMesh = this._createSurfaceMesh();\n    }\n\n    this.groupGL.remove(this._prevSurfaceMesh);\n    this.groupGL.add(this._surfaceMesh);\n    var coordSys = seriesModel.coordinateSystem;\n    var shading = seriesModel.get('shading');\n    var data = seriesModel.getData();\n    var shadingPrefix = 'ecgl.' + shading;\n\n    if (!this._surfaceMesh.material || this._surfaceMesh.material.shader.name !== shadingPrefix) {\n      this._surfaceMesh.material = graphicGL.createMaterial(shadingPrefix, ['VERTEX_COLOR', 'DOUBLE_SIDED']);\n    }\n\n    graphicGL.setMaterialFromModel(shading, this._surfaceMesh.material, seriesModel, api);\n\n    if (coordSys && coordSys.viewGL) {\n      coordSys.viewGL.add(this.groupGL);\n      var methodName = coordSys.viewGL.isLinearSpace() ? 'define' : 'undefine';\n\n      this._surfaceMesh.material[methodName]('fragment', 'SRGB_DECODE');\n    }\n\n    var isParametric = seriesModel.get('parametric');\n    var dataShape = seriesModel.get('dataShape');\n\n    if (!dataShape) {\n      dataShape = this._getDataShape(data, isParametric);\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (seriesModel.get('data')) {\n          console.warn('dataShape is not provided. Guess it is ', dataShape);\n        }\n      }\n    }\n\n    var wireframeModel = seriesModel.getModel('wireframe');\n    var wireframeLineWidth = wireframeModel.get('lineStyle.width');\n    var showWireframe = wireframeModel.get('show') && wireframeLineWidth > 0;\n\n    this._updateSurfaceMesh(this._surfaceMesh, seriesModel, dataShape, showWireframe);\n\n    var material = this._surfaceMesh.material;\n\n    if (showWireframe) {\n      material.define('WIREFRAME_QUAD');\n      material.set('wireframeLineWidth', wireframeLineWidth);\n      material.set('wireframeLineColor', graphicGL.parseColor(wireframeModel.get('lineStyle.color')));\n    } else {\n      material.undefine('WIREFRAME_QUAD');\n    }\n\n    this._initHandler(seriesModel, api);\n\n    this._updateAnimation(seriesModel);\n  },\n  _updateAnimation: function (seriesModel) {\n    graphicGL.updateVertexAnimation([['prevPosition', 'position'], ['prevNormal', 'normal']], this._prevSurfaceMesh, this._surfaceMesh, seriesModel);\n  },\n  _createSurfaceMesh: function () {\n    var mesh = new graphicGL.Mesh({\n      geometry: new graphicGL.Geometry({\n        dynamic: true,\n        sortTriangles: true\n      }),\n      shadowDepthMaterial: new graphicGL.Material({\n        shader: new graphicGL.Shader(graphicGL.Shader.source('ecgl.sm.depth.vertex'), graphicGL.Shader.source('ecgl.sm.depth.fragment'))\n      }),\n      culling: false,\n      // Render after axes\n      renderOrder: 10,\n      // Render normal in normal pass\n      renderNormal: true\n    });\n    mesh.geometry.createAttribute('barycentric', 'float', 4);\n    mesh.geometry.createAttribute('prevPosition', 'float', 3);\n    mesh.geometry.createAttribute('prevNormal', 'float', 3);\n    Object.assign(mesh.geometry, trianglesSortMixin);\n    return mesh;\n  },\n  _initHandler: function (seriesModel, api) {\n    var data = seriesModel.getData();\n    var surfaceMesh = this._surfaceMesh;\n    var coordSys = seriesModel.coordinateSystem;\n\n    function getNearestPointIdx(triangle, point) {\n      var nearestDist = Infinity;\n      var nearestIdx = -1;\n      var pos = [];\n\n      for (var i = 0; i < triangle.length; i++) {\n        surfaceMesh.geometry.attributes.position.get(triangle[i], pos);\n        var dist = vec3.dist(point.array, pos);\n\n        if (dist < nearestDist) {\n          nearestDist = dist;\n          nearestIdx = triangle[i];\n        }\n      }\n\n      return nearestIdx;\n    }\n\n    surfaceMesh.seriesIndex = seriesModel.seriesIndex;\n    var lastDataIndex = -1;\n    surfaceMesh.off('mousemove');\n    surfaceMesh.off('mouseout');\n    surfaceMesh.on('mousemove', function (e) {\n      var idx = getNearestPointIdx(e.triangle, e.point);\n\n      if (idx >= 0) {\n        var point = [];\n        surfaceMesh.geometry.attributes.position.get(idx, point);\n        var value = coordSys.pointToData(point);\n        var minDist = Infinity;\n        var dataIndex = -1;\n        var item = [];\n\n        for (var i = 0; i < data.count(); i++) {\n          item[0] = data.get('x', i);\n          item[1] = data.get('y', i);\n          item[2] = data.get('z', i);\n          var dist = vec3.squaredDistance(item, value);\n\n          if (dist < minDist) {\n            dataIndex = i;\n            minDist = dist;\n          }\n        }\n\n        if (dataIndex !== lastDataIndex) {\n          api.dispatchAction({\n            type: 'grid3DShowAxisPointer',\n            value: value\n          });\n        }\n\n        lastDataIndex = dataIndex;\n        surfaceMesh.dataIndex = dataIndex;\n      } else {\n        surfaceMesh.dataIndex = -1;\n      }\n    }, this);\n    surfaceMesh.on('mouseout', function (e) {\n      lastDataIndex = -1;\n      surfaceMesh.dataIndex = -1;\n      api.dispatchAction({\n        type: 'grid3DHideAxisPointer'\n      });\n    }, this);\n  },\n  _updateSurfaceMesh: function (surfaceMesh, seriesModel, dataShape, showWireframe) {\n    var geometry = surfaceMesh.geometry;\n    var data = seriesModel.getData();\n    var pointsArr = data.getLayout('points');\n    var invalidDataCount = 0;\n    data.each(function (idx) {\n      if (!data.hasValue(idx)) {\n        invalidDataCount++;\n      }\n    });\n    var needsSplitQuad = invalidDataCount || showWireframe;\n    var positionAttr = geometry.attributes.position;\n    var normalAttr = geometry.attributes.normal;\n    var texcoordAttr = geometry.attributes.texcoord0;\n    var barycentricAttr = geometry.attributes.barycentric;\n    var colorAttr = geometry.attributes.color;\n    var row = dataShape[0];\n    var column = dataShape[1];\n    var shading = seriesModel.get('shading');\n    var needsNormal = shading !== 'color';\n\n    if (needsSplitQuad) {\n      // TODO, If needs remove the invalid points, or set color transparent.\n      var vertexCount = (row - 1) * (column - 1) * 4;\n      positionAttr.init(vertexCount);\n\n      if (showWireframe) {\n        barycentricAttr.init(vertexCount);\n      }\n    } else {\n      positionAttr.value = new Float32Array(pointsArr);\n    }\n\n    colorAttr.init(geometry.vertexCount);\n    texcoordAttr.init(geometry.vertexCount);\n    var quadToTriangle = [0, 3, 1, 1, 3, 2]; // 3----2\n    // 0----1\n    // Make sure pixels on 1---3 edge will not have channel 0.\n    // And pixels on four edges have at least one channel 0.\n\n    var quadBarycentric = [[1, 1, 0, 0], [0, 1, 0, 1], [1, 0, 0, 1], [1, 0, 1, 0]];\n    var indices = geometry.indices = new (geometry.vertexCount > 0xffff ? Uint32Array : Uint16Array)((row - 1) * (column - 1) * 6);\n\n    var getQuadIndices = function (i, j, out) {\n      out[1] = i * column + j;\n      out[0] = i * column + j + 1;\n      out[3] = (i + 1) * column + j + 1;\n      out[2] = (i + 1) * column + j;\n    };\n\n    var isTransparent = false;\n\n    if (needsSplitQuad) {\n      var quadIndices = [];\n      var pos = [];\n      var faceOffset = 0;\n\n      if (needsNormal) {\n        normalAttr.init(geometry.vertexCount);\n      } else {\n        normalAttr.value = null;\n      }\n\n      var pts = [[], [], []];\n      var v21 = [],\n          v32 = [];\n      var normal = vec3.create();\n\n      var getFromArray = function (arr, idx, out) {\n        var idx3 = idx * 3;\n        out[0] = arr[idx3];\n        out[1] = arr[idx3 + 1];\n        out[2] = arr[idx3 + 2];\n        return out;\n      };\n\n      var vertexNormals = new Float32Array(pointsArr.length);\n      var vertexColors = new Float32Array(pointsArr.length / 3 * 4);\n\n      for (var i = 0; i < data.count(); i++) {\n        if (data.hasValue(i)) {\n          var rgbaArr = graphicGL.parseColor(getItemVisualColor(data, i));\n          var opacity = getItemVisualOpacity(data, i);\n          opacity != null && (rgbaArr[3] *= opacity);\n\n          if (rgbaArr[3] < 0.99) {\n            isTransparent = true;\n          }\n\n          for (var k = 0; k < 4; k++) {\n            vertexColors[i * 4 + k] = rgbaArr[k];\n          }\n        }\n      }\n\n      var farPoints = [1e7, 1e7, 1e7];\n\n      for (var i = 0; i < row - 1; i++) {\n        for (var j = 0; j < column - 1; j++) {\n          var dataIndex = i * (column - 1) + j;\n          var vertexOffset = dataIndex * 4;\n          getQuadIndices(i, j, quadIndices);\n          var invisibleQuad = false;\n\n          for (var k = 0; k < 4; k++) {\n            getFromArray(pointsArr, quadIndices[k], pos);\n\n            if (isPointsNaN(pos)) {\n              // Quad is invisible if any point is NaN\n              invisibleQuad = true;\n            }\n          }\n\n          for (var k = 0; k < 4; k++) {\n            if (invisibleQuad) {\n              // Move point far away\n              positionAttr.set(vertexOffset + k, farPoints);\n            } else {\n              getFromArray(pointsArr, quadIndices[k], pos);\n              positionAttr.set(vertexOffset + k, pos);\n            }\n\n            if (showWireframe) {\n              barycentricAttr.set(vertexOffset + k, quadBarycentric[k]);\n            }\n          }\n\n          for (var k = 0; k < 6; k++) {\n            indices[faceOffset++] = quadToTriangle[k] + vertexOffset;\n          } // Vertex normals\n\n\n          if (needsNormal && !invisibleQuad) {\n            for (var k = 0; k < 2; k++) {\n              var k3 = k * 3;\n\n              for (var m = 0; m < 3; m++) {\n                var idx = quadIndices[quadToTriangle[k3] + m];\n                getFromArray(pointsArr, idx, pts[m]);\n              }\n\n              vec3.sub(v21, pts[0], pts[1]);\n              vec3.sub(v32, pts[1], pts[2]);\n              vec3.cross(normal, v21, v32); // Weighted by the triangle area\n\n              for (var m = 0; m < 3; m++) {\n                var idx3 = quadIndices[quadToTriangle[k3] + m] * 3;\n                vertexNormals[idx3] = vertexNormals[idx3] + normal[0];\n                vertexNormals[idx3 + 1] = vertexNormals[idx3 + 1] + normal[1];\n                vertexNormals[idx3 + 2] = vertexNormals[idx3 + 2] + normal[2];\n              }\n            }\n          }\n        }\n      }\n\n      if (needsNormal) {\n        for (var i = 0; i < vertexNormals.length / 3; i++) {\n          getFromArray(vertexNormals, i, normal);\n          vec3.normalize(normal, normal);\n          vertexNormals[i * 3] = normal[0];\n          vertexNormals[i * 3 + 1] = normal[1];\n          vertexNormals[i * 3 + 2] = normal[2];\n        }\n      } // Split normal and colors, write to the attributes.\n\n\n      var rgbaArr = [];\n      var uvArr = [];\n\n      for (var i = 0; i < row - 1; i++) {\n        for (var j = 0; j < column - 1; j++) {\n          var dataIndex = i * (column - 1) + j;\n          var vertexOffset = dataIndex * 4;\n          getQuadIndices(i, j, quadIndices);\n\n          for (var k = 0; k < 4; k++) {\n            for (var m = 0; m < 4; m++) {\n              rgbaArr[m] = vertexColors[quadIndices[k] * 4 + m];\n            }\n\n            colorAttr.set(vertexOffset + k, rgbaArr);\n\n            if (needsNormal) {\n              getFromArray(vertexNormals, quadIndices[k], normal);\n              normalAttr.set(vertexOffset + k, normal);\n            }\n\n            var idx = quadIndices[k];\n            uvArr[0] = idx % column / (column - 1);\n            uvArr[1] = Math.floor(idx / column) / (row - 1);\n            texcoordAttr.set(vertexOffset + k, uvArr);\n          }\n\n          dataIndex++;\n        }\n      }\n    } else {\n      var uvArr = [];\n\n      for (var i = 0; i < data.count(); i++) {\n        uvArr[0] = i % column / (column - 1);\n        uvArr[1] = Math.floor(i / column) / (row - 1);\n        var rgbaArr = graphicGL.parseColor(getItemVisualColor(data, i));\n        var opacity = getItemVisualOpacity(data, i);\n        opacity != null && (rgbaArr[3] *= opacity);\n\n        if (rgbaArr[3] < 0.99) {\n          isTransparent = true;\n        }\n\n        colorAttr.set(i, rgbaArr);\n        texcoordAttr.set(i, uvArr);\n      }\n\n      var quadIndices = []; // Triangles\n\n      var cursor = 0;\n\n      for (var i = 0; i < row - 1; i++) {\n        for (var j = 0; j < column - 1; j++) {\n          getQuadIndices(i, j, quadIndices);\n\n          for (var k = 0; k < 6; k++) {\n            indices[cursor++] = quadIndices[quadToTriangle[k]];\n          }\n        }\n      }\n\n      if (needsNormal) {\n        geometry.generateVertexNormals();\n      } else {\n        normalAttr.value = null;\n      }\n    }\n\n    if (surfaceMesh.material.get('normalMap')) {\n      geometry.generateTangents();\n    }\n\n    geometry.updateBoundingBox();\n    geometry.dirty();\n    surfaceMesh.material.transparent = isTransparent;\n    surfaceMesh.material.depthMask = !isTransparent;\n  },\n  _getDataShape: function (data, isParametric) {\n    var prevX = -Infinity;\n    var rowCount = 0;\n    var columnCount = 0;\n    var prevColumnCount = 0;\n    var mayInvalid = false;\n    var rowDim = isParametric ? 'u' : 'x';\n    var dataCount = data.count(); // Check data format\n\n    for (var i = 0; i < dataCount; i++) {\n      var x = data.get(rowDim, i);\n\n      if (x < prevX) {\n        if (prevColumnCount && prevColumnCount !== columnCount) {\n          if (process.env.NODE_ENV !== 'production') {\n            mayInvalid = true;\n          }\n        } // A new row.\n\n\n        prevColumnCount = columnCount;\n        columnCount = 0;\n        rowCount++;\n      }\n\n      prevX = x;\n      columnCount++;\n    }\n\n    if (!rowCount || columnCount === 1) {\n      mayInvalid = true;\n    }\n\n    if (!mayInvalid) {\n      return [rowCount + 1, columnCount];\n    }\n\n    var rows = Math.floor(Math.sqrt(dataCount));\n\n    while (rows > 0) {\n      if (Math.floor(dataCount / rows) === dataCount / rows) {\n        // Can be divided\n        return [rows, dataCount / rows];\n      }\n\n      rows--;\n    } // Bailout\n\n\n    rows = Math.floor(Math.sqrt(dataCount));\n    return [rows, rows];\n  },\n  dispose: function () {\n    this.groupGL.removeAll();\n  },\n  remove: function () {\n    this.groupGL.removeAll();\n  }\n});", "// TODO ECharts GL must be imported whatever component,charts is imported.\nimport '../../echarts-gl';\nimport SurfaceSeries from './SurfaceSeries';\nimport SurfaceView from './SurfaceView';\nexport function install(registers) {\n  registers.registerChartView(SurfaceView);\n  registers.registerSeriesModel(SurfaceSeries);\n  registers.registerLayout(function (ecModel, api) {\n    ecModel.eachSeriesByType('surface', function (surfaceModel) {\n      var cartesian = surfaceModel.coordinateSystem;\n\n      if (!cartesian || cartesian.type !== 'cartesian3D') {\n        if (process.env.NODE_ENV !== 'production') {\n          console.error('Surface chart only support cartesian3D coordinateSystem');\n        }\n      }\n\n      var data = surfaceModel.getData();\n      var points = new Float32Array(3 * data.count());\n      var nanPoint = [NaN, NaN, NaN];\n\n      if (cartesian && cartesian.type === 'cartesian3D') {\n        var coordDims = cartesian.dimensions;\n        var dims = coordDims.map(function (coordDim) {\n          return surfaceModel.coordDimToDataDim(coordDim)[0];\n        });\n        data.each(dims, function (x, y, z, idx) {\n          var pt;\n\n          if (!data.hasValue(idx)) {\n            pt = nanPoint;\n          } else {\n            pt = cartesian.dataToPoint([x, y, z]);\n          }\n\n          points[idx * 3] = pt[0];\n          points[idx * 3 + 1] = pt[1];\n          points[idx * 3 + 2] = pt[2];\n        });\n      }\n\n      data.setLayout('points', points);\n    });\n  });\n}", "import * as echarts from 'echarts/lib/echarts';\nimport componentViewControlMixin from '../../component/common/componentViewControlMixin';\nimport componentPostEffectMixin from '../../component/common/componentPostEffectMixin';\nimport componentLightMixin from '../../component/common/componentLightMixin';\nimport componentShadingMixin from '../../component/common/componentShadingMixin';\nimport geo3DModelMixin from '../../coord/geo3D/geo3DModelMixin';\nimport formatUtil from '../../util/format';\nimport formatTooltip from '../common/formatTooltip';\nimport geo3DCreator from '../../coord/geo3DCreator';\n\nfunction transformPolygon(mapbox3DCoordSys, poly) {\n  var newPoly = [];\n\n  for (var k = 0; k < poly.length; k++) {\n    newPoly.push(mapbox3DCoordSys.dataToPoint(poly[k]));\n  }\n\n  return newPoly;\n}\n\nvar Map3DSeries = echarts.SeriesModel.extend({\n  type: 'series.map3D',\n  layoutMode: 'box',\n  coordinateSystem: null,\n  visualStyleAccessPath: 'itemStyle',\n  optionUpdated: function (newOpt) {\n    newOpt = newOpt || {};\n    var coordSysType = this.get('coordinateSystem');\n\n    if (coordSysType == null || coordSysType === 'geo3D') {\n      return;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      var propsNeedToCheck = ['left', 'top', 'width', 'height', 'boxWidth', 'boxDepth', 'boxHeight', 'light', 'viewControl', 'postEffect', 'temporalSuperSampling', 'environment', 'groundPlane'];\n      var ignoredProperties = [];\n      propsNeedToCheck.forEach(function (propName) {\n        if (newOpt[propName] != null) {\n          ignoredProperties.push(propName);\n        }\n      });\n\n      if (ignoredProperties.length) {\n        console.warn('Property %s in map3D series will be ignored if coordinate system is %s', ignoredProperties.join(', '), coordSysType);\n      }\n    }\n\n    if (this.get('groundPlane.show')) {\n      // Force disable groundPlane if map3D has other coordinate systems.\n      this.option.groundPlane.show = false;\n    } // Reset geo.\n\n\n    this._geo = null;\n  },\n  getInitialData: function (option) {\n    option.data = this.getFilledRegions(option.data, option.map);\n    var dimensions = echarts.helper.createDimensions(option.data, {\n      coordDimensions: ['value']\n    });\n    var list = new echarts.List(dimensions, this);\n    list.initData(option.data);\n    var regionModelMap = {};\n    list.each(function (idx) {\n      var name = list.getName(idx);\n      var itemModel = list.getItemModel(idx);\n      regionModelMap[name] = itemModel;\n    });\n    this._regionModelMap = regionModelMap;\n    return list;\n  },\n  formatTooltip: function (dataIndex) {\n    return formatTooltip(this, dataIndex);\n  },\n  getRegionModel: function (idx) {\n    var name = this.getData().getName(idx);\n    return this._regionModelMap[name] || new echarts.Model(null, this);\n  },\n  getRegionPolygonCoords: function (idx) {\n    var coordSys = this.coordinateSystem;\n    var name = this.getData().getName(idx);\n\n    if (coordSys.transform) {\n      var region = coordSys.getRegion(name);\n      return region ? region.geometries : [];\n    } else {\n      if (!this._geo) {\n        this._geo = geo3DCreator.createGeo3D(this);\n      }\n\n      var region = this._geo.getRegion(name);\n\n      var ret = [];\n\n      for (var k = 0; k < region.geometries.length; k++) {\n        var geo = region.geometries[k];\n        var interiors = [];\n        var exterior = transformPolygon(coordSys, geo.exterior);\n\n        if (interiors && interiors.length) {\n          for (var m = 0; m < geo.interiors.length; m++) {\n            interiors.push(transformPolygon(coordSys, interiors[m]));\n          }\n        }\n\n        ret.push({\n          interiors: interiors,\n          exterior: exterior\n        });\n      }\n\n      return ret;\n    }\n  },\n\n  /**\n   * Format label\n   * @param {string} name Region name\n   * @param {string} [status='normal'] 'normal' or 'emphasis'\n   * @return {string}\n   */\n  getFormattedLabel: function (dataIndex, status) {\n    var text = formatUtil.getFormattedLabel(this, dataIndex, status);\n\n    if (text == null) {\n      text = this.getData().getName(dataIndex);\n    }\n\n    return text;\n  },\n  defaultOption: {\n    // Support geo3D, mapbox, maptalks3D\n    coordinateSystem: 'geo3D',\n    // itemStyle: {},\n    // height,\n    // label: {}\n    data: null\n  }\n});\necharts.util.merge(Map3DSeries.prototype, geo3DModelMixin);\necharts.util.merge(Map3DSeries.prototype, componentViewControlMixin);\necharts.util.merge(Map3DSeries.prototype, componentPostEffectMixin);\necharts.util.merge(Map3DSeries.prototype, componentLightMixin);\necharts.util.merge(Map3DSeries.prototype, componentShadingMixin);\nexport default Map3DSeries;", "import * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport OrbitControl from '../../util/OrbitControl';\nimport SceneHelper from '../../component/common/SceneHelper';\nimport Geo3DBuilder from '../../component/common/Geo3DBuilder';\nexport default echarts.ChartView.extend({\n  type: 'map3D',\n  __ecgl__: true,\n  init: function (ecModel, api) {\n    this._geo3DBuilder = new Geo3DBuilder(api);\n    this.groupGL = new graphicGL.Node();\n  },\n  render: function (map3DModel, ecModel, api) {\n    var coordSys = map3DModel.coordinateSystem;\n\n    if (!coordSys || !coordSys.viewGL) {\n      return;\n    }\n\n    this.groupGL.add(this._geo3DBuilder.rootNode);\n    coordSys.viewGL.add(this.groupGL);\n    var geo3D;\n\n    if (coordSys.type === 'geo3D') {\n      geo3D = coordSys;\n\n      if (!this._sceneHelper) {\n        this._sceneHelper = new SceneHelper();\n\n        this._sceneHelper.initLight(this.groupGL);\n      }\n\n      this._sceneHelper.setScene(coordSys.viewGL.scene);\n\n      this._sceneHelper.updateLight(map3DModel); // Set post effect\n\n\n      coordSys.viewGL.setPostEffect(map3DModel.getModel('postEffect'), api);\n      coordSys.viewGL.setTemporalSuperSampling(map3DModel.getModel('temporalSuperSampling'));\n      var control = this._control;\n\n      if (!control) {\n        control = this._control = new OrbitControl({\n          zr: api.getZr()\n        });\n\n        this._control.init();\n      }\n\n      var viewControlModel = map3DModel.getModel('viewControl');\n      control.setViewGL(coordSys.viewGL);\n      control.setFromViewControlModel(viewControlModel, 0);\n      control.off('update');\n      control.on('update', function () {\n        api.dispatchAction({\n          type: 'map3DChangeCamera',\n          alpha: control.getAlpha(),\n          beta: control.getBeta(),\n          distance: control.getDistance(),\n          from: this.uid,\n          map3DId: map3DModel.id\n        });\n      });\n      this._geo3DBuilder.extrudeY = true;\n    } else {\n      if (this._control) {\n        this._control.dispose();\n\n        this._control = null;\n      }\n\n      if (this._sceneHelper) {\n        this._sceneHelper.dispose();\n\n        this._sceneHelper = null;\n      }\n\n      geo3D = map3DModel.getData().getLayout('geo3D');\n      this._geo3DBuilder.extrudeY = false;\n    }\n\n    this._geo3DBuilder.update(map3DModel, ecModel, api, 0, map3DModel.getData().count()); // Must update after geo3D.viewGL.setPostEffect to determine linear space\n\n\n    var srgbDefineMethod = coordSys.viewGL.isLinearSpace() ? 'define' : 'undefine';\n\n    this._geo3DBuilder.rootNode.traverse(function (mesh) {\n      if (mesh.material) {\n        mesh.material[srgbDefineMethod]('fragment', 'SRGB_DECODE');\n      }\n    });\n  },\n  afterRender: function (map3DModel, ecModel, api, layerGL) {\n    var renderer = layerGL.renderer;\n    var coordSys = map3DModel.coordinateSystem;\n\n    if (coordSys && coordSys.type === 'geo3D') {\n      this._sceneHelper.updateAmbientCubemap(renderer, map3DModel, api);\n\n      this._sceneHelper.updateSkybox(renderer, map3DModel, api);\n    }\n  },\n  dispose: function () {\n    this.groupGL.removeAll();\n\n    this._control.dispose();\n\n    this._geo3DBuilder.dispose();\n  }\n});", "// TODO ECharts GL must be imported whatever component,charts is imported.\nimport '../../echarts-gl';\nimport Map3DSeries from './Map3DSeries';\nimport Map3DView from './Map3DView';\nimport { install as installGeo3D } from '../../component/geo3D/install';\nexport function install(registers) {\n  // Depends on geo3d\n  installGeo3D(registers);\n  registers.registerChartView(Map3DView);\n  registers.registerSeriesModel(Map3DSeries);\n  registers.registerAction({\n    type: 'map3DChangeCamera',\n    event: 'map3dcamerachanged',\n    update: 'series:updateCamera'\n  }, function (payload, ecModel) {\n    ecModel.eachComponent({\n      mainType: 'series',\n      subType: 'map3D',\n      query: payload\n    }, function (componentModel) {\n      componentModel.setView(payload);\n    });\n  });\n}", "import * as echarts from 'echarts/lib/echarts';\nexport default echarts.SeriesModel.extend({\n  type: 'series.scatterGL',\n  dependencies: ['grid', 'polar', 'geo', 'singleAxis'],\n  visualStyleAccessPath: 'itemStyle',\n  hasSymbolVisual: true,\n  getInitialData: function () {\n    return echarts.helper.createList(this);\n  },\n  defaultOption: {\n    coordinateSystem: 'cartesian2d',\n    zlevel: 10,\n    progressive: 1e5,\n    progressiveThreshold: 1e5,\n    // Cartesian coordinate system\n    // xAxisIndex: 0,\n    // yAxisIndex: 0,\n    // Polar coordinate system\n    // polarIndex: 0,\n    // Geo coordinate system\n    // geoIndex: 0,\n    large: false,\n    symbol: 'circle',\n    symbolSize: 10,\n    // symbolSize scale when zooming.\n    zoomScale: 0,\n    // Support source-over, lighter\n    blendMode: 'source-over',\n    itemStyle: {\n      opacity: 0.8\n    },\n    postEffect: {\n      enable: false,\n      colorCorrection: {\n        exposure: 0,\n        brightness: 0,\n        contrast: 1,\n        saturation: 1,\n        enable: true\n      }\n    }\n  }\n});", "import * as matrix from 'zrender/lib/core/matrix';\nimport * as vector from 'zrender/lib/core/vector';\n\nfunction GLViewHelper(viewGL) {\n  this.viewGL = viewGL;\n}\n\nGLViewHelper.prototype.reset = function (seriesModel, api) {\n  this._updateCamera(api.getWidth(), api.getHeight(), api.getDevicePixelRatio());\n\n  this._viewTransform = matrix.create();\n  this.updateTransform(seriesModel, api);\n};\n\nGLViewHelper.prototype.updateTransform = function (seriesModel, api) {\n  var coordinateSystem = seriesModel.coordinateSystem;\n\n  if (coordinateSystem.getRoamTransform) {\n    matrix.invert(this._viewTransform, coordinateSystem.getRoamTransform());\n\n    this._setCameraTransform(this._viewTransform);\n\n    api.getZr().refresh();\n  }\n}; // Reimplement the dataToPoint of coordinate system.\n// Remove the effect of pan/zoom transform\n\n\nGLViewHelper.prototype.dataToPoint = function (coordSys, data, pt) {\n  pt = coordSys.dataToPoint(data, null, pt);\n  var viewTransform = this._viewTransform;\n\n  if (viewTransform) {\n    vector.applyTransform(pt, pt, viewTransform);\n  }\n};\n/**\n * Remove transform info in point.\n */\n\n\nGLViewHelper.prototype.removeTransformInPoint = function (pt) {\n  if (this._viewTransform) {\n    vector.applyTransform(pt, pt, this._viewTransform);\n  }\n\n  return pt;\n};\n/**\n * Return number\n */\n\n\nGLViewHelper.prototype.getZoom = function () {\n  if (this._viewTransform) {\n    var m = this._viewTransform;\n    return 1 / Math.max(Math.sqrt(m[0] * m[0] + m[1] * m[1]), Math.sqrt(m[2] * m[2] + m[3] * m[3]));\n  }\n\n  return 1;\n};\n\nGLViewHelper.prototype._setCameraTransform = function (m) {\n  var camera = this.viewGL.camera;\n  camera.position.set(m[4], m[5], 0);\n  camera.scale.set(Math.sqrt(m[0] * m[0] + m[1] * m[1]), Math.sqrt(m[2] * m[2] + m[3] * m[3]), 1);\n};\n\nGLViewHelper.prototype._updateCamera = function (width, height, dpr) {\n  // TODO, left, top, right, bottom\n  this.viewGL.setViewport(0, 0, width, height, dpr);\n  var camera = this.viewGL.camera;\n  camera.left = camera.top = 0;\n  camera.bottom = height;\n  camera.right = width;\n  camera.near = 0;\n  camera.far = 100;\n};\n\nexport default GLViewHelper;", "import * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport ViewGL from '../../core/ViewGL';\nimport PointsBuilder from '../common/PointsBuilder';\nimport GLViewHelper from '../common/GLViewHelper';\nexport default echarts.ChartView.extend({\n  type: 'scatterGL',\n  __ecgl__: true,\n  init: function (ecModel, api) {\n    this.groupGL = new graphicGL.Node();\n    this.viewGL = new ViewGL('orthographic');\n    this.viewGL.add(this.groupGL);\n    this._pointsBuilderList = [];\n    this._currentStep = 0;\n    this._sizeScale = 1;\n    this._glViewHelper = new GLViewHelper(this.viewGL);\n  },\n  render: function (seriesModel, ecModel, api) {\n    this.groupGL.removeAll();\n\n    this._glViewHelper.reset(seriesModel, api);\n\n    if (!seriesModel.getData().count()) {\n      return;\n    }\n\n    var pointsBuilder = this._pointsBuilderList[0];\n\n    if (!pointsBuilder) {\n      pointsBuilder = this._pointsBuilderList[0] = new PointsBuilder(true, api);\n    }\n\n    this._pointsBuilderList.length = 1;\n    this.groupGL.add(pointsBuilder.rootNode);\n\n    this._removeTransformInPoints(seriesModel.getData().getLayout('points'));\n\n    pointsBuilder.update(seriesModel, ecModel, api);\n    this.viewGL.setPostEffect(seriesModel.getModel('postEffect'), api);\n  },\n  incrementalPrepareRender: function (seriesModel, ecModel, api) {\n    this.groupGL.removeAll();\n\n    this._glViewHelper.reset(seriesModel, api);\n\n    this._currentStep = 0;\n    this.viewGL.setPostEffect(seriesModel.getModel('postEffect'), api);\n  },\n  incrementalRender: function (params, seriesModel, ecModel, api) {\n    if (params.end <= params.start) {\n      return;\n    }\n\n    var pointsBuilder = this._pointsBuilderList[this._currentStep];\n\n    if (!pointsBuilder) {\n      pointsBuilder = new PointsBuilder(true, api);\n      this._pointsBuilderList[this._currentStep] = pointsBuilder;\n    }\n\n    this.groupGL.add(pointsBuilder.rootNode);\n\n    this._removeTransformInPoints(seriesModel.getData().getLayout('points'));\n\n    pointsBuilder.setSizeScale(this._sizeScale);\n    pointsBuilder.update(seriesModel, ecModel, api, params.start, params.end);\n    api.getZr().refresh();\n    this._currentStep++;\n  },\n  updateTransform: function (seriesModel, ecModel, api) {\n    if (seriesModel.coordinateSystem.getRoamTransform) {\n      this._glViewHelper.updateTransform(seriesModel, api);\n\n      var zoom = this._glViewHelper.getZoom();\n\n      var sizeScale = Math.max((seriesModel.get('zoomScale') || 0) * (zoom - 1) + 1, 0);\n      this._sizeScale = sizeScale;\n\n      this._pointsBuilderList.forEach(function (pointsBuilder) {\n        pointsBuilder.setSizeScale(sizeScale);\n      });\n    }\n  },\n  _removeTransformInPoints: function (points) {\n    if (!points) {\n      return;\n    }\n\n    var pt = [];\n\n    for (var i = 0; i < points.length; i += 2) {\n      pt[0] = points[i];\n      pt[1] = points[i + 1];\n\n      this._glViewHelper.removeTransformInPoint(pt);\n\n      points[i] = pt[0];\n      points[i + 1] = pt[1];\n    }\n  },\n  dispose: function () {\n    this.groupGL.removeAll();\n\n    this._pointsBuilderList.forEach(function (pointsBuilder) {\n      pointsBuilder.dispose();\n    });\n  },\n  remove: function () {\n    this.groupGL.removeAll();\n  }\n});", "// TODO ECharts GL must be imported whatever component,charts is imported.\nimport '../../echarts-gl';\nimport ScatterGLSeries from './ScatterGLSeries';\nimport ScatterGLView from './ScatterGLView';\nexport function install(registers) {\n  registers.registerChartView(ScatterGLView);\n  registers.registerSeriesModel(ScatterGLSeries);\n  registers.registerLayout({\n    seriesType: 'scatterGL',\n    reset: function (seriesModel) {\n      var coordSys = seriesModel.coordinateSystem;\n      var data = seriesModel.getData();\n      var progress;\n\n      if (coordSys) {\n        var dims = coordSys.dimensions.map(function (dim) {\n          return data.mapDimension(dim);\n        }).slice(0, 2);\n        var pt = [];\n\n        if (dims.length === 1) {\n          progress = function (params) {\n            var points = new Float32Array((params.end - params.start) * 2);\n\n            for (var idx = params.start; idx < params.end; idx++) {\n              var offset = (idx - params.start) * 2;\n              var x = data.get(dims[0], idx);\n              var pt = coordSys.dataToPoint(x);\n              points[offset] = pt[0];\n              points[offset + 1] = pt[1];\n            }\n\n            data.setLayout('points', points);\n          };\n        } else if (dims.length === 2) {\n          progress = function (params) {\n            var points = new Float32Array((params.end - params.start) * 2);\n\n            for (var idx = params.start; idx < params.end; idx++) {\n              var offset = (idx - params.start) * 2;\n              var x = data.get(dims[0], idx);\n              var y = data.get(dims[1], idx);\n              pt[0] = x;\n              pt[1] = y;\n              pt = coordSys.dataToPoint(pt);\n              points[offset] = pt[0];\n              points[offset + 1] = pt[1];\n            }\n\n            data.setLayout('points', points);\n          };\n        }\n      }\n\n      return {\n        progress: progress\n      };\n    }\n  });\n}", "\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n// TODO: this module is only for compatibility with echarts-gl\nimport linkSeriesData from './linkSeriesData.js';\nexport default linkSeriesData;", "import * as echarts from 'echarts/lib/echarts';\nimport Graph from 'echarts/lib/data/Graph';\nimport linkList from 'echarts/lib/data/helper/linkList';\nimport retrieve from '../../util/retrieve';\nexport default function (nodes, edges, hostModel, directed, beforeLink) {\n  var graph = new Graph(directed);\n\n  for (var i = 0; i < nodes.length; i++) {\n    graph.addNode(retrieve.firstNotNull( // Id, name, dataIndex\n    nodes[i].id, nodes[i].name, i), i);\n  }\n\n  var linkNameList = [];\n  var validEdges = [];\n  var linkCount = 0;\n\n  for (var i = 0; i < edges.length; i++) {\n    var link = edges[i];\n    var source = link.source;\n    var target = link.target; // addEdge may fail when source or target not exists\n\n    if (graph.addEdge(source, target, linkCount)) {\n      validEdges.push(link);\n      linkNameList.push(retrieve.firstNotNull(link.id, source + ' > ' + target));\n      linkCount++;\n    }\n  }\n\n  var nodeData; // FIXME, support more coordinate systems.\n\n  var dimensionNames = echarts.helper.createDimensions(nodes, {\n    coordDimensions: ['value']\n  });\n  nodeData = new echarts.List(dimensionNames, hostModel);\n  nodeData.initData(nodes);\n  var edgeData = new echarts.List(['value'], hostModel);\n  edgeData.initData(validEdges, linkNameList);\n  beforeLink && beforeLink(nodeData, edgeData);\n  linkList({\n    mainData: nodeData,\n    struct: graph,\n    structAttr: 'graph',\n    datas: {\n      node: nodeData,\n      edge: edgeData\n    },\n    datasAttr: {\n      node: 'data',\n      edge: 'edgeData'\n    }\n  }); // Update dataIndex of nodes and edges because invalid edge may be removed\n\n  graph.update();\n  return graph;\n}\n;", "import * as echarts from 'echarts/lib/echarts';\nimport createGraphFromNodeEdge from './createGraphFromNodeEdge';\nimport formatUtil from '../../util/format';\nvar GraphSeries = echarts.SeriesModel.extend({\n  type: 'series.graphGL',\n  visualStyleAccessPath: 'itemStyle',\n  hasSymbolVisual: true,\n  init: function (option) {\n    GraphSeries.superApply(this, 'init', arguments); // Provide data for legend select\n\n    this.legendDataProvider = function () {\n      return this._categoriesData;\n    };\n\n    this._updateCategoriesData();\n  },\n  mergeOption: function (option) {\n    GraphSeries.superApply(this, 'mergeOption', arguments);\n\n    this._updateCategoriesData();\n  },\n  getFormattedLabel: function (dataIndex, status, dataType, dimIndex) {\n    var text = formatUtil.getFormattedLabel(this, dataIndex, status, dataType, dimIndex);\n\n    if (text == null) {\n      var data = this.getData();\n      var lastDim = data.dimensions[data.dimensions.length - 1];\n      text = data.get(lastDim, dataIndex);\n    }\n\n    return text;\n  },\n  getInitialData: function (option, ecModel) {\n    var edges = option.edges || option.links || [];\n    var nodes = option.data || option.nodes || [];\n    var self = this;\n\n    if (nodes && edges) {\n      return createGraphFromNodeEdge(nodes, edges, this, true, beforeLink).data;\n    }\n\n    function beforeLink(nodeData, edgeData) {\n      // Overwrite nodeData.getItemModel to\n      nodeData.wrapMethod('getItemModel', function (model) {\n        const categoriesModels = self._categoriesModels;\n        const categoryIdx = model.getShallow('category');\n        const categoryModel = categoriesModels[categoryIdx];\n\n        if (categoryModel) {\n          categoryModel.parentModel = model.parentModel;\n          model.parentModel = categoryModel;\n        }\n\n        return model;\n      }); // TODO Inherit resolveParentPath by default in Model#getModel?\n\n      const oldGetModel = ecModel.getModel([]).getModel;\n\n      function newGetModel(path, parentModel) {\n        const model = oldGetModel.call(this, path, parentModel);\n        model.resolveParentPath = resolveParentPath;\n        return model;\n      }\n\n      edgeData.wrapMethod('getItemModel', function (model) {\n        model.resolveParentPath = resolveParentPath;\n        model.getModel = newGetModel;\n        return model;\n      });\n\n      function resolveParentPath(pathArr) {\n        if (pathArr && (pathArr[0] === 'label' || pathArr[1] === 'label')) {\n          const newPathArr = pathArr.slice();\n\n          if (pathArr[0] === 'label') {\n            newPathArr[0] = 'edgeLabel';\n          } else if (pathArr[1] === 'label') {\n            newPathArr[1] = 'edgeLabel';\n          }\n\n          return newPathArr;\n        }\n\n        return pathArr;\n      }\n    }\n  },\n\n  /**\n   * @return {module:echarts/data/Graph}\n   */\n  getGraph: function () {\n    return this.getData().graph;\n  },\n\n  /**\n   * @return {module:echarts/data/List}\n   */\n  getEdgeData: function () {\n    return this.getGraph().edgeData;\n  },\n\n  /**\n   * @return {module:echarts/data/List}\n   */\n  getCategoriesData: function () {\n    return this._categoriesData;\n  },\n\n  /**\n   * @override\n   */\n  formatTooltip: function (dataIndex, multipleSeries, dataType) {\n    if (dataType === 'edge') {\n      var nodeData = this.getData();\n      var params = this.getDataParams(dataIndex, dataType);\n      var edge = nodeData.graph.getEdgeByIndex(dataIndex);\n      var sourceName = nodeData.getName(edge.node1.dataIndex);\n      var targetName = nodeData.getName(edge.node2.dataIndex);\n      var html = [];\n      sourceName != null && html.push(sourceName);\n      targetName != null && html.push(targetName);\n      html = echarts.format.encodeHTML(html.join(' > '));\n\n      if (params.value) {\n        html += ' : ' + echarts.format.encodeHTML(params.value);\n      }\n\n      return html;\n    } else {\n      // dataType === 'node' or empty\n      return GraphSeries.superApply(this, 'formatTooltip', arguments);\n    }\n  },\n  _updateCategoriesData: function () {\n    var categories = (this.option.categories || []).map(function (category) {\n      // Data must has value\n      return category.value != null ? category : Object.assign({\n        value: 0\n      }, category);\n    });\n    var categoriesData = new echarts.List(['value'], this);\n    categoriesData.initData(categories);\n    this._categoriesData = categoriesData;\n    this._categoriesModels = categoriesData.mapArray(function (idx) {\n      return categoriesData.getItemModel(idx, true);\n    });\n  },\n  setView: function (payload) {\n    if (payload.zoom != null) {\n      this.option.zoom = payload.zoom;\n    }\n\n    if (payload.offset != null) {\n      this.option.offset = payload.offset;\n    }\n  },\n  setNodePosition: function (points) {\n    for (var i = 0; i < points.length / 2; i++) {\n      var x = points[i * 2];\n      var y = points[i * 2 + 1];\n      var opt = this.getData().getRawDataItem(i);\n      opt.x = x;\n      opt.y = y;\n    }\n  },\n  isAnimationEnabled: function () {\n    return GraphSeries.superCall(this, 'isAnimationEnabled') // Not enable animation when do force layout\n    && !(this.get('layout') === 'force' && this.get('force.layoutAnimation'));\n  },\n  defaultOption: {\n    zlevel: 10,\n    z: 2,\n    legendHoverLink: true,\n    // Only support forceAtlas2\n    layout: 'forceAtlas2',\n    // Configuration of force directed layout\n    forceAtlas2: {\n      initLayout: null,\n      GPU: true,\n      steps: 1,\n      // barnesHutOptimize\n      // Maxp layout steps.\n      maxSteps: 1000,\n      repulsionByDegree: true,\n      linLogMode: false,\n      strongGravityMode: false,\n      gravity: 1.0,\n      // scaling: 1.0,\n      edgeWeightInfluence: 1.0,\n      // Edge weight range.\n      edgeWeight: [1, 4],\n      // Node weight range.\n      nodeWeight: [1, 4],\n      // jitterTolerence: 0.1,\n      preventOverlap: false,\n      gravityCenter: null\n    },\n    focusNodeAdjacency: true,\n    focusNodeAdjacencyOn: 'mouseover',\n    left: 'center',\n    top: 'center',\n    // right: null,\n    // bottom: null,\n    // width: '80%',\n    // height: '80%',\n    symbol: 'circle',\n    symbolSize: 5,\n    roam: false,\n    // Default on center of graph\n    center: null,\n    zoom: 1,\n    // categories: [],\n    // data: []\n    // Or\n    // nodes: []\n    //\n    // links: []\n    // Or\n    // edges: []\n    label: {\n      show: false,\n      formatter: '{b}',\n      position: 'right',\n      distance: 5,\n      textStyle: {\n        fontSize: 14\n      }\n    },\n    itemStyle: {},\n    lineStyle: {\n      color: '#aaa',\n      width: 1,\n      opacity: 0.5\n    },\n    emphasis: {\n      label: {\n        show: true\n      }\n    },\n    animation: false\n  }\n});\nexport default GraphSeries;", "/**\n * Lines geometry\n * Use screen space projected lines lineWidth > MAX_LINE_WIDTH\n * https://mattdesl.svbtle.com/drawing-lines-is-hard\n * @module echarts-gl/util/geometry/LinesGeometry\n * @author Yi Shen(http://github.com/pissang)\n */\nimport Geometry from 'claygl/src/Geometry';\nimport * as echarts from 'echarts/lib/echarts';\nimport dynamicConvertMixin from './dynamicConvertMixin';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nvar vec2 = glmatrix.vec2; // var CURVE_RECURSION_LIMIT = 8;\n// var CURVE_COLLINEAR_EPSILON = 40;\n\nvar sampleLinePoints = [[0, 0], [1, 1]];\n/**\n * @constructor\n * @alias module:echarts-gl/util/geometry/LinesGeometry\n * @extends clay.Geometry\n */\n\nvar LinesGeometry = Geometry.extend(function () {\n  return {\n    segmentScale: 4,\n    dynamic: true,\n\n    /**\n     * Need to use mesh to expand lines if lineWidth > MAX_LINE_WIDTH\n     */\n    useNativeLine: true,\n    attributes: {\n      position: new Geometry.Attribute('position', 'float', 2, 'POSITION'),\n      normal: new Geometry.Attribute('normal', 'float', 2),\n      offset: new Geometry.Attribute('offset', 'float', 1),\n      color: new Geometry.Attribute('color', 'float', 4, 'COLOR')\n    }\n  };\n},\n/** @lends module: echarts-gl/util/geometry/LinesGeometry.prototype */\n{\n  /**\n   * Reset offset\n   */\n  resetOffset: function () {\n    this._vertexOffset = 0;\n    this._faceOffset = 0;\n    this._itemVertexOffsets = [];\n  },\n\n  /**\n   * @param {number} nVertex\n   */\n  setVertexCount: function (nVertex) {\n    var attributes = this.attributes;\n\n    if (this.vertexCount !== nVertex) {\n      attributes.position.init(nVertex);\n      attributes.color.init(nVertex);\n\n      if (!this.useNativeLine) {\n        attributes.offset.init(nVertex);\n        attributes.normal.init(nVertex);\n      }\n\n      if (nVertex > 0xffff) {\n        if (this.indices instanceof Uint16Array) {\n          this.indices = new Uint32Array(this.indices);\n        }\n      } else {\n        if (this.indices instanceof Uint32Array) {\n          this.indices = new Uint16Array(this.indices);\n        }\n      }\n    }\n  },\n\n  /**\n   * @param {number} nTriangle\n   */\n  setTriangleCount: function (nTriangle) {\n    if (this.triangleCount !== nTriangle) {\n      if (nTriangle === 0) {\n        this.indices = null;\n      } else {\n        this.indices = this.vertexCount > 0xffff ? new Uint32Array(nTriangle * 3) : new Uint16Array(nTriangle * 3);\n      }\n    }\n  },\n  _getCubicCurveApproxStep: function (p0, p1, p2, p3) {\n    var len = vec2.dist(p0, p1) + vec2.dist(p2, p1) + vec2.dist(p3, p2);\n    var step = 1 / (len + 1) * this.segmentScale;\n    return step;\n  },\n\n  /**\n   * Get vertex count of cubic curve\n   * @param {Array.<number>} p0\n   * @param {Array.<number>} p1\n   * @param {Array.<number>} p2\n   * @param {Array.<number>} p3\n   * @return number\n   */\n  getCubicCurveVertexCount: function (p0, p1, p2, p3) {\n    var step = this._getCubicCurveApproxStep(p0, p1, p2, p3);\n\n    var segCount = Math.ceil(1 / step);\n\n    if (!this.useNativeLine) {\n      return segCount * 2 + 2;\n    } else {\n      return segCount * 2;\n    }\n  },\n\n  /**\n   * Get face count of cubic curve\n   * @param {Array.<number>} p0\n   * @param {Array.<number>} p1\n   * @param {Array.<number>} p2\n   * @param {Array.<number>} p3\n   * @return number\n   */\n  getCubicCurveTriangleCount: function (p0, p1, p2, p3) {\n    var step = this._getCubicCurveApproxStep(p0, p1, p2, p3);\n\n    var segCount = Math.ceil(1 / step);\n\n    if (!this.useNativeLine) {\n      return segCount * 2;\n    } else {\n      return 0;\n    }\n  },\n\n  /**\n   * Get vertex count of line\n   * @return {number}\n   */\n  getLineVertexCount: function () {\n    return this.getPolylineVertexCount(sampleLinePoints);\n  },\n\n  /**\n   * Get face count of line\n   * @return {number}\n   */\n  getLineTriangleCount: function () {\n    return this.getPolylineTriangleCount(sampleLinePoints);\n  },\n\n  /**\n   * Get how many vertices will polyline take.\n   * @type {number|Array} points Can be a 1d/2d list of points, or a number of points amount.\n   * @return {number}\n   */\n  getPolylineVertexCount: function (points) {\n    var pointsLen;\n\n    if (typeof points === 'number') {\n      pointsLen = points;\n    } else {\n      var is2DArray = typeof points[0] !== 'number';\n      pointsLen = is2DArray ? points.length : points.length / 2;\n    }\n\n    return !this.useNativeLine ? (pointsLen - 1) * 2 + 2 : (pointsLen - 1) * 2;\n  },\n\n  /**\n   * Get how many triangles will polyline take.\n   * @type {number|Array} points Can be a 1d/2d list of points, or a number of points amount.\n   * @return {number}\n   */\n  getPolylineTriangleCount: function (points) {\n    var pointsLen;\n\n    if (typeof points === 'number') {\n      pointsLen = points;\n    } else {\n      var is2DArray = typeof points[0] !== 'number';\n      pointsLen = is2DArray ? points.length : points.length / 2;\n    }\n\n    return !this.useNativeLine ? (pointsLen - 1) * 2 : 0;\n  },\n\n  /**\n   * Add a cubic curve\n   * @param {Array.<number>} p0\n   * @param {Array.<number>} p1\n   * @param {Array.<number>} p2\n   * @param {Array.<number>} p3\n   * @param {Array.<number>} color\n   * @param {number} [lineWidth=1]\n   */\n  addCubicCurve: function (p0, p1, p2, p3, color, lineWidth) {\n    if (lineWidth == null) {\n      lineWidth = 1;\n    } // incremental interpolation\n    // http://antigrain.com/research/bezier_interpolation/index.html#PAGE_BEZIER_INTERPOLATION\n\n\n    var x0 = p0[0],\n        y0 = p0[1];\n    var x1 = p1[0],\n        y1 = p1[1];\n    var x2 = p2[0],\n        y2 = p2[1];\n    var x3 = p3[0],\n        y3 = p3[1];\n\n    var step = this._getCubicCurveApproxStep(p0, p1, p2, p3);\n\n    var step2 = step * step;\n    var step3 = step2 * step;\n    var pre1 = 3.0 * step;\n    var pre2 = 3.0 * step2;\n    var pre4 = 6.0 * step2;\n    var pre5 = 6.0 * step3;\n    var tmp1x = x0 - x1 * 2.0 + x2;\n    var tmp1y = y0 - y1 * 2.0 + y2;\n    var tmp2x = (x1 - x2) * 3.0 - x0 + x3;\n    var tmp2y = (y1 - y2) * 3.0 - y0 + y3;\n    var fx = x0;\n    var fy = y0;\n    var dfx = (x1 - x0) * pre1 + tmp1x * pre2 + tmp2x * step3;\n    var dfy = (y1 - y0) * pre1 + tmp1y * pre2 + tmp2y * step3;\n    var ddfx = tmp1x * pre4 + tmp2x * pre5;\n    var ddfy = tmp1y * pre4 + tmp2y * pre5;\n    var dddfx = tmp2x * pre5;\n    var dddfy = tmp2y * pre5;\n    var t = 0;\n    var k = 0;\n    var segCount = Math.ceil(1 / step);\n    var points = new Float32Array((segCount + 1) * 3);\n    var points = [];\n    var offset = 0;\n\n    for (var k = 0; k < segCount + 1; k++) {\n      points[offset++] = fx;\n      points[offset++] = fy;\n      fx += dfx;\n      fy += dfy;\n      dfx += ddfx;\n      dfy += ddfy;\n      ddfx += dddfx;\n      ddfy += dddfy;\n      t += step;\n\n      if (t > 1) {\n        fx = dfx > 0 ? Math.min(fx, x3) : Math.max(fx, x3);\n        fy = dfy > 0 ? Math.min(fy, y3) : Math.max(fy, y3);\n      }\n    }\n\n    this.addPolyline(points, color, lineWidth);\n  },\n\n  /**\n   * Add a straight line\n   * @param {Array.<number>} p0\n   * @param {Array.<number>} p1\n   * @param {Array.<number>} color\n   * @param {number} [lineWidth=1]\n   */\n  addLine: function (p0, p1, color, lineWidth) {\n    this.addPolyline([p0, p1], color, lineWidth);\n  },\n\n  /**\n   * Add a straight line\n   * @param {Array.<Array> | Array.<number>} points\n   * @param {Array.<number> | Array.<Array>} color\n   * @param {number} [lineWidth=1]\n   * @param {number} [arrayOffset=0]\n   * @param {number} [pointsCount] Default to be amount of points in the first argument\n   */\n  addPolyline: function () {\n    var dirA = vec2.create();\n    var dirB = vec2.create();\n    var normal = vec2.create();\n    var tangent = vec2.create();\n    var point = [],\n        nextPoint = [],\n        prevPoint = [];\n    return function (points, color, lineWidth, arrayOffset, pointsCount) {\n      if (!points.length) {\n        return;\n      }\n\n      var is2DArray = typeof points[0] !== 'number';\n\n      if (pointsCount == null) {\n        pointsCount = is2DArray ? points.length : points.length / 2;\n      }\n\n      if (pointsCount < 2) {\n        return;\n      }\n\n      if (arrayOffset == null) {\n        arrayOffset = 0;\n      }\n\n      if (lineWidth == null) {\n        lineWidth = 1;\n      }\n\n      this._itemVertexOffsets.push(this._vertexOffset);\n\n      var notSharingColor = is2DArray ? typeof color[0] !== 'number' : color.length / 4 === pointsCount;\n      var positionAttr = this.attributes.position;\n      var colorAttr = this.attributes.color;\n      var offsetAttr = this.attributes.offset;\n      var normalAttr = this.attributes.normal;\n      var indices = this.indices;\n      var vertexOffset = this._vertexOffset;\n      var pointColor;\n\n      for (var k = 0; k < pointsCount; k++) {\n        if (is2DArray) {\n          point = points[k + arrayOffset];\n\n          if (notSharingColor) {\n            pointColor = color[k + arrayOffset];\n          } else {\n            pointColor = color;\n          }\n        } else {\n          var k2 = k * 2 + arrayOffset;\n          point = point || [];\n          point[0] = points[k2];\n          point[1] = points[k2 + 1];\n\n          if (notSharingColor) {\n            var k4 = k * 4 + arrayOffset;\n            pointColor = pointColor || [];\n            pointColor[0] = color[k4];\n            pointColor[1] = color[k4 + 1];\n            pointColor[2] = color[k4 + 2];\n            pointColor[3] = color[k4 + 3];\n          } else {\n            pointColor = color;\n          }\n        }\n\n        if (!this.useNativeLine) {\n          var offset;\n\n          if (k < pointsCount - 1) {\n            if (is2DArray) {\n              vec2.copy(nextPoint, points[k + 1]);\n            } else {\n              var k2 = (k + 1) * 2 + arrayOffset;\n              nextPoint = nextPoint || [];\n              nextPoint[0] = points[k2];\n              nextPoint[1] = points[k2 + 1];\n            } // TODO In case dir is (0, 0)\n            // TODO miterLimit\n\n\n            if (k > 0) {\n              vec2.sub(dirA, point, prevPoint);\n              vec2.sub(dirB, nextPoint, point);\n              vec2.normalize(dirA, dirA);\n              vec2.normalize(dirB, dirB);\n              vec2.add(tangent, dirA, dirB);\n              vec2.normalize(tangent, tangent);\n              var miter = lineWidth / 2 * Math.min(1 / vec2.dot(dirA, tangent), 2);\n              normal[0] = -tangent[1];\n              normal[1] = tangent[0];\n              offset = miter;\n            } else {\n              vec2.sub(dirA, nextPoint, point);\n              vec2.normalize(dirA, dirA);\n              normal[0] = -dirA[1];\n              normal[1] = dirA[0];\n              offset = lineWidth / 2;\n            }\n          } else {\n            vec2.sub(dirA, point, prevPoint);\n            vec2.normalize(dirA, dirA);\n            normal[0] = -dirA[1];\n            normal[1] = dirA[0];\n            offset = lineWidth / 2;\n          }\n\n          normalAttr.set(vertexOffset, normal);\n          normalAttr.set(vertexOffset + 1, normal);\n          offsetAttr.set(vertexOffset, offset);\n          offsetAttr.set(vertexOffset + 1, -offset);\n          vec2.copy(prevPoint, point);\n          positionAttr.set(vertexOffset, point);\n          positionAttr.set(vertexOffset + 1, point);\n          colorAttr.set(vertexOffset, pointColor);\n          colorAttr.set(vertexOffset + 1, pointColor);\n          vertexOffset += 2;\n        } else {\n          if (k > 1) {\n            positionAttr.copy(vertexOffset, vertexOffset - 1);\n            colorAttr.copy(vertexOffset, vertexOffset - 1);\n            vertexOffset++;\n          }\n        }\n\n        if (!this.useNativeLine) {\n          if (k > 0) {\n            var idx3 = this._faceOffset * 3;\n            var indices = this.indices; // 0-----2\n            // 1-----3\n            // 0->1->2, 1->3->2\n\n            indices[idx3] = vertexOffset - 4;\n            indices[idx3 + 1] = vertexOffset - 3;\n            indices[idx3 + 2] = vertexOffset - 2;\n            indices[idx3 + 3] = vertexOffset - 3;\n            indices[idx3 + 4] = vertexOffset - 1;\n            indices[idx3 + 5] = vertexOffset - 2;\n            this._faceOffset += 2;\n          }\n        } else {\n          colorAttr.set(vertexOffset, pointColor);\n          positionAttr.set(vertexOffset, point);\n          vertexOffset++;\n        }\n      }\n\n      this._vertexOffset = vertexOffset;\n    };\n  }(),\n\n  /**\n   * Set color of single line.\n   */\n  setItemColor: function (idx, color) {\n    var startOffset = this._itemVertexOffsets[idx];\n    var endOffset = idx < this._itemVertexOffsets.length - 1 ? this._itemVertexOffsets[idx + 1] : this._vertexOffset;\n\n    for (var i = startOffset; i < endOffset; i++) {\n      this.attributes.color.set(i, color);\n    }\n\n    this.dirty('color');\n  }\n});\necharts.util.defaults(LinesGeometry.prototype, dynamicConvertMixin);\nexport default LinesGeometry;", "export default \"@export ecgl.forceAtlas2.updateNodeRepulsion\\n\\n#define NODE_COUNT 0\\n\\nuniform sampler2D positionTex;\\n\\nuniform vec2 textureSize;\\nuniform float gravity;\\nuniform float scaling;\\nuniform vec2 gravityCenter;\\n\\nuniform bool strongGravityMode;\\nuniform bool preventOverlap;\\n\\nvarying vec2 v_Texcoord;\\n\\nvoid main() {\\n\\n vec4 n0 = texture2D(positionTex, v_Texcoord);\\n\\n vec2 force = vec2(0.0);\\n for (int i = 0; i < NODE_COUNT; i++) {\\n vec2 uv = vec2(\\n mod(float(i), textureSize.x) / (textureSize.x - 1.0),\\n floor(float(i) / textureSize.x) / (textureSize.y - 1.0)\\n );\\n vec4 n1 = texture2D(positionTex, uv);\\n\\n vec2 dir = n0.xy - n1.xy;\\n float d2 = dot(dir, dir);\\n\\n if (d2 > 0.0) {\\n float factor = 0.0;\\n if (preventOverlap) {\\n float d = sqrt(d2);\\n d = d - n0.w - n1.w;\\n if (d > 0.0) {\\n factor = scaling * n0.z * n1.z / (d * d);\\n }\\n else if (d < 0.0) {\\n factor = scaling * 100.0 * n0.z * n1.z;\\n }\\n }\\n else {\\n factor = scaling * n0.z * n1.z / d2;\\n }\\n force += dir * factor;\\n }\\n }\\n\\n vec2 dir = gravityCenter - n0.xy;\\n float d = 1.0;\\n if (!strongGravityMode) {\\n d = length(dir);\\n }\\n\\n force += dir * n0.z * gravity / (d + 1.0);\\n\\n gl_FragColor = vec4(force, 0.0, 1.0);\\n}\\n@end\\n\\n@export ecgl.forceAtlas2.updateEdgeAttraction.vertex\\n\\nattribute vec2 node1;\\nattribute vec2 node2;\\nattribute float weight;\\n\\nuniform sampler2D positionTex;\\nuniform float edgeWeightInfluence;\\nuniform bool preventOverlap;\\nuniform bool linLogMode;\\n\\nuniform vec2 windowSize: WINDOW_SIZE;\\n\\nvarying vec2 v_Force;\\n\\nvoid main() {\\n\\n vec4 n0 = texture2D(positionTex, node1);\\n vec4 n1 = texture2D(positionTex, node2);\\n\\n vec2 dir = n1.xy - n0.xy;\\n float d = length(dir);\\n float w;\\n if (edgeWeightInfluence == 0.0) {\\n w = 1.0;\\n }\\n else if (edgeWeightInfluence == 1.0) {\\n w = weight;\\n }\\n else {\\n w = pow(weight, edgeWeightInfluence);\\n }\\n vec2 offset = vec2(1.0 / windowSize.x, 1.0 / windowSize.y);\\n vec2 scale = vec2((windowSize.x - 1.0) / windowSize.x, (windowSize.y - 1.0) / windowSize.y);\\n vec2 pos = node1 * scale * 2.0 - 1.0;\\n gl_Position = vec4(pos + offset, 0.0, 1.0);\\n gl_PointSize = 1.0;\\n\\n float factor;\\n if (preventOverlap) {\\n d = d - n1.w - n0.w;\\n }\\n if (d <= 0.0) {\\n v_Force = vec2(0.0);\\n return;\\n }\\n\\n if (linLogMode) {\\n factor = w * log(d) / d;\\n }\\n else {\\n factor = w;\\n }\\n v_Force = dir * factor;\\n}\\n@end\\n\\n@export ecgl.forceAtlas2.updateEdgeAttraction.fragment\\n\\nvarying vec2 v_Force;\\n\\nvoid main() {\\n gl_FragColor = vec4(v_Force, 0.0, 0.0);\\n}\\n@end\\n\\n@export ecgl.forceAtlas2.calcWeightedSum.vertex\\n\\nattribute vec2 node;\\n\\nvarying vec2 v_NodeUv;\\n\\nvoid main() {\\n\\n v_NodeUv = node;\\n gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\\n gl_PointSize = 1.0;\\n}\\n@end\\n\\n@export ecgl.forceAtlas2.calcWeightedSum.fragment\\n\\nvarying vec2 v_NodeUv;\\n\\nuniform sampler2D positionTex;\\nuniform sampler2D forceTex;\\nuniform sampler2D forcePrevTex;\\n\\nvoid main() {\\n vec2 force = texture2D(forceTex, v_NodeUv).rg;\\n vec2 forcePrev = texture2D(forcePrevTex, v_NodeUv).rg;\\n\\n float mass = texture2D(positionTex, v_NodeUv).z;\\n float swing = length(force - forcePrev) * mass;\\n float traction = length(force + forcePrev) * 0.5 * mass;\\n\\n gl_FragColor = vec4(swing, traction, 0.0, 0.0);\\n}\\n@end\\n\\n@export ecgl.forceAtlas2.calcGlobalSpeed\\n\\nuniform sampler2D globalSpeedPrevTex;\\nuniform sampler2D weightedSumTex;\\nuniform float jitterTolerence;\\n\\nvoid main() {\\n vec2 weightedSum = texture2D(weightedSumTex, vec2(0.5)).xy;\\n float prevGlobalSpeed = texture2D(globalSpeedPrevTex, vec2(0.5)).x;\\n float globalSpeed = jitterTolerence * jitterTolerence\\n * weightedSum.y / weightedSum.x;\\n if (prevGlobalSpeed > 0.0) {\\n globalSpeed = min(globalSpeed / prevGlobalSpeed, 1.5) * prevGlobalSpeed;\\n }\\n gl_FragColor = vec4(globalSpeed, 0.0, 0.0, 1.0);\\n}\\n@end\\n\\n@export ecgl.forceAtlas2.updatePosition\\n\\nuniform sampler2D forceTex;\\nuniform sampler2D forcePrevTex;\\nuniform sampler2D positionTex;\\nuniform sampler2D globalSpeedTex;\\n\\nvarying vec2 v_Texcoord;\\n\\nvoid main() {\\n vec2 force = texture2D(forceTex, v_Texcoord).xy;\\n vec2 forcePrev = texture2D(forcePrevTex, v_Texcoord).xy;\\n vec4 node = texture2D(positionTex, v_Texcoord);\\n\\n float globalSpeed = texture2D(globalSpeedTex, vec2(0.5)).r;\\n float swing = length(force - forcePrev);\\n float speed = 0.1 * globalSpeed / (0.1 + globalSpeed * sqrt(swing));\\n\\n float df = length(force);\\n if (df > 0.0) {\\n speed = min(df * speed, 10.0) / df;\\n\\n gl_FragColor = vec4(node.xy + speed * force, node.zw);\\n }\\n else {\\n gl_FragColor = node;\\n }\\n}\\n@end\\n\\n@export ecgl.forceAtlas2.edges.vertex\\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\\n\\nattribute vec2 node;\\nattribute vec4 a_Color : COLOR;\\nvarying vec4 v_Color;\\n\\nuniform sampler2D positionTex;\\n\\nvoid main()\\n{\\n gl_Position = worldViewProjection * vec4(\\n texture2D(positionTex, node).xy, -10.0, 1.0\\n );\\n v_Color = a_Color;\\n}\\n@end\\n\\n@export ecgl.forceAtlas2.edges.fragment\\nuniform vec4 color : [1.0, 1.0, 1.0, 1.0];\\nvarying vec4 v_Color;\\nvoid main() {\\n gl_FragColor = color * v_Color;\\n}\\n@end\";", "import graphicGL from '../../util/graphicGL';\nimport Pass from 'claygl/src/compositor/Pass';\nimport FrameBuffer from 'claygl/src/FrameBuffer';\nimport forceAtlas2Code from './forceAtlas2.glsl.js';\ngraphicGL.Shader.import(forceAtlas2Code);\nvar defaultConfigs = {\n  repulsionByDegree: true,\n  linLogMode: false,\n  strongGravityMode: false,\n  gravity: 1.0,\n  scaling: 1.0,\n  edgeWeightInfluence: 1.0,\n  jitterTolerence: 0.1,\n  preventOverlap: false,\n  dissuadeHubs: false,\n  gravityCenter: null\n};\n\nfunction ForceAtlas2GPU(options) {\n  var textureOpt = {\n    type: graphicGL.Texture.FLOAT,\n    minFilter: graphicGL.Texture.NEAREST,\n    magFilter: graphicGL.Texture.NEAREST\n  };\n  this._positionSourceTex = new graphicGL.Texture2D(textureOpt);\n  this._positionSourceTex.flipY = false;\n  this._positionTex = new graphicGL.Texture2D(textureOpt);\n  this._positionPrevTex = new graphicGL.Texture2D(textureOpt);\n  this._forceTex = new graphicGL.Texture2D(textureOpt);\n  this._forcePrevTex = new graphicGL.Texture2D(textureOpt);\n  this._weightedSumTex = new graphicGL.Texture2D(textureOpt);\n  this._weightedSumTex.width = this._weightedSumTex.height = 1;\n  this._globalSpeedTex = new graphicGL.Texture2D(textureOpt);\n  this._globalSpeedPrevTex = new graphicGL.Texture2D(textureOpt);\n  this._globalSpeedTex.width = this._globalSpeedTex.height = 1;\n  this._globalSpeedPrevTex.width = this._globalSpeedPrevTex.height = 1;\n  this._nodeRepulsionPass = new Pass({\n    fragment: graphicGL.Shader.source('ecgl.forceAtlas2.updateNodeRepulsion')\n  });\n  this._positionPass = new Pass({\n    fragment: graphicGL.Shader.source('ecgl.forceAtlas2.updatePosition')\n  });\n  this._globalSpeedPass = new Pass({\n    fragment: graphicGL.Shader.source('ecgl.forceAtlas2.calcGlobalSpeed')\n  });\n  this._copyPass = new Pass({\n    fragment: graphicGL.Shader.source('clay.compositor.output')\n  });\n\n  var additiveBlend = function (gl) {\n    gl.blendEquation(gl.FUNC_ADD);\n    gl.blendFunc(gl.ONE, gl.ONE);\n  };\n\n  this._edgeForceMesh = new graphicGL.Mesh({\n    geometry: new graphicGL.Geometry({\n      attributes: {\n        node1: new graphicGL.Geometry.Attribute('node1', 'float', 2),\n        node2: new graphicGL.Geometry.Attribute('node2', 'float', 2),\n        weight: new graphicGL.Geometry.Attribute('weight', 'float', 1)\n      },\n      dynamic: true,\n      mainAttribute: 'node1'\n    }),\n    material: new graphicGL.Material({\n      transparent: true,\n      shader: graphicGL.createShader('ecgl.forceAtlas2.updateEdgeAttraction'),\n      blend: additiveBlend,\n      depthMask: false,\n      depthText: false\n    }),\n    mode: graphicGL.Mesh.POINTS\n  });\n  this._weightedSumMesh = new graphicGL.Mesh({\n    geometry: new graphicGL.Geometry({\n      attributes: {\n        node: new graphicGL.Geometry.Attribute('node', 'float', 2)\n      },\n      dynamic: true,\n      mainAttribute: 'node'\n    }),\n    material: new graphicGL.Material({\n      transparent: true,\n      shader: graphicGL.createShader('ecgl.forceAtlas2.calcWeightedSum'),\n      blend: additiveBlend,\n      depthMask: false,\n      depthText: false\n    }),\n    mode: graphicGL.Mesh.POINTS\n  });\n  this._framebuffer = new FrameBuffer({\n    depthBuffer: false\n  });\n  this._dummyCamera = new graphicGL.OrthographicCamera({\n    left: -1,\n    right: 1,\n    top: 1,\n    bottom: -1,\n    near: 0,\n    far: 100\n  });\n  this._globalSpeed = 0;\n}\n\nForceAtlas2GPU.prototype.updateOption = function (options) {\n  // Default config\n  for (var name in defaultConfigs) {\n    this[name] = defaultConfigs[name];\n  } // Config according to data scale\n\n\n  var nNodes = this._nodes.length;\n\n  if (nNodes > 50000) {\n    this.jitterTolerence = 10;\n  } else if (nNodes > 5000) {\n    this.jitterTolerence = 1;\n  } else {\n    this.jitterTolerence = 0.1;\n  }\n\n  if (nNodes > 100) {\n    this.scaling = 2.0;\n  } else {\n    this.scaling = 10.0;\n  } // this.edgeWeightInfluence = 1;\n  // this.gravity = 1;\n  // this.strongGravityMode = false;\n\n\n  if (options) {\n    for (var name in defaultConfigs) {\n      if (options[name] != null) {\n        this[name] = options[name];\n      }\n    }\n  }\n\n  if (this.repulsionByDegree) {\n    var positionBuffer = this._positionSourceTex.pixels;\n\n    for (var i = 0; i < this._nodes.length; i++) {\n      positionBuffer[i * 4 + 2] = (this._nodes[i].degree || 0) + 1;\n    }\n  }\n};\n\nForceAtlas2GPU.prototype._updateGravityCenter = function (options) {\n  var nodes = this._nodes;\n  var edges = this._edges;\n\n  if (!this.gravityCenter) {\n    var min = [Infinity, Infinity];\n    var max = [-Infinity, -Infinity];\n\n    for (var i = 0; i < nodes.length; i++) {\n      min[0] = Math.min(nodes[i].x, min[0]);\n      min[1] = Math.min(nodes[i].y, min[1]);\n      max[0] = Math.max(nodes[i].x, max[0]);\n      max[1] = Math.max(nodes[i].y, max[1]);\n    }\n\n    this._gravityCenter = [(min[0] + max[0]) * 0.5, (min[1] + max[1]) * 0.5];\n  } else {\n    this._gravityCenter = this.gravityCenter;\n  } // Update inDegree, outDegree\n\n\n  for (var i = 0; i < edges.length; i++) {\n    var node1 = edges[i].node1;\n    var node2 = edges[i].node2;\n    nodes[node1].degree = (nodes[node1].degree || 0) + 1;\n    nodes[node2].degree = (nodes[node2].degree || 0) + 1;\n  }\n};\n/**\n * @param {Array.<Object>} [{ x, y, mass }] nodes\n * @param {Array.<Object>} [{ node1, node2, weight }] edges\n */\n\n\nForceAtlas2GPU.prototype.initData = function (nodes, edges) {\n  this._nodes = nodes;\n  this._edges = edges;\n\n  this._updateGravityCenter();\n\n  var textureWidth = Math.ceil(Math.sqrt(nodes.length));\n  var textureHeight = textureWidth;\n  var positionBuffer = new Float32Array(textureWidth * textureHeight * 4);\n\n  this._resize(textureWidth, textureHeight);\n\n  var offset = 0;\n\n  for (var i = 0; i < nodes.length; i++) {\n    var node = nodes[i];\n    positionBuffer[offset++] = node.x || 0;\n    positionBuffer[offset++] = node.y || 0;\n    positionBuffer[offset++] = node.mass || 1;\n    positionBuffer[offset++] = node.size || 1;\n  }\n\n  this._positionSourceTex.pixels = positionBuffer;\n  var edgeGeometry = this._edgeForceMesh.geometry;\n  var edgeLen = edges.length;\n  edgeGeometry.attributes.node1.init(edgeLen * 2);\n  edgeGeometry.attributes.node2.init(edgeLen * 2);\n  edgeGeometry.attributes.weight.init(edgeLen * 2);\n  var uv = [];\n\n  for (var i = 0; i < edges.length; i++) {\n    var attributes = edgeGeometry.attributes;\n    var weight = edges[i].weight;\n\n    if (weight == null) {\n      weight = 1;\n    } // Two way.\n\n\n    attributes.node1.set(i, this.getNodeUV(edges[i].node1, uv));\n    attributes.node2.set(i, this.getNodeUV(edges[i].node2, uv));\n    attributes.weight.set(i, weight);\n    attributes.node1.set(i + edgeLen, this.getNodeUV(edges[i].node2, uv));\n    attributes.node2.set(i + edgeLen, this.getNodeUV(edges[i].node1, uv));\n    attributes.weight.set(i + edgeLen, weight);\n  }\n\n  var weigtedSumGeo = this._weightedSumMesh.geometry;\n  weigtedSumGeo.attributes.node.init(nodes.length);\n\n  for (var i = 0; i < nodes.length; i++) {\n    weigtedSumGeo.attributes.node.set(i, this.getNodeUV(i, uv));\n  }\n\n  edgeGeometry.dirty();\n  weigtedSumGeo.dirty();\n\n  this._nodeRepulsionPass.material.define('fragment', 'NODE_COUNT', nodes.length);\n\n  this._nodeRepulsionPass.material.setUniform('textureSize', [textureWidth, textureHeight]);\n\n  this._inited = false;\n  this._frame = 0;\n};\n\nForceAtlas2GPU.prototype.getNodes = function () {\n  return this._nodes;\n};\n\nForceAtlas2GPU.prototype.getEdges = function () {\n  return this._edges;\n};\n\nForceAtlas2GPU.prototype.step = function (renderer) {\n  if (!this._inited) {\n    this._initFromSource(renderer);\n\n    this._inited = true;\n  }\n\n  this._frame++;\n\n  this._framebuffer.attach(this._forceTex);\n\n  this._framebuffer.bind(renderer);\n\n  var nodeRepulsionPass = this._nodeRepulsionPass; // Calc node repulsion, gravity\n\n  nodeRepulsionPass.setUniform('strongGravityMode', this.strongGravityMode);\n  nodeRepulsionPass.setUniform('gravity', this.gravity);\n  nodeRepulsionPass.setUniform('gravityCenter', this._gravityCenter);\n  nodeRepulsionPass.setUniform('scaling', this.scaling);\n  nodeRepulsionPass.setUniform('preventOverlap', this.preventOverlap);\n  nodeRepulsionPass.setUniform('positionTex', this._positionPrevTex);\n  nodeRepulsionPass.render(renderer); // Calc edge attraction force\n\n  var edgeForceMesh = this._edgeForceMesh;\n  edgeForceMesh.material.set('linLogMode', this.linLogMode);\n  edgeForceMesh.material.set('edgeWeightInfluence', this.edgeWeightInfluence);\n  edgeForceMesh.material.set('preventOverlap', this.preventOverlap);\n  edgeForceMesh.material.set('positionTex', this._positionPrevTex);\n  renderer.gl.enable(renderer.gl.BLEND);\n  renderer.renderPass([edgeForceMesh], this._dummyCamera); // Calc weighted sum.\n\n  this._framebuffer.attach(this._weightedSumTex);\n\n  renderer.gl.clearColor(0, 0, 0, 0);\n  renderer.gl.clear(renderer.gl.COLOR_BUFFER_BIT);\n  renderer.gl.enable(renderer.gl.BLEND);\n  var weightedSumMesh = this._weightedSumMesh;\n  weightedSumMesh.material.set('positionTex', this._positionPrevTex);\n  weightedSumMesh.material.set('forceTex', this._forceTex);\n  weightedSumMesh.material.set('forcePrevTex', this._forcePrevTex);\n  renderer.renderPass([weightedSumMesh], this._dummyCamera); // Calc global speed.\n\n  this._framebuffer.attach(this._globalSpeedTex);\n\n  var globalSpeedPass = this._globalSpeedPass;\n  globalSpeedPass.setUniform('globalSpeedPrevTex', this._globalSpeedPrevTex);\n  globalSpeedPass.setUniform('weightedSumTex', this._weightedSumTex);\n  globalSpeedPass.setUniform('jitterTolerence', this.jitterTolerence);\n  renderer.gl.disable(renderer.gl.BLEND);\n  globalSpeedPass.render(renderer); // Update position.\n\n  var positionPass = this._positionPass;\n\n  this._framebuffer.attach(this._positionTex);\n\n  positionPass.setUniform('globalSpeedTex', this._globalSpeedTex);\n  positionPass.setUniform('positionTex', this._positionPrevTex);\n  positionPass.setUniform('forceTex', this._forceTex);\n  positionPass.setUniform('forcePrevTex', this._forcePrevTex);\n  positionPass.render(renderer);\n\n  this._framebuffer.unbind(renderer);\n\n  this._swapTexture();\n};\n\nForceAtlas2GPU.prototype.update = function (renderer, steps, cb) {\n  if (steps == null) {\n    steps = 1;\n  }\n\n  steps = Math.max(steps, 1);\n\n  for (var i = 0; i < steps; i++) {\n    this.step(renderer);\n  }\n\n  cb && cb();\n};\n\nForceAtlas2GPU.prototype.getNodePositionTexture = function () {\n  return this._inited // Texture already been swapped.\n  ? this._positionPrevTex : this._positionSourceTex;\n};\n\nForceAtlas2GPU.prototype.getNodeUV = function (nodeIndex, uv) {\n  uv = uv || [];\n  var textureWidth = this._positionTex.width;\n  var textureHeight = this._positionTex.height;\n  uv[0] = nodeIndex % textureWidth / (textureWidth - 1);\n  uv[1] = Math.floor(nodeIndex / textureWidth) / (textureHeight - 1) || 0;\n  return uv;\n};\n\nForceAtlas2GPU.prototype.getNodePosition = function (renderer, out) {\n  var positionArr = this._positionArr;\n  var width = this._positionTex.width;\n  var height = this._positionTex.height;\n  var size = width * height;\n\n  if (!positionArr || positionArr.length !== size * 4) {\n    positionArr = this._positionArr = new Float32Array(size * 4);\n  }\n\n  this._framebuffer.bind(renderer);\n\n  this._framebuffer.attach(this._positionPrevTex);\n\n  renderer.gl.readPixels(0, 0, width, height, renderer.gl.RGBA, renderer.gl.FLOAT, positionArr);\n\n  this._framebuffer.unbind(renderer);\n\n  if (!out) {\n    out = new Float32Array(this._nodes.length * 2);\n  }\n\n  for (var i = 0; i < this._nodes.length; i++) {\n    out[i * 2] = positionArr[i * 4];\n    out[i * 2 + 1] = positionArr[i * 4 + 1];\n  }\n\n  return out;\n};\n\nForceAtlas2GPU.prototype.getTextureData = function (renderer, textureName) {\n  var tex = this['_' + textureName + 'Tex'];\n  var width = tex.width;\n  var height = tex.height;\n\n  this._framebuffer.bind(renderer);\n\n  this._framebuffer.attach(tex);\n\n  var arr = new Float32Array(width * height * 4);\n  renderer.gl.readPixels(0, 0, width, height, renderer.gl.RGBA, renderer.gl.FLOAT, arr);\n\n  this._framebuffer.unbind(renderer);\n\n  return arr;\n};\n\nForceAtlas2GPU.prototype.getTextureSize = function () {\n  return {\n    width: this._positionTex.width,\n    height: this._positionTex.height\n  };\n};\n\nForceAtlas2GPU.prototype.isFinished = function (maxSteps) {\n  return this._frame > maxSteps;\n};\n\nForceAtlas2GPU.prototype._swapTexture = function () {\n  var tmp = this._positionPrevTex;\n  this._positionPrevTex = this._positionTex;\n  this._positionTex = tmp;\n  var tmp = this._forcePrevTex;\n  this._forcePrevTex = this._forceTex;\n  this._forceTex = tmp;\n  var tmp = this._globalSpeedPrevTex;\n  this._globalSpeedPrevTex = this._globalSpeedTex;\n  this._globalSpeedTex = tmp;\n};\n\nForceAtlas2GPU.prototype._initFromSource = function (renderer) {\n  this._framebuffer.attach(this._positionPrevTex);\n\n  this._framebuffer.bind(renderer);\n\n  this._copyPass.setUniform('texture', this._positionSourceTex);\n\n  this._copyPass.render(renderer);\n\n  renderer.gl.clearColor(0, 0, 0, 0);\n\n  this._framebuffer.attach(this._forcePrevTex);\n\n  renderer.gl.clear(renderer.gl.COLOR_BUFFER_BIT);\n\n  this._framebuffer.attach(this._globalSpeedPrevTex);\n\n  renderer.gl.clear(renderer.gl.COLOR_BUFFER_BIT);\n\n  this._framebuffer.unbind(renderer);\n};\n\nForceAtlas2GPU.prototype._resize = function (width, height) {\n  ['_positionSourceTex', '_positionTex', '_positionPrevTex', '_forceTex', '_forcePrevTex'].forEach(function (texName) {\n    this[texName].width = width;\n    this[texName].height = height;\n    this[texName].dirty();\n  }, this);\n};\n\nForceAtlas2GPU.prototype.dispose = function (renderer) {\n  this._framebuffer.dispose(renderer);\n\n  this._copyPass.dispose(renderer);\n\n  this._nodeRepulsionPass.dispose(renderer);\n\n  this._positionPass.dispose(renderer);\n\n  this._globalSpeedPass.dispose(renderer);\n\n  this._edgeForceMesh.geometry.dispose(renderer);\n\n  this._weightedSumMesh.geometry.dispose(renderer);\n\n  this._positionSourceTex.dispose(renderer);\n\n  this._positionTex.dispose(renderer);\n\n  this._positionPrevTex.dispose(renderer);\n\n  this._forceTex.dispose(renderer);\n\n  this._forcePrevTex.dispose(renderer);\n\n  this._weightedSumTex.dispose(renderer);\n\n  this._globalSpeedTex.dispose(renderer);\n\n  this._globalSpeedPrevTex.dispose(renderer);\n};\n\nexport default ForceAtlas2GPU;", "/****************************\n * Vector2 math functions\n ***************************/\nfunction forceAtlas2Worker() {\n  var vec2 = {\n    create: function () {\n      return new Float32Array(2);\n    },\n    dist: function (a, b) {\n      var x = b[0] - a[0];\n      var y = b[1] - a[1];\n      return Math.sqrt(x * x + y * y);\n    },\n    len: function (a) {\n      var x = a[0];\n      var y = a[1];\n      return Math.sqrt(x * x + y * y);\n    },\n    scaleAndAdd: function (out, a, b, scale) {\n      out[0] = a[0] + b[0] * scale;\n      out[1] = a[1] + b[1] * scale;\n      return out;\n    },\n    scale: function (out, a, b) {\n      out[0] = a[0] * b;\n      out[1] = a[1] * b;\n      return out;\n    },\n    add: function (out, a, b) {\n      out[0] = a[0] + b[0];\n      out[1] = a[1] + b[1];\n      return out;\n    },\n    sub: function (out, a, b) {\n      out[0] = a[0] - b[0];\n      out[1] = a[1] - b[1];\n      return out;\n    },\n    normalize: function (out, a) {\n      var x = a[0];\n      var y = a[1];\n      var len = x * x + y * y;\n\n      if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n        out[0] = a[0] * len;\n        out[1] = a[1] * len;\n      }\n\n      return out;\n    },\n    negate: function (out, a) {\n      out[0] = -a[0];\n      out[1] = -a[1];\n      return out;\n    },\n    copy: function (out, a) {\n      out[0] = a[0];\n      out[1] = a[1];\n      return out;\n    },\n    set: function (out, x, y) {\n      out[0] = x;\n      out[1] = y;\n      return out;\n    }\n  };\n  /****************************\n   * Class: Region\n   ***************************/\n\n  function Region() {\n    this.subRegions = [];\n    this.nSubRegions = 0;\n    this.node = null;\n    this.mass = 0;\n    this.centerOfMass = null;\n    this.bbox = new Float32Array(4);\n    this.size = 0;\n  }\n\n  var regionProto = Region.prototype; // Reset before update\n\n  regionProto.beforeUpdate = function () {\n    for (var i = 0; i < this.nSubRegions; i++) {\n      this.subRegions[i].beforeUpdate();\n    }\n\n    this.mass = 0;\n\n    if (this.centerOfMass) {\n      this.centerOfMass[0] = 0;\n      this.centerOfMass[1] = 0;\n    }\n\n    this.nSubRegions = 0;\n    this.node = null;\n  }; // Clear after update\n\n\n  regionProto.afterUpdate = function () {\n    this.subRegions.length = this.nSubRegions;\n\n    for (var i = 0; i < this.nSubRegions; i++) {\n      this.subRegions[i].afterUpdate();\n    }\n  };\n\n  regionProto.addNode = function (node) {\n    if (this.nSubRegions === 0) {\n      if (this.node == null) {\n        this.node = node;\n        return;\n      } // Already have node, subdivide self.\n      else {\n          this._addNodeToSubRegion(this.node);\n\n          this.node = null;\n        }\n    }\n\n    this._addNodeToSubRegion(node);\n\n    this._updateCenterOfMass(node);\n  };\n\n  regionProto.findSubRegion = function (x, y) {\n    for (var i = 0; i < this.nSubRegions; i++) {\n      var region = this.subRegions[i];\n\n      if (region.contain(x, y)) {\n        return region;\n      }\n    }\n  };\n\n  regionProto.contain = function (x, y) {\n    return this.bbox[0] <= x && this.bbox[2] >= x && this.bbox[1] <= y && this.bbox[3] >= y;\n  };\n\n  regionProto.setBBox = function (minX, minY, maxX, maxY) {\n    // Min\n    this.bbox[0] = minX;\n    this.bbox[1] = minY; // Max\n\n    this.bbox[2] = maxX;\n    this.bbox[3] = maxY;\n    this.size = (maxX - minX + maxY - minY) / 2;\n  };\n\n  regionProto._newSubRegion = function () {\n    var subRegion = this.subRegions[this.nSubRegions];\n\n    if (!subRegion) {\n      subRegion = new Region();\n      this.subRegions[this.nSubRegions] = subRegion;\n    }\n\n    this.nSubRegions++;\n    return subRegion;\n  };\n\n  regionProto._addNodeToSubRegion = function (node) {\n    var subRegion = this.findSubRegion(node.position[0], node.position[1]);\n    var bbox = this.bbox;\n\n    if (!subRegion) {\n      var cx = (bbox[0] + bbox[2]) / 2;\n      var cy = (bbox[1] + bbox[3]) / 2;\n      var w = (bbox[2] - bbox[0]) / 2;\n      var h = (bbox[3] - bbox[1]) / 2;\n      var xi = node.position[0] >= cx ? 1 : 0;\n      var yi = node.position[1] >= cy ? 1 : 0;\n\n      var subRegion = this._newSubRegion(); // Min\n\n\n      subRegion.setBBox( // Min\n      xi * w + bbox[0], yi * h + bbox[1], // Max\n      (xi + 1) * w + bbox[0], (yi + 1) * h + bbox[1]);\n    }\n\n    subRegion.addNode(node);\n  };\n\n  regionProto._updateCenterOfMass = function (node) {\n    // Incrementally update\n    if (this.centerOfMass == null) {\n      this.centerOfMass = new Float32Array(2);\n    }\n\n    var x = this.centerOfMass[0] * this.mass;\n    var y = this.centerOfMass[1] * this.mass;\n    x += node.position[0] * node.mass;\n    y += node.position[1] * node.mass;\n    this.mass += node.mass;\n    this.centerOfMass[0] = x / this.mass;\n    this.centerOfMass[1] = y / this.mass;\n  };\n  /****************************\n   * Class: Graph Node\n   ***************************/\n\n\n  function GraphNode() {\n    this.position = new Float32Array(2);\n    this.force = vec2.create();\n    this.forcePrev = vec2.create(); // If repulsionByDegree is true\n    //  mass = inDegree + outDegree + 1\n    // Else\n    //  mass is manually set\n\n    this.mass = 1;\n    this.inDegree = 0;\n    this.outDegree = 0; // Optional\n    // this.size = 1;\n  }\n  /****************************\n   * Class: Graph Edge\n   ***************************/\n\n\n  function GraphEdge(source, target) {\n    this.source = source;\n    this.target = target;\n    this.weight = 1;\n  }\n  /****************************\n   * Class: ForceStlas2\n   ***************************/\n\n\n  function ForceAtlas2() {\n    //-------------\n    // Configs\n    // If auto settings is true\n    //  barnesHutOptimize,\n    //  barnesHutTheta,\n    //  scaling,\n    //  jitterTolerence\n    // Will be set by the system automatically\n    //  preventOverlap will be set false\n    //  if node size is not given\n    this.autoSettings = true; // Barnes Hut\n    // http://arborjs.org/docs/barnes-hut\n\n    this.barnesHutOptimize = true;\n    this.barnesHutTheta = 1.5; // Force Atlas2 Configs\n\n    this.repulsionByDegree = true;\n    this.linLogMode = false;\n    this.strongGravityMode = false;\n    this.gravity = 1.0;\n    this.scaling = 1.0;\n    this.edgeWeightInfluence = 1.0;\n    this.jitterTolerence = 0.1; // TODO\n\n    this.preventOverlap = false;\n    this.dissuadeHubs = false; //\n\n    this.rootRegion = new Region();\n    this.rootRegion.centerOfMass = vec2.create();\n    this.nodes = [];\n    this.edges = [];\n    this.bbox = new Float32Array(4);\n    this.gravityCenter = null;\n    this._massArr = null;\n    this._swingingArr = null;\n    this._sizeArr = null;\n    this._globalSpeed = 0;\n  }\n\n  var forceAtlas2Proto = ForceAtlas2.prototype;\n\n  forceAtlas2Proto.initNodes = function (positionArr, massArr, sizeArr) {\n    var nNodes = massArr.length;\n    this.nodes.length = 0;\n    var haveSize = typeof sizeArr != 'undefined';\n\n    for (var i = 0; i < nNodes; i++) {\n      var node = new GraphNode();\n      node.position[0] = positionArr[i * 2];\n      node.position[1] = positionArr[i * 2 + 1];\n      node.mass = massArr[i];\n\n      if (haveSize) {\n        node.size = sizeArr[i];\n      }\n\n      this.nodes.push(node);\n    }\n\n    this._massArr = massArr;\n    this._swingingArr = new Float32Array(nNodes);\n\n    if (haveSize) {\n      this._sizeArr = sizeArr;\n    }\n  };\n\n  forceAtlas2Proto.initEdges = function (edgeArr, edgeWeightArr) {\n    var nEdges = edgeArr.length / 2;\n    this.edges.length = 0;\n\n    for (var i = 0; i < nEdges; i++) {\n      var sIdx = edgeArr[i * 2];\n      var tIdx = edgeArr[i * 2 + 1];\n      var sNode = this.nodes[sIdx];\n      var tNode = this.nodes[tIdx];\n\n      if (!sNode || !tNode) {\n        console.error('Node not exists, try initNodes before initEdges');\n        return;\n      }\n\n      sNode.outDegree++;\n      tNode.inDegree++;\n      var edge = new GraphEdge(sNode, tNode);\n\n      if (edgeWeightArr) {\n        edge.weight = edgeWeightArr[i];\n      }\n\n      this.edges.push(edge);\n    }\n  };\n\n  forceAtlas2Proto.updateSettings = function () {\n    if (this.repulsionByDegree) {\n      for (var i = 0; i < this.nodes.length; i++) {\n        var node = this.nodes[i];\n        node.mass = node.inDegree + node.outDegree + 1;\n      }\n    } else {\n      for (var i = 0; i < this.nodes.length; i++) {\n        var node = this.nodes[i];\n        node.mass = this._massArr[i];\n      }\n    }\n  };\n\n  forceAtlas2Proto.update = function () {\n    var nNodes = this.nodes.length;\n    this.updateSettings();\n    this.updateBBox(); // Update region\n\n    if (this.barnesHutOptimize) {\n      this.rootRegion.setBBox(this.bbox[0], this.bbox[1], this.bbox[2], this.bbox[3]);\n      this.rootRegion.beforeUpdate();\n\n      for (var i = 0; i < nNodes; i++) {\n        this.rootRegion.addNode(this.nodes[i]);\n      }\n\n      this.rootRegion.afterUpdate();\n    } // Reset forces\n\n\n    for (var i = 0; i < nNodes; i++) {\n      var node = this.nodes[i];\n      vec2.copy(node.forcePrev, node.force);\n      vec2.set(node.force, 0, 0);\n    } // Compute forces\n    // Repulsion\n\n\n    for (var i = 0; i < nNodes; i++) {\n      var na = this.nodes[i];\n\n      if (this.barnesHutOptimize) {\n        this.applyRegionToNodeRepulsion(this.rootRegion, na);\n      } else {\n        for (var j = i + 1; j < nNodes; j++) {\n          var nb = this.nodes[j];\n          this.applyNodeToNodeRepulsion(na, nb, false);\n        }\n      } // Gravity\n\n\n      if (this.gravity > 0) {\n        if (this.strongGravityMode) {\n          this.applyNodeStrongGravity(na);\n        } else {\n          this.applyNodeGravity(na);\n        }\n      }\n    } // Attraction\n\n\n    for (var i = 0; i < this.edges.length; i++) {\n      this.applyEdgeAttraction(this.edges[i]);\n    } // Handle swinging\n\n\n    var swingWeightedSum = 0;\n    var tractionWeightedSum = 0;\n    var tmp = vec2.create();\n\n    for (var i = 0; i < nNodes; i++) {\n      var node = this.nodes[i];\n      var swing = vec2.dist(node.force, node.forcePrev);\n      swingWeightedSum += swing * node.mass;\n      vec2.add(tmp, node.force, node.forcePrev);\n      var traction = vec2.len(tmp) * 0.5;\n      tractionWeightedSum += traction * node.mass; // Save the value for using later\n\n      this._swingingArr[i] = swing;\n    }\n\n    var globalSpeed = this.jitterTolerence * this.jitterTolerence * tractionWeightedSum / swingWeightedSum; // NB: During our tests we observed that an excessive rise of the global speed could have a negative impact.\n    // That’s why we limited the increase of global speed s(t)(G) to 50% of the previous step s(t−1)(G).\n\n    if (this._globalSpeed > 0) {\n      globalSpeed = Math.min(globalSpeed / this._globalSpeed, 1.5) * this._globalSpeed;\n    }\n\n    this._globalSpeed = globalSpeed; // Apply forces\n\n    for (var i = 0; i < nNodes; i++) {\n      var node = this.nodes[i];\n      var swing = this._swingingArr[i];\n      var speed = 0.1 * globalSpeed / (1 + globalSpeed * Math.sqrt(swing)); // Additional constraint to prevent local speed gets too high\n\n      var df = vec2.len(node.force);\n\n      if (df > 0) {\n        speed = Math.min(df * speed, 10) / df;\n        vec2.scaleAndAdd(node.position, node.position, node.force, speed);\n      }\n    }\n  };\n\n  forceAtlas2Proto.applyRegionToNodeRepulsion = function () {\n    var v = vec2.create();\n    return function applyRegionToNodeRepulsion(region, node) {\n      if (region.node) {\n        // Region is a leaf\n        this.applyNodeToNodeRepulsion(region.node, node, true);\n      } else {\n        vec2.sub(v, node.position, region.centerOfMass);\n        var d2 = v[0] * v[0] + v[1] * v[1];\n\n        if (d2 > this.barnesHutTheta * region.size * region.size) {\n          var factor = this.scaling * node.mass * region.mass / d2;\n          vec2.scaleAndAdd(node.force, node.force, v, factor);\n        } else {\n          for (var i = 0; i < region.nSubRegions; i++) {\n            this.applyRegionToNodeRepulsion(region.subRegions[i], node);\n          }\n        }\n      }\n    };\n  }();\n\n  forceAtlas2Proto.applyNodeToNodeRepulsion = function () {\n    var v = vec2.create();\n    return function applyNodeToNodeRepulsion(na, nb, oneWay) {\n      if (na == nb) {\n        return;\n      }\n\n      vec2.sub(v, na.position, nb.position);\n      var d2 = v[0] * v[0] + v[1] * v[1]; // PENDING\n\n      if (d2 === 0) {\n        return;\n      }\n\n      var factor;\n\n      if (this.preventOverlap) {\n        var d = Math.sqrt(d2);\n        d = d - na.size - nb.size;\n\n        if (d > 0) {\n          factor = this.scaling * na.mass * nb.mass / (d * d);\n        } else if (d < 0) {\n          // A stronger repulsion if overlap\n          factor = this.scaling * 100 * na.mass * nb.mass;\n        } else {\n          // No repulsion\n          return;\n        }\n      } else {\n        // Divide factor by an extra `d` to normalize the `v`\n        factor = this.scaling * na.mass * nb.mass / d2;\n      }\n\n      vec2.scaleAndAdd(na.force, na.force, v, factor);\n      vec2.scaleAndAdd(nb.force, nb.force, v, -factor);\n    };\n  }();\n\n  forceAtlas2Proto.applyEdgeAttraction = function () {\n    var v = vec2.create();\n    return function applyEdgeAttraction(edge) {\n      var na = edge.source;\n      var nb = edge.target;\n      vec2.sub(v, na.position, nb.position);\n      var d = vec2.len(v);\n      var w;\n\n      if (this.edgeWeightInfluence === 0) {\n        w = 1;\n      } else if (this.edgeWeightInfluence === 1) {\n        w = edge.weight;\n      } else {\n        w = Math.pow(edge.weight, this.edgeWeightInfluence);\n      }\n\n      var factor;\n\n      if (this.preventOverlap) {\n        d = d - na.size - nb.size;\n\n        if (d <= 0) {\n          // No attraction\n          return;\n        }\n      }\n\n      if (this.linLogMode) {\n        // Divide factor by an extra `d` to normalize the `v`\n        factor = -w * Math.log(d + 1) / (d + 1);\n      } else {\n        factor = -w;\n      }\n\n      vec2.scaleAndAdd(na.force, na.force, v, factor);\n      vec2.scaleAndAdd(nb.force, nb.force, v, -factor);\n    };\n  }();\n\n  forceAtlas2Proto.applyNodeGravity = function () {\n    var v = vec2.create();\n    return function (node) {\n      vec2.sub(v, this.gravityCenter, node.position);\n      var d = vec2.len(v);\n      vec2.scaleAndAdd(node.force, node.force, v, this.gravity * node.mass / (d + 1));\n    };\n  }();\n\n  forceAtlas2Proto.applyNodeStrongGravity = function () {\n    var v = vec2.create();\n    return function (node) {\n      vec2.sub(v, this.gravityCenter, node.position);\n      vec2.scaleAndAdd(node.force, node.force, v, this.gravity * node.mass);\n    };\n  }();\n\n  forceAtlas2Proto.updateBBox = function () {\n    var minX = Infinity;\n    var minY = Infinity;\n    var maxX = -Infinity;\n    var maxY = -Infinity;\n\n    for (var i = 0; i < this.nodes.length; i++) {\n      var pos = this.nodes[i].position;\n      minX = Math.min(minX, pos[0]);\n      minY = Math.min(minY, pos[1]);\n      maxX = Math.max(maxX, pos[0]);\n      maxY = Math.max(maxY, pos[1]);\n    }\n\n    this.bbox[0] = minX;\n    this.bbox[1] = minY;\n    this.bbox[2] = maxX;\n    this.bbox[3] = maxY;\n  };\n\n  forceAtlas2Proto.getGlobalSpeed = function () {\n    return this._globalSpeed;\n  };\n  /****************************\n   * Main process\n   ***************************/\n\n\n  var forceAtlas2 = null;\n\n  self.onmessage = function (e) {\n    switch (e.data.cmd) {\n      case 'init':\n        forceAtlas2 = new ForceAtlas2();\n        forceAtlas2.initNodes(e.data.nodesPosition, e.data.nodesMass, e.data.nodesSize);\n        forceAtlas2.initEdges(e.data.edges, e.data.edgesWeight);\n        break;\n\n      case 'updateConfig':\n        if (forceAtlas2) {\n          for (var name in e.data.config) {\n            forceAtlas2[name] = e.data.config[name];\n          }\n        }\n\n        break;\n\n      case 'update':\n        var steps = e.data.steps;\n\n        if (forceAtlas2) {\n          for (var i = 0; i < steps; i++) {\n            forceAtlas2.update();\n          }\n\n          var nNodes = forceAtlas2.nodes.length;\n          var positionArr = new Float32Array(nNodes * 2); // Callback\n\n          for (var i = 0; i < nNodes; i++) {\n            var node = forceAtlas2.nodes[i];\n            positionArr[i * 2] = node.position[0];\n            positionArr[i * 2 + 1] = node.position[1];\n          }\n\n          self.postMessage({\n            buffer: positionArr.buffer,\n            globalSpeed: forceAtlas2.getGlobalSpeed()\n          }, [positionArr.buffer]);\n        } else {\n          // Not initialzied yet\n          var emptyArr = new Float32Array(); // Post transfer object\n\n          self.postMessage({\n            buffer: emptyArr.buffer,\n            globalSpeed: forceAtlas2.getGlobalSpeed()\n          }, [emptyArr.buffer]);\n        }\n\n        break;\n    }\n  };\n}\n\nexport default forceAtlas2Worker;", "import Texture2D from 'claygl/src/Texture2D';\nimport Texture from 'claygl/src/Texture';\nimport workerFunc from './forceAtlas2Worker.js';\nvar workerUrl = workerFunc.toString();\nworkerUrl = workerUrl.slice(workerUrl.indexOf('{') + 1, workerUrl.lastIndexOf('}'));\nvar defaultConfigs = {\n  barnesHutOptimize: true,\n  barnesHutTheta: 1.5,\n  repulsionByDegree: true,\n  linLogMode: false,\n  strongGravityMode: false,\n  gravity: 1.0,\n  scaling: 1.0,\n  edgeWeightInfluence: 1.0,\n  jitterTolerence: 0.1,\n  preventOverlap: false,\n  dissuadeHubs: false,\n  gravityCenter: null\n};\n\nvar ForceAtlas2 = function (options) {\n  for (var name in defaultConfigs) {\n    this[name] = defaultConfigs[name];\n  }\n\n  if (options) {\n    for (var name in options) {\n      this[name] = options[name];\n    }\n  }\n\n  this._nodes = [];\n  this._edges = [];\n  this._disposed = false;\n  this._positionTex = new Texture2D({\n    type: Texture.FLOAT,\n    flipY: false,\n    minFilter: Texture.NEAREST,\n    magFilter: Texture.NEAREST\n  });\n};\n\nForceAtlas2.prototype.initData = function (nodes, edges) {\n  var bb = new Blob([workerUrl]);\n  var blobURL = window.URL.createObjectURL(bb);\n  this._worker = new Worker(blobURL);\n  this._worker.onmessage = this._$onupdate.bind(this);\n  this._nodes = nodes;\n  this._edges = edges;\n  this._frame = 0;\n  var nNodes = nodes.length;\n  var nEdges = edges.length;\n  var positionArr = new Float32Array(nNodes * 2);\n  var massArr = new Float32Array(nNodes);\n  var sizeArr = new Float32Array(nNodes);\n  var edgeArr = new Float32Array(nEdges * 2);\n  var edgeWeightArr = new Float32Array(nEdges);\n\n  for (var i = 0; i < nodes.length; i++) {\n    var node = nodes[i];\n    positionArr[i * 2] = node.x;\n    positionArr[i * 2 + 1] = node.y;\n    massArr[i] = node.mass == null ? 1 : node.mass;\n    sizeArr[i] = node.size == null ? 1 : node.size;\n  }\n\n  for (var i = 0; i < edges.length; i++) {\n    var edge = edges[i];\n    var source = edge.node1;\n    var target = edge.node2;\n    edgeArr[i * 2] = source;\n    edgeArr[i * 2 + 1] = target;\n    edgeWeightArr[i] = edge.weight == null ? 1 : edge.weight;\n  }\n\n  var textureWidth = Math.ceil(Math.sqrt(nodes.length));\n  var textureHeight = textureWidth;\n  var pixels = new Float32Array(textureWidth * textureHeight * 4);\n  var positionTex = this._positionTex;\n  positionTex.width = textureWidth;\n  positionTex.height = textureHeight;\n  positionTex.pixels = pixels;\n\n  this._worker.postMessage({\n    cmd: 'init',\n    nodesPosition: positionArr,\n    nodesMass: massArr,\n    nodesSize: sizeArr,\n    edges: edgeArr,\n    edgesWeight: edgeWeightArr\n  });\n\n  this._globalSpeed = Infinity;\n};\n\nForceAtlas2.prototype.updateOption = function (options) {\n  var config = {}; // Default config\n\n  for (var name in defaultConfigs) {\n    config[name] = defaultConfigs[name];\n  }\n\n  var nodes = this._nodes;\n  var edges = this._edges; // Config according to data scale\n\n  var nNodes = nodes.length;\n\n  if (nNodes > 50000) {\n    config.jitterTolerence = 10;\n  } else if (nNodes > 5000) {\n    config.jitterTolerence = 1;\n  } else {\n    config.jitterTolerence = 0.1;\n  }\n\n  if (nNodes > 100) {\n    config.scaling = 2.0;\n  } else {\n    config.scaling = 10.0;\n  }\n\n  if (nNodes > 1000) {\n    config.barnesHutOptimize = true;\n  } else {\n    config.barnesHutOptimize = false;\n  }\n\n  if (options) {\n    for (var name in defaultConfigs) {\n      if (options[name] != null) {\n        config[name] = options[name];\n      }\n    }\n  }\n\n  if (!config.gravityCenter) {\n    var min = [Infinity, Infinity];\n    var max = [-Infinity, -Infinity];\n\n    for (var i = 0; i < nodes.length; i++) {\n      min[0] = Math.min(nodes[i].x, min[0]);\n      min[1] = Math.min(nodes[i].y, min[1]);\n      max[0] = Math.max(nodes[i].x, max[0]);\n      max[1] = Math.max(nodes[i].y, max[1]);\n    }\n\n    config.gravityCenter = [(min[0] + max[0]) * 0.5, (min[1] + max[1]) * 0.5];\n  } // Update inDegree, outDegree\n\n\n  for (var i = 0; i < edges.length; i++) {\n    var node1 = edges[i].node1;\n    var node2 = edges[i].node2;\n    nodes[node1].degree = (nodes[node1].degree || 0) + 1;\n    nodes[node2].degree = (nodes[node2].degree || 0) + 1;\n  }\n\n  if (this._worker) {\n    this._worker.postMessage({\n      cmd: 'updateConfig',\n      config: config\n    });\n  }\n}; // Steps per call, to keep sync with rendering\n\n\nForceAtlas2.prototype.update = function (renderer, steps, cb) {\n  if (steps == null) {\n    steps = 1;\n  }\n\n  steps = Math.max(steps, 1);\n  this._frame += steps;\n  this._onupdate = cb;\n\n  if (this._worker) {\n    this._worker.postMessage({\n      cmd: 'update',\n      steps: Math.round(steps)\n    });\n  }\n};\n\nForceAtlas2.prototype._$onupdate = function (e) {\n  // Incase the worker keep postMessage of last frame after it is disposed\n  if (this._disposed) {\n    return;\n  }\n\n  var positionArr = new Float32Array(e.data.buffer);\n  this._globalSpeed = e.data.globalSpeed;\n  this._positionArr = positionArr;\n\n  this._updateTexture(positionArr);\n\n  this._onupdate && this._onupdate();\n};\n\nForceAtlas2.prototype.getNodePositionTexture = function () {\n  return this._positionTex;\n};\n\nForceAtlas2.prototype.getNodeUV = function (nodeIndex, uv) {\n  uv = uv || [];\n  var textureWidth = this._positionTex.width;\n  var textureHeight = this._positionTex.height;\n  uv[0] = nodeIndex % textureWidth / (textureWidth - 1);\n  uv[1] = Math.floor(nodeIndex / textureWidth) / (textureHeight - 1);\n  return uv;\n};\n\nForceAtlas2.prototype.getNodes = function () {\n  return this._nodes;\n};\n\nForceAtlas2.prototype.getEdges = function () {\n  return this._edges;\n};\n\nForceAtlas2.prototype.isFinished = function (maxSteps) {\n  return this._frame > maxSteps;\n};\n\nForceAtlas2.prototype.getNodePosition = function (renderer, out) {\n  if (!out) {\n    out = new Float32Array(this._nodes.length * 2);\n  }\n\n  if (this._positionArr) {\n    for (var i = 0; i < this._positionArr.length; i++) {\n      out[i] = this._positionArr[i];\n    }\n  }\n\n  return out;\n};\n\nForceAtlas2.prototype._updateTexture = function (positionArr) {\n  var pixels = this._positionTex.pixels;\n  var offset = 0;\n\n  for (var i = 0; i < positionArr.length;) {\n    pixels[offset++] = positionArr[i++];\n    pixels[offset++] = positionArr[i++];\n    pixels[offset++] = 1;\n    pixels[offset++] = 1;\n  }\n\n  this._positionTex.dirty();\n};\n\nForceAtlas2.prototype.dispose = function (renderer) {\n  this._disposed = true;\n  this._worker = null;\n};\n\nexport default ForceAtlas2;", "import Base from 'claygl/src/core/Base';\nimport retrieve from './retrieve';\n/**\n * @alias module:echarts-gl/util/Roam2DControl\n */\n\nvar Roam2DControl = Base.extend(function () {\n  return {\n    /**\n     * @type {module:zrender~ZRender}\n     */\n    zr: null,\n\n    /**\n     * @type {module:echarts-gl/core/ViewGL}\n     */\n    viewGL: null,\n    minZoom: 0.2,\n    maxZoom: 5,\n    _needsUpdate: false,\n    _dx: 0,\n    _dy: 0,\n    _zoom: 1\n  };\n}, function () {\n  // Each Roam2DControl has it's own handler\n  this._mouseDownHandler = this._mouseDownHandler.bind(this);\n  this._mouseWheelHandler = this._mouseWheelHandler.bind(this);\n  this._mouseMoveHandler = this._mouseMoveHandler.bind(this);\n  this._mouseUpHandler = this._mouseUpHandler.bind(this);\n  this._update = this._update.bind(this);\n}, {\n  init: function () {\n    var zr = this.zr;\n    zr.on('mousedown', this._mouseDownHandler);\n    zr.on('mousewheel', this._mouseWheelHandler);\n    zr.on('globalout', this._mouseUpHandler);\n    zr.animation.on('frame', this._update);\n  },\n  setTarget: function (target) {\n    this._target = target;\n  },\n  setZoom: function (zoom) {\n    this._zoom = Math.max(Math.min(zoom, this.maxZoom), this.minZoom);\n    this._needsUpdate = true;\n  },\n  setOffset: function (offset) {\n    this._dx = offset[0];\n    this._dy = offset[1];\n    this._needsUpdate = true;\n  },\n  getZoom: function () {\n    return this._zoom;\n  },\n  getOffset: function () {\n    return [this._dx, this._dy];\n  },\n  _update: function () {\n    if (!this._target) {\n      return;\n    }\n\n    if (!this._needsUpdate) {\n      return;\n    }\n\n    var target = this._target;\n    var scale = this._zoom;\n    target.position.x = this._dx;\n    target.position.y = this._dy;\n    target.scale.set(scale, scale, scale);\n    this.zr.refresh();\n    this._needsUpdate = false;\n    this.trigger('update');\n  },\n  _mouseDownHandler: function (e) {\n    if (e.target) {\n      return;\n    }\n\n    var x = e.offsetX;\n    var y = e.offsetY;\n\n    if (this.viewGL && !this.viewGL.containPoint(x, y)) {\n      return;\n    }\n\n    this.zr.on('mousemove', this._mouseMoveHandler);\n    this.zr.on('mouseup', this._mouseUpHandler);\n\n    var pos = this._convertPos(x, y);\n\n    this._x = pos.x;\n    this._y = pos.y;\n  },\n  // Convert pos from screen space to viewspace.\n  _convertPos: function (x, y) {\n    var camera = this.viewGL.camera;\n    var viewport = this.viewGL.viewport; // PENDING\n\n    return {\n      x: (x - viewport.x) / viewport.width * (camera.right - camera.left) + camera.left,\n      y: (y - viewport.y) / viewport.height * (camera.bottom - camera.top) + camera.top\n    };\n  },\n  _mouseMoveHandler: function (e) {\n    var pos = this._convertPos(e.offsetX, e.offsetY);\n\n    this._dx += pos.x - this._x;\n    this._dy += pos.y - this._y;\n    this._x = pos.x;\n    this._y = pos.y;\n    this._needsUpdate = true;\n  },\n  _mouseUpHandler: function (e) {\n    this.zr.off('mousemove', this._mouseMoveHandler);\n    this.zr.off('mouseup', this._mouseUpHandler);\n  },\n  _mouseWheelHandler: function (e) {\n    e = e.event;\n    var delta = e.wheelDelta // Webkit\n    || -e.detail; // Firefox\n\n    if (delta === 0) {\n      return;\n    }\n\n    var x = e.offsetX;\n    var y = e.offsetY;\n\n    if (this.viewGL && !this.viewGL.containPoint(x, y)) {\n      return;\n    }\n\n    var zoomScale = delta > 0 ? 1.1 : 0.9;\n    var newZoom = Math.max(Math.min(this._zoom * zoomScale, this.maxZoom), this.minZoom);\n    zoomScale = newZoom / this._zoom;\n\n    var pos = this._convertPos(x, y);\n\n    var fixX = (pos.x - this._dx) * (zoomScale - 1);\n    var fixY = (pos.y - this._dy) * (zoomScale - 1);\n    this._dx -= fixX;\n    this._dy -= fixY;\n    this._zoom = newZoom;\n    this._needsUpdate = true;\n  },\n  dispose: function () {\n    var zr = this.zr;\n    zr.off('mousedown', this._mouseDownHandler);\n    zr.off('mousemove', this._mouseMoveHandler);\n    zr.off('mouseup', this._mouseUpHandler);\n    zr.off('mousewheel', this._mouseWheelHandler);\n    zr.off('globalout', this._mouseUpHandler);\n    zr.animation.off('frame', this._update);\n  }\n});\nexport default Roam2DControl;", "export default \"@export ecgl.lines2D.vertex\\n\\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\\n\\nattribute vec2 position: POSITION;\\nattribute vec4 a_Color : COLOR;\\nvarying vec4 v_Color;\\n\\n#ifdef POSITIONTEXTURE_ENABLED\\nuniform sampler2D positionTexture;\\n#endif\\n\\nvoid main()\\n{\\n gl_Position = worldViewProjection * vec4(position, -10.0, 1.0);\\n\\n v_Color = a_Color;\\n}\\n\\n@end\\n\\n@export ecgl.lines2D.fragment\\n\\nuniform vec4 color : [1.0, 1.0, 1.0, 1.0];\\n\\nvarying vec4 v_Color;\\n\\nvoid main()\\n{\\n gl_FragColor = color * v_Color;\\n}\\n@end\\n\\n\\n@export ecgl.meshLines2D.vertex\\n\\nattribute vec2 position: POSITION;\\nattribute vec2 normal;\\nattribute float offset;\\nattribute vec4 a_Color : COLOR;\\n\\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\\nuniform vec4 viewport : VIEWPORT;\\n\\nvarying vec4 v_Color;\\nvarying float v_Miter;\\n\\nvoid main()\\n{\\n vec4 p2 = worldViewProjection * vec4(position + normal, -10.0, 1.0);\\n gl_Position = worldViewProjection * vec4(position, -10.0, 1.0);\\n\\n p2.xy /= p2.w;\\n gl_Position.xy /= gl_Position.w;\\n\\n vec2 N = normalize(p2.xy - gl_Position.xy);\\n gl_Position.xy += N * offset / viewport.zw * 2.0;\\n\\n gl_Position.xy *= gl_Position.w;\\n\\n v_Color = a_Color;\\n}\\n@end\\n\\n\\n@export ecgl.meshLines2D.fragment\\n\\nuniform vec4 color : [1.0, 1.0, 1.0, 1.0];\\n\\nvarying vec4 v_Color;\\nvarying float v_Miter;\\n\\nvoid main()\\n{\\n gl_FragColor = color * v_Color;\\n}\\n\\n@end\";", "import * as echarts from 'echarts/lib/echarts';\nimport { getLayoutRect } from 'echarts/lib/util/layout';\nimport graphicGL from '../../util/graphicGL';\nimport ViewGL from '../../core/ViewGL';\nimport Lines2DGeometry from '../../util/geometry/Lines2D';\nimport retrieve from '../../util/retrieve';\nimport ForceAtlas2GPU from './ForceAtlas2GPU';\nimport ForceAtlas2 from './ForceAtlas2';\nimport requestAnimationFrame from 'zrender/lib/animation/requestAnimationFrame';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nimport { getItemVisualColor, getItemVisualOpacity } from '../../util/visual';\nvar vec2 = glmatrix.vec2;\nimport Roam2DControl from '../../util/Roam2DControl';\nimport PointsBuilder from '../common/PointsBuilder';\nimport lines2DGLSL from '../../util/shader/lines2D.glsl.js';\ngraphicGL.Shader.import(lines2DGLSL);\nvar globalLayoutId = 1;\nexport default echarts.ChartView.extend({\n  type: 'graphGL',\n  __ecgl__: true,\n  init: function (ecModel, api) {\n    this.groupGL = new graphicGL.Node();\n    this.viewGL = new ViewGL('orthographic');\n    this.viewGL.camera.left = this.viewGL.camera.right = 0;\n    this.viewGL.add(this.groupGL);\n    this._pointsBuilder = new PointsBuilder(true, api); // Mesh used during force directed layout.\n\n    this._forceEdgesMesh = new graphicGL.Mesh({\n      material: new graphicGL.Material({\n        shader: graphicGL.createShader('ecgl.forceAtlas2.edges'),\n        transparent: true,\n        depthMask: false,\n        depthTest: false\n      }),\n      $ignorePicking: true,\n      geometry: new graphicGL.Geometry({\n        attributes: {\n          node: new graphicGL.Geometry.Attribute('node', 'float', 2),\n          color: new graphicGL.Geometry.Attribute('color', 'float', 4, 'COLOR')\n        },\n        dynamic: true,\n        mainAttribute: 'node'\n      }),\n      renderOrder: -1,\n      mode: graphicGL.Mesh.LINES\n    }); // Mesh used after force directed layout.\n\n    this._edgesMesh = new graphicGL.Mesh({\n      material: new graphicGL.Material({\n        shader: graphicGL.createShader('ecgl.meshLines2D'),\n        transparent: true,\n        depthMask: false,\n        depthTest: false\n      }),\n      $ignorePicking: true,\n      geometry: new Lines2DGeometry({\n        useNativeLine: false,\n        dynamic: true\n      }),\n      renderOrder: -1,\n      culling: false\n    });\n    this._layoutId = 0;\n    this._control = new Roam2DControl({\n      zr: api.getZr(),\n      viewGL: this.viewGL\n    });\n\n    this._control.setTarget(this.groupGL);\n\n    this._control.init();\n\n    this._clickHandler = this._clickHandler.bind(this);\n  },\n  render: function (seriesModel, ecModel, api) {\n    this.groupGL.add(this._pointsBuilder.rootNode);\n    this._model = seriesModel;\n    this._api = api;\n\n    this._initLayout(seriesModel, ecModel, api);\n\n    this._pointsBuilder.update(seriesModel, ecModel, api);\n\n    if (!(this._forceLayoutInstance instanceof ForceAtlas2GPU)) {\n      this.groupGL.remove(this._forceEdgesMesh);\n    }\n\n    this._updateCamera(seriesModel, api);\n\n    this._control.off('update');\n\n    this._control.on('update', function () {\n      api.dispatchAction({\n        type: 'graphGLRoam',\n        seriesId: seriesModel.id,\n        zoom: this._control.getZoom(),\n        offset: this._control.getOffset()\n      });\n\n      this._pointsBuilder.updateView(this.viewGL.camera);\n    }, this);\n\n    this._control.setZoom(retrieve.firstNotNull(seriesModel.get('zoom'), 1));\n\n    this._control.setOffset(seriesModel.get('offset') || [0, 0]);\n\n    var mesh = this._pointsBuilder.getPointsMesh();\n\n    mesh.off('mousemove', this._mousemoveHandler);\n    mesh.off('mouseout', this._mouseOutHandler, this);\n    api.getZr().off('click', this._clickHandler);\n    this._pointsBuilder.highlightOnMouseover = true;\n\n    if (seriesModel.get('focusNodeAdjacency')) {\n      var focusNodeAdjacencyOn = seriesModel.get('focusNodeAdjacencyOn');\n\n      if (focusNodeAdjacencyOn === 'click') {\n        // Remove default emphasis effect\n        api.getZr().on('click', this._clickHandler);\n      } else if (focusNodeAdjacencyOn === 'mouseover') {\n        mesh.on('mousemove', this._mousemoveHandler, this);\n        mesh.on('mouseout', this._mouseOutHandler, this);\n        this._pointsBuilder.highlightOnMouseover = false;\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn('Unkown focusNodeAdjacencyOn value \\s' + focusNodeAdjacencyOn);\n        }\n      }\n    } // Reset\n\n\n    this._lastMouseOverDataIndex = -1;\n  },\n  _clickHandler: function (e) {\n    if (this._layouting) {\n      return;\n    }\n\n    var dataIndex = this._pointsBuilder.getPointsMesh().dataIndex;\n\n    if (dataIndex >= 0) {\n      this._api.dispatchAction({\n        type: 'graphGLFocusNodeAdjacency',\n        seriesId: this._model.id,\n        dataIndex: dataIndex\n      });\n    } else {\n      this._api.dispatchAction({\n        type: 'graphGLUnfocusNodeAdjacency',\n        seriesId: this._model.id\n      });\n    }\n  },\n  _mousemoveHandler: function (e) {\n    if (this._layouting) {\n      return;\n    }\n\n    var dataIndex = this._pointsBuilder.getPointsMesh().dataIndex;\n\n    if (dataIndex >= 0) {\n      if (dataIndex !== this._lastMouseOverDataIndex) {\n        this._api.dispatchAction({\n          type: 'graphGLFocusNodeAdjacency',\n          seriesId: this._model.id,\n          dataIndex: dataIndex\n        });\n      }\n    } else {\n      this._mouseOutHandler(e);\n    }\n\n    this._lastMouseOverDataIndex = dataIndex;\n  },\n  _mouseOutHandler: function (e) {\n    if (this._layouting) {\n      return;\n    }\n\n    this._api.dispatchAction({\n      type: 'graphGLUnfocusNodeAdjacency',\n      seriesId: this._model.id\n    });\n\n    this._lastMouseOverDataIndex = -1;\n  },\n  _updateForceEdgesGeometry: function (edges, seriesModel) {\n    var geometry = this._forceEdgesMesh.geometry;\n    var edgeData = seriesModel.getEdgeData();\n    var offset = 0;\n    var layoutInstance = this._forceLayoutInstance;\n    var vertexCount = edgeData.count() * 2;\n    geometry.attributes.node.init(vertexCount);\n    geometry.attributes.color.init(vertexCount);\n    edgeData.each(function (idx) {\n      var edge = edges[idx];\n      geometry.attributes.node.set(offset, layoutInstance.getNodeUV(edge.node1));\n      geometry.attributes.node.set(offset + 1, layoutInstance.getNodeUV(edge.node2));\n      var color = getItemVisualColor(edgeData, edge.dataIndex);\n      var colorArr = graphicGL.parseColor(color);\n      colorArr[3] *= retrieve.firstNotNull(getItemVisualOpacity(edgeData, edge.dataIndex), 1);\n      geometry.attributes.color.set(offset, colorArr);\n      geometry.attributes.color.set(offset + 1, colorArr);\n      offset += 2;\n    });\n    geometry.dirty();\n  },\n  _updateMeshLinesGeometry: function () {\n    var edgeData = this._model.getEdgeData();\n\n    var geometry = this._edgesMesh.geometry;\n\n    var edgeData = this._model.getEdgeData();\n\n    var points = this._model.getData().getLayout('points');\n\n    geometry.resetOffset();\n    geometry.setVertexCount(edgeData.count() * geometry.getLineVertexCount());\n    geometry.setTriangleCount(edgeData.count() * geometry.getLineTriangleCount());\n    var p0 = [];\n    var p1 = [];\n    var lineWidthQuery = ['lineStyle', 'width'];\n    this._originalEdgeColors = new Float32Array(edgeData.count() * 4);\n    this._edgeIndicesMap = new Float32Array(edgeData.count());\n    edgeData.each(function (idx) {\n      var edge = edgeData.graph.getEdgeByIndex(idx);\n      var idx1 = edge.node1.dataIndex * 2;\n      var idx2 = edge.node2.dataIndex * 2;\n      p0[0] = points[idx1];\n      p0[1] = points[idx1 + 1];\n      p1[0] = points[idx2];\n      p1[1] = points[idx2 + 1];\n      var color = getItemVisualColor(edgeData, edge.dataIndex);\n      var colorArr = graphicGL.parseColor(color);\n      colorArr[3] *= retrieve.firstNotNull(getItemVisualOpacity(edgeData, edge.dataIndex), 1);\n      var itemModel = edgeData.getItemModel(edge.dataIndex);\n\n      var lineWidth = retrieve.firstNotNull(itemModel.get(lineWidthQuery), 1) * this._api.getDevicePixelRatio();\n\n      geometry.addLine(p0, p1, colorArr, lineWidth);\n\n      for (var k = 0; k < 4; k++) {\n        this._originalEdgeColors[edge.dataIndex * 4 + k] = colorArr[k];\n      }\n\n      this._edgeIndicesMap[edge.dataIndex] = idx;\n    }, this);\n    geometry.dirty();\n  },\n  _updateForceNodesGeometry: function (nodeData) {\n    var pointsMesh = this._pointsBuilder.getPointsMesh();\n\n    var pos = [];\n\n    for (var i = 0; i < nodeData.count(); i++) {\n      this._forceLayoutInstance.getNodeUV(i, pos);\n\n      pointsMesh.geometry.attributes.position.set(i, pos);\n    }\n\n    pointsMesh.geometry.dirty('position');\n  },\n  _initLayout: function (seriesModel, ecModel, api) {\n    var layout = seriesModel.get('layout');\n    var graph = seriesModel.getGraph();\n    var boxLayoutOption = seriesModel.getBoxLayoutParams();\n    var viewport = getLayoutRect(boxLayoutOption, {\n      width: api.getWidth(),\n      height: api.getHeight()\n    });\n\n    if (layout === 'force') {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn('Currently only forceAtlas2 layout supported.');\n      }\n\n      layout = 'forceAtlas2';\n    } // Stop previous layout\n\n\n    this.stopLayout(seriesModel, ecModel, api, {\n      beforeLayout: true\n    });\n    var nodeData = seriesModel.getData();\n    var edgeData = seriesModel.getData();\n\n    if (layout === 'forceAtlas2') {\n      var layoutModel = seriesModel.getModel('forceAtlas2');\n      var layoutInstance = this._forceLayoutInstance;\n      var nodes = [];\n      var edges = [];\n      var nodeDataExtent = nodeData.getDataExtent('value');\n      var edgeDataExtent = edgeData.getDataExtent('value');\n      var edgeWeightRange = retrieve.firstNotNull(layoutModel.get('edgeWeight'), 1.0);\n      var nodeWeightRange = retrieve.firstNotNull(layoutModel.get('nodeWeight'), 1.0);\n\n      if (typeof edgeWeightRange === 'number') {\n        edgeWeightRange = [edgeWeightRange, edgeWeightRange];\n      }\n\n      if (typeof nodeWeightRange === 'number') {\n        nodeWeightRange = [nodeWeightRange, nodeWeightRange];\n      }\n\n      var offset = 0;\n      var nodesIndicesMap = {};\n      var layoutPoints = new Float32Array(nodeData.count() * 2);\n      graph.eachNode(function (node) {\n        var dataIndex = node.dataIndex;\n        var value = nodeData.get('value', dataIndex);\n        var x;\n        var y;\n\n        if (nodeData.hasItemOption) {\n          var itemModel = nodeData.getItemModel(dataIndex);\n          x = itemModel.get('x');\n          y = itemModel.get('y');\n        }\n\n        if (x == null) {\n          // Random in rectangle\n          x = viewport.x + Math.random() * viewport.width;\n          y = viewport.y + Math.random() * viewport.height;\n        }\n\n        layoutPoints[offset * 2] = x;\n        layoutPoints[offset * 2 + 1] = y;\n        nodesIndicesMap[node.id] = offset++;\n        var mass = echarts.number.linearMap(value, nodeDataExtent, nodeWeightRange);\n\n        if (isNaN(mass)) {\n          if (!isNaN(nodeWeightRange[0])) {\n            mass = nodeWeightRange[0];\n          } else {\n            mass = 1;\n          }\n        }\n\n        nodes.push({\n          x: x,\n          y: y,\n          mass: mass,\n          size: nodeData.getItemVisual(dataIndex, 'symbolSize')\n        });\n      });\n      nodeData.setLayout('points', layoutPoints);\n      graph.eachEdge(function (edge) {\n        var dataIndex = edge.dataIndex;\n        var value = nodeData.get('value', dataIndex);\n        var weight = echarts.number.linearMap(value, edgeDataExtent, edgeWeightRange);\n\n        if (isNaN(weight)) {\n          if (!isNaN(edgeWeightRange[0])) {\n            weight = edgeWeightRange[0];\n          } else {\n            weight = 1;\n          }\n        }\n\n        edges.push({\n          node1: nodesIndicesMap[edge.node1.id],\n          node2: nodesIndicesMap[edge.node2.id],\n          weight: weight,\n          dataIndex: dataIndex\n        });\n      });\n\n      if (!layoutInstance) {\n        var isGPU = layoutModel.get('GPU');\n\n        if (this._forceLayoutInstance) {\n          if (isGPU && !(this._forceLayoutInstance instanceof ForceAtlas2GPU) || !isGPU && !(this._forceLayoutInstance instanceof ForceAtlas2)) {\n            // Mark to dispose\n            this._forceLayoutInstanceToDispose = this._forceLayoutInstance;\n          }\n        }\n\n        layoutInstance = this._forceLayoutInstance = isGPU ? new ForceAtlas2GPU() : new ForceAtlas2();\n      }\n\n      layoutInstance.initData(nodes, edges);\n      layoutInstance.updateOption(layoutModel.option); // Update lines geometry after first layout;\n\n      this._updateForceEdgesGeometry(layoutInstance.getEdges(), seriesModel);\n\n      this._updatePositionTexture();\n\n      api.dispatchAction({\n        type: 'graphGLStartLayout',\n        from: this.uid\n      });\n    } else {\n      var layoutPoints = new Float32Array(nodeData.count() * 2);\n      var offset = 0;\n      graph.eachNode(function (node) {\n        var dataIndex = node.dataIndex;\n        var x;\n        var y;\n\n        if (nodeData.hasItemOption) {\n          var itemModel = nodeData.getItemModel(dataIndex);\n          x = itemModel.get('x');\n          y = itemModel.get('y');\n        }\n\n        layoutPoints[offset++] = x;\n        layoutPoints[offset++] = y;\n      });\n      nodeData.setLayout('points', layoutPoints);\n\n      this._updateAfterLayout(seriesModel, ecModel, api);\n    }\n  },\n  _updatePositionTexture: function () {\n    var positionTex = this._forceLayoutInstance.getNodePositionTexture();\n\n    this._pointsBuilder.setPositionTexture(positionTex);\n\n    this._forceEdgesMesh.material.set('positionTex', positionTex);\n  },\n  startLayout: function (seriesModel, ecModel, api, payload) {\n    if (payload && payload.from != null && payload.from !== this.uid) {\n      return;\n    }\n\n    var viewGL = this.viewGL;\n    var api = this._api;\n    var layoutInstance = this._forceLayoutInstance;\n\n    var data = this._model.getData();\n\n    var layoutModel = this._model.getModel('forceAtlas2');\n\n    if (!layoutInstance) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error('None layout don\\'t have startLayout action');\n      }\n\n      return;\n    }\n\n    this.groupGL.remove(this._edgesMesh);\n    this.groupGL.add(this._forceEdgesMesh);\n\n    if (!this._forceLayoutInstance) {\n      return;\n    }\n\n    this._updateForceNodesGeometry(seriesModel.getData());\n\n    this._pointsBuilder.hideLabels();\n\n    var self = this;\n    var layoutId = this._layoutId = globalLayoutId++;\n    var maxSteps = layoutModel.getShallow('maxSteps');\n    var steps = layoutModel.getShallow('steps');\n    var stepsCount = 0;\n    var syncStepCount = Math.max(steps * 2, 20);\n\n    var doLayout = function (layoutId) {\n      if (layoutId !== self._layoutId) {\n        return;\n      }\n\n      if (layoutInstance.isFinished(maxSteps)) {\n        api.dispatchAction({\n          type: 'graphGLStopLayout',\n          from: self.uid\n        });\n        api.dispatchAction({\n          type: 'graphGLFinishLayout',\n          points: data.getLayout('points'),\n          from: self.uid\n        });\n        return;\n      }\n\n      layoutInstance.update(viewGL.layer.renderer, steps, function () {\n        self._updatePositionTexture(); // PENDING Performance.\n\n\n        stepsCount += steps; // Sync posiiton every 20 steps.\n\n        if (stepsCount >= syncStepCount) {\n          self._syncNodePosition(seriesModel);\n\n          stepsCount = 0;\n        } // Position texture will been swapped. set every time.\n\n\n        api.getZr().refresh();\n        requestAnimationFrame(function () {\n          doLayout(layoutId);\n        });\n      });\n    };\n\n    requestAnimationFrame(function () {\n      if (self._forceLayoutInstanceToDispose) {\n        self._forceLayoutInstanceToDispose.dispose(viewGL.layer.renderer);\n\n        self._forceLayoutInstanceToDispose = null;\n      }\n\n      doLayout(layoutId);\n    });\n    this._layouting = true;\n  },\n  stopLayout: function (seriesModel, ecModel, api, payload) {\n    if (payload && payload.from != null && payload.from !== this.uid) {\n      return;\n    }\n\n    this._layoutId = 0;\n    this.groupGL.remove(this._forceEdgesMesh);\n    this.groupGL.add(this._edgesMesh);\n\n    if (!this._forceLayoutInstance) {\n      return;\n    }\n\n    if (!this.viewGL.layer) {\n      return;\n    }\n\n    if (!(payload && payload.beforeLayout)) {\n      this._syncNodePosition(seriesModel);\n\n      this._updateAfterLayout(seriesModel, ecModel, api);\n    }\n\n    this._api.getZr().refresh();\n\n    this._layouting = false;\n  },\n  _syncNodePosition: function (seriesModel) {\n    var points = this._forceLayoutInstance.getNodePosition(this.viewGL.layer.renderer);\n\n    seriesModel.getData().setLayout('points', points);\n    seriesModel.setNodePosition(points);\n  },\n  _updateAfterLayout: function (seriesModel, ecModel, api) {\n    this._updateMeshLinesGeometry();\n\n    this._pointsBuilder.removePositionTexture();\n\n    this._pointsBuilder.updateLayout(seriesModel, ecModel, api);\n\n    this._pointsBuilder.updateView(this.viewGL.camera);\n\n    this._pointsBuilder.updateLabels();\n\n    this._pointsBuilder.showLabels();\n  },\n  focusNodeAdjacency: function (seriesModel, ecModel, api, payload) {\n    var data = this._model.getData();\n\n    this._downplayAll();\n\n    var dataIndex = payload.dataIndex;\n    var graph = data.graph;\n    var focusNodes = [];\n    var node = graph.getNodeByIndex(dataIndex);\n    focusNodes.push(node);\n    node.edges.forEach(function (edge) {\n      if (edge.dataIndex < 0) {\n        return;\n      }\n\n      edge.node1 !== node && focusNodes.push(edge.node1);\n      edge.node2 !== node && focusNodes.push(edge.node2);\n    }, this);\n\n    this._pointsBuilder.fadeOutAll(0.05);\n\n    this._fadeOutEdgesAll(0.05);\n\n    focusNodes.forEach(function (node) {\n      this._pointsBuilder.highlight(data, node.dataIndex);\n    }, this);\n\n    this._pointsBuilder.updateLabels(focusNodes.map(function (node) {\n      return node.dataIndex;\n    }));\n\n    var focusEdges = [];\n    node.edges.forEach(function (edge) {\n      if (edge.dataIndex >= 0) {\n        this._highlightEdge(edge.dataIndex);\n\n        focusEdges.push(edge);\n      }\n    }, this);\n    this._focusNodes = focusNodes;\n    this._focusEdges = focusEdges;\n  },\n  unfocusNodeAdjacency: function (seriesModel, ecModel, api, payload) {\n    this._downplayAll();\n\n    this._pointsBuilder.fadeInAll();\n\n    this._fadeInEdgesAll();\n\n    this._pointsBuilder.updateLabels();\n  },\n  _highlightEdge: function (dataIndex) {\n    var itemModel = this._model.getEdgeData().getItemModel(dataIndex);\n\n    var emphasisColor = graphicGL.parseColor(itemModel.get('emphasis.lineStyle.color') || itemModel.get('lineStyle.color'));\n    var emphasisOpacity = retrieve.firstNotNull(itemModel.get('emphasis.lineStyle.opacity'), itemModel.get('lineStyle.opacity'), 1);\n    emphasisColor[3] *= emphasisOpacity;\n\n    this._edgesMesh.geometry.setItemColor(this._edgeIndicesMap[dataIndex], emphasisColor);\n  },\n  _downplayAll: function () {\n    if (this._focusNodes) {\n      this._focusNodes.forEach(function (node) {\n        this._pointsBuilder.downplay(this._model.getData(), node.dataIndex);\n      }, this);\n    }\n\n    if (this._focusEdges) {\n      this._focusEdges.forEach(function (edge) {\n        this._downplayEdge(edge.dataIndex);\n      }, this);\n    }\n  },\n  _downplayEdge: function (dataIndex) {\n    var color = this._getColor(dataIndex, []);\n\n    this._edgesMesh.geometry.setItemColor(this._edgeIndicesMap[dataIndex], color);\n  },\n  _setEdgeFade: function () {\n    var color = [];\n    return function (dataIndex, percent) {\n      this._getColor(dataIndex, color);\n\n      color[3] *= percent;\n\n      this._edgesMesh.geometry.setItemColor(this._edgeIndicesMap[dataIndex], color);\n    };\n  }(),\n  _getColor: function (dataIndex, out) {\n    for (var i = 0; i < 4; i++) {\n      out[i] = this._originalEdgeColors[dataIndex * 4 + i];\n    }\n\n    return out;\n  },\n  _fadeOutEdgesAll: function (percent) {\n    var graph = this._model.getData().graph;\n\n    graph.eachEdge(function (edge) {\n      this._setEdgeFade(edge.dataIndex, percent);\n    }, this);\n  },\n  _fadeInEdgesAll: function () {\n    this._fadeOutEdgesAll(1);\n  },\n  _updateCamera: function (seriesModel, api) {\n    this.viewGL.setViewport(0, 0, api.getWidth(), api.getHeight(), api.getDevicePixelRatio());\n    var camera = this.viewGL.camera;\n    var nodeData = seriesModel.getData();\n    var points = nodeData.getLayout('points');\n    var min = vec2.create(Infinity, Infinity);\n    var max = vec2.create(-Infinity, -Infinity);\n    var pt = [];\n\n    for (var i = 0; i < points.length;) {\n      pt[0] = points[i++];\n      pt[1] = points[i++];\n      vec2.min(min, min, pt);\n      vec2.max(max, max, pt);\n    }\n\n    var cy = (max[1] + min[1]) / 2;\n    var cx = (max[0] + min[0]) / 2; // Only fit the camera when graph is not in the center.\n    // PENDING\n\n    if (cx > camera.left && cx < camera.right && cy < camera.bottom && cy > camera.top) {\n      return;\n    } // Scale a bit\n\n\n    var width = Math.max(max[0] - min[0], 10); // Keep aspect\n\n    var height = width / api.getWidth() * api.getHeight();\n    width *= 1.4;\n    height *= 1.4;\n    min[0] -= width * 0.2;\n    camera.left = min[0];\n    camera.top = cy - height / 2;\n    camera.bottom = cy + height / 2;\n    camera.right = width + min[0];\n    camera.near = 0;\n    camera.far = 100;\n  },\n  dispose: function () {\n    var renderer = this.viewGL.layer.renderer;\n\n    if (this._forceLayoutInstance) {\n      this._forceLayoutInstance.dispose(renderer);\n    }\n\n    this.groupGL.removeAll(); // Stop layout.\n\n    this._layoutId = -1;\n\n    this._pointsBuilder.dispose();\n  },\n  remove: function () {\n    this.groupGL.removeAll();\n\n    this._control.dispose();\n  }\n});", "// TODO ECharts GL must be imported whatever component,charts is imported.\nimport '../../echarts-gl';\nimport * as echarts from 'echarts/lib/echarts';\nimport GraphGLSeries from './GraphGLSeries';\nimport GraphGLView from './GraphGLView';\n\nfunction normalize(a) {\n  if (!(a instanceof Array)) {\n    a = [a, a];\n  }\n\n  return a;\n}\n\nexport function install(registers) {\n  registers.registerChartView(GraphGLView);\n  registers.registerSeriesModel(GraphGLSeries);\n  registers.registerVisual(function (ecModel) {\n    const paletteScope = {};\n    ecModel.eachSeriesByType('graphGL', function (seriesModel) {\n      var categoriesData = seriesModel.getCategoriesData();\n      var data = seriesModel.getData();\n      var categoryNameIdxMap = {};\n      categoriesData.each(function (idx) {\n        var name = categoriesData.getName(idx); // Add prefix to avoid conflict with Object.prototype.\n\n        categoryNameIdxMap['ec-' + name] = idx;\n        var itemModel = categoriesData.getItemModel(idx);\n        var style = itemModel.getModel('itemStyle').getItemStyle();\n\n        if (!style.fill) {\n          // Get color from palette.\n          style.fill = seriesModel.getColorFromPalette(name, paletteScope);\n        }\n\n        categoriesData.setItemVisual(idx, 'style', style);\n        var symbolVisualList = ['symbol', 'symbolSize', 'symbolKeepAspect'];\n\n        for (let i = 0; i < symbolVisualList.length; i++) {\n          var symbolVisual = itemModel.getShallow(symbolVisualList[i], true);\n\n          if (symbolVisual != null) {\n            categoriesData.setItemVisual(idx, symbolVisualList[i], symbolVisual);\n          }\n        }\n      }); // Assign category color to visual\n\n      if (categoriesData.count()) {\n        data.each(function (idx) {\n          var model = data.getItemModel(idx);\n          let categoryIdx = model.getShallow('category');\n\n          if (categoryIdx != null) {\n            if (typeof categoryIdx === 'string') {\n              categoryIdx = categoryNameIdxMap['ec-' + categoryIdx];\n            }\n\n            var categoryStyle = categoriesData.getItemVisual(categoryIdx, 'style');\n            var style = data.ensureUniqueItemVisual(idx, 'style');\n            echarts.util.extend(style, categoryStyle);\n            var visualList = ['symbol', 'symbolSize', 'symbolKeepAspect'];\n\n            for (let i = 0; i < visualList.length; i++) {\n              data.setItemVisual(idx, visualList[i], categoriesData.getItemVisual(categoryIdx, visualList[i]));\n            }\n          }\n        });\n      }\n    });\n  });\n  registers.registerVisual(function (ecModel) {\n    ecModel.eachSeriesByType('graphGL', function (seriesModel) {\n      var graph = seriesModel.getGraph();\n      var edgeData = seriesModel.getEdgeData();\n      var symbolType = normalize(seriesModel.get('edgeSymbol'));\n      var symbolSize = normalize(seriesModel.get('edgeSymbolSize'));\n      edgeData.setVisual('drawType', 'stroke'); // var colorQuery = ['lineStyle', 'color'];\n      // var opacityQuery = ['lineStyle', 'opacity'];\n\n      edgeData.setVisual('fromSymbol', symbolType && symbolType[0]);\n      edgeData.setVisual('toSymbol', symbolType && symbolType[1]);\n      edgeData.setVisual('fromSymbolSize', symbolSize && symbolSize[0]);\n      edgeData.setVisual('toSymbolSize', symbolSize && symbolSize[1]);\n      edgeData.setVisual('style', seriesModel.getModel('lineStyle').getLineStyle());\n      edgeData.each(function (idx) {\n        var itemModel = edgeData.getItemModel(idx);\n        var edge = graph.getEdgeByIndex(idx);\n        var symbolType = normalize(itemModel.getShallow('symbol', true));\n        var symbolSize = normalize(itemModel.getShallow('symbolSize', true)); // Edge visual must after node visual\n\n        var style = itemModel.getModel('lineStyle').getLineStyle();\n        var existsStyle = edgeData.ensureUniqueItemVisual(idx, 'style');\n        echarts.util.extend(existsStyle, style);\n\n        switch (existsStyle.stroke) {\n          case 'source':\n            {\n              var nodeStyle = edge.node1.getVisual('style');\n              existsStyle.stroke = nodeStyle && nodeStyle.fill;\n              break;\n            }\n\n          case 'target':\n            {\n              var nodeStyle = edge.node2.getVisual('style');\n              existsStyle.stroke = nodeStyle && nodeStyle.fill;\n              break;\n            }\n        }\n\n        symbolType[0] && edge.setVisual('fromSymbol', symbolType[0]);\n        symbolType[1] && edge.setVisual('toSymbol', symbolType[1]);\n        symbolSize[0] && edge.setVisual('fromSymbolSize', symbolSize[0]);\n        symbolSize[1] && edge.setVisual('toSymbolSize', symbolSize[1]);\n      });\n    });\n  });\n  registers.registerAction({\n    type: 'graphGLRoam',\n    event: 'graphglroam',\n    update: 'series.graphGL:roam'\n  }, function (payload, ecModel) {\n    ecModel.eachComponent({\n      mainType: 'series',\n      query: payload\n    }, function (componentModel) {\n      componentModel.setView(payload);\n    });\n  });\n\n  function noop() {}\n\n  registers.registerAction({\n    type: 'graphGLStartLayout',\n    event: 'graphgllayoutstarted',\n    update: 'series.graphGL:startLayout'\n  }, noop);\n  registers.registerAction({\n    type: 'graphGLStopLayout',\n    event: 'graphgllayoutstopped',\n    update: 'series.graphGL:stopLayout'\n  }, noop);\n  registers.registerAction({\n    type: 'graphGLFocusNodeAdjacency',\n    event: 'graphGLFocusNodeAdjacency',\n    update: 'series.graphGL:focusNodeAdjacency'\n  }, noop);\n  registers.registerAction({\n    type: 'graphGLUnfocusNodeAdjacency',\n    event: 'graphGLUnfocusNodeAdjacency',\n    update: 'series.graphGL:unfocusNodeAdjacency'\n  }, noop);\n}", "import * as echarts from 'echarts/lib/echarts';\nexport default echarts.SeriesModel.extend({\n  type: 'series.flowGL',\n  dependencies: ['geo', 'grid', 'bmap'],\n  visualStyleAccessPath: 'itemStyle',\n  getInitialData: function (option, ecModel) {\n    var coordType = this.get('coordinateSystem'); // TODO hotfix for the bug in echarts that get coord dimensions is undefined.\n\n    var coordSysDimensions = coordType === 'geo' ? ['lng', 'lat'] : echarts.getCoordinateSystemDimensions(coordType) || ['x', 'y'];\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (coordSysDimensions.length > 2) {\n        throw new Error('flowGL can only be used on 2d coordinate systems.');\n      }\n    }\n\n    coordSysDimensions.push('vx', 'vy');\n    var dimensions = echarts.helper.createDimensions(this.getSource(), {\n      coordDimensions: coordSysDimensions,\n      encodeDefine: this.get('encode'),\n      dimensionsDefine: this.get('dimensions')\n    });\n    var data = new echarts.List(dimensions, this);\n    data.initData(this.getSource());\n    return data;\n  },\n  defaultOption: {\n    coordinateSystem: 'cartesian2d',\n    zlevel: 10,\n    supersampling: 1,\n    // 128x128 particles\n    particleType: 'point',\n    particleDensity: 128,\n    particleSize: 1,\n    particleSpeed: 1,\n    particleTrail: 2,\n    colorTexture: null,\n    gridWidth: 'auto',\n    gridHeight: 'auto',\n    itemStyle: {\n      color: '#fff',\n      opacity: 0.8\n    }\n  }\n});", "/**\n * Lines geometry\n * Use screen space projected lines lineWidth > MAX_LINE_WIDTH\n * https://mattdesl.svbtle.com/drawing-lines-is-hard\n * @module echarts-gl/util/geometry/LinesGeometry\n * @author Yi Shen(http://github.com/pissang)\n */\nimport Geometry from 'claygl/src/Geometry';\nimport * as echarts from 'echarts/lib/echarts';\n/**\n * @constructor\n * @alias module:echarts-gl/chart/flowGL/Line2D\n * @extends clay.Geometry\n */\n\nvar LinesGeometry = Geometry.extend(function () {\n  return {\n    dynamic: true,\n    attributes: {\n      position: new Geometry.Attribute('position', 'float', 3, 'POSITION')\n    }\n  };\n},\n/** @lends module: echarts-gl/util/geometry/LinesGeometry.prototype */\n{\n  /**\n   * Reset offset\n   */\n  resetOffset: function () {\n    this._vertexOffset = 0;\n    this._faceOffset = 0;\n  },\n\n  /**\n   * @param {number} nVertex\n   */\n  setLineCount: function (nLine) {\n    var attributes = this.attributes;\n    var nVertex = 4 * nLine;\n    var nTriangle = 2 * nLine;\n\n    if (this.vertexCount !== nVertex) {\n      attributes.position.init(nVertex);\n    }\n\n    if (this.triangleCount !== nTriangle) {\n      if (nTriangle === 0) {\n        this.indices = null;\n      } else {\n        this.indices = this.vertexCount > 0xffff ? new Uint32Array(nTriangle * 3) : new Uint16Array(nTriangle * 3);\n      }\n    }\n  },\n  addLine: function (p) {\n    var vertexOffset = this._vertexOffset;\n    this.attributes.position.set(vertexOffset, [p[0], p[1], 1]);\n    this.attributes.position.set(vertexOffset + 1, [p[0], p[1], -1]);\n    this.attributes.position.set(vertexOffset + 2, [p[0], p[1], 2]);\n    this.attributes.position.set(vertexOffset + 3, [p[0], p[1], -2]);\n    this.setTriangleIndices(this._faceOffset++, [vertexOffset, vertexOffset + 1, vertexOffset + 2]);\n    this.setTriangleIndices(this._faceOffset++, [vertexOffset + 1, vertexOffset + 2, vertexOffset + 3]);\n    this._vertexOffset += 4;\n  }\n});\nexport default LinesGeometry;", "export default \"@export ecgl.vfParticle.particle.fragment\\n\\nuniform sampler2D particleTexture;\\nuniform sampler2D spawnTexture;\\nuniform sampler2D velocityTexture;\\n\\nuniform float deltaTime;\\nuniform float elapsedTime;\\n\\nuniform float speedScaling : 1.0;\\n\\nuniform vec2 textureSize;\\nuniform vec4 region : [0, 0, 1, 1];\\nuniform float firstFrameTime;\\n\\nvarying vec2 v_Texcoord;\\n\\n\\nvoid main()\\n{\\n vec4 p = texture2D(particleTexture, v_Texcoord);\\n bool spawn = false;\\n if (p.w <= 0.0) {\\n p = texture2D(spawnTexture, fract(v_Texcoord + elapsedTime / 10.0));\\n p.w -= firstFrameTime;\\n spawn = true;\\n }\\n vec2 v = texture2D(velocityTexture, fract(p.xy * region.zw + region.xy)).xy;\\n v = (v - 0.5) * 2.0;\\n p.z = length(v);\\n p.xy += v * deltaTime / 10.0 * speedScaling;\\n p.w -= deltaTime;\\n\\n if (spawn || p.xy != fract(p.xy)) {\\n p.z = 0.0;\\n }\\n p.xy = fract(p.xy);\\n\\n gl_FragColor = p;\\n}\\n@end\\n\\n@export ecgl.vfParticle.renderPoints.vertex\\n\\n#define PI 3.1415926\\n\\nattribute vec2 texcoord : TEXCOORD_0;\\n\\nuniform sampler2D particleTexture;\\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\\n\\nuniform float size : 1.0;\\n\\nvarying float v_Mag;\\nvarying vec2 v_Uv;\\n\\nvoid main()\\n{\\n vec4 p = texture2D(particleTexture, texcoord);\\n\\n if (p.w > 0.0 && p.z > 1e-5) {\\n gl_Position = worldViewProjection * vec4(p.xy * 2.0 - 1.0, 0.0, 1.0);\\n }\\n else {\\n gl_Position = vec4(100000.0, 100000.0, 100000.0, 1.0);\\n }\\n\\n v_Mag = p.z;\\n v_Uv = p.xy;\\n\\n gl_PointSize = size;\\n}\\n\\n@end\\n\\n@export ecgl.vfParticle.renderPoints.fragment\\n\\nuniform vec4 color : [1.0, 1.0, 1.0, 1.0];\\nuniform sampler2D gradientTexture;\\nuniform sampler2D colorTexture;\\nuniform sampler2D spriteTexture;\\n\\nvarying float v_Mag;\\nvarying vec2 v_Uv;\\n\\nvoid main()\\n{\\n gl_FragColor = color;\\n#ifdef SPRITETEXTURE_ENABLED\\n gl_FragColor *= texture2D(spriteTexture, gl_PointCoord);\\n if (color.a == 0.0) {\\n discard;\\n }\\n#endif\\n#ifdef GRADIENTTEXTURE_ENABLED\\n gl_FragColor *= texture2D(gradientTexture, vec2(v_Mag, 0.5));\\n#endif\\n#ifdef COLORTEXTURE_ENABLED\\n gl_FragColor *= texture2D(colorTexture, v_Uv);\\n#endif\\n}\\n\\n@end\\n\\n@export ecgl.vfParticle.renderLines.vertex\\n\\n#define PI 3.1415926\\n\\nattribute vec3 position : POSITION;\\n\\nuniform sampler2D particleTexture;\\nuniform sampler2D prevParticleTexture;\\n\\nuniform float size : 1.0;\\nuniform vec4 vp: VIEWPORT;\\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\\n\\nvarying float v_Mag;\\nvarying vec2 v_Uv;\\n\\n@import clay.util.rand\\n\\nvoid main()\\n{\\n vec4 p = texture2D(particleTexture, position.xy);\\n vec4 p2 = texture2D(prevParticleTexture, position.xy);\\n\\n p.xy = p.xy * 2.0 - 1.0;\\n p2.xy = p2.xy * 2.0 - 1.0;\\n\\n if (p.w > 0.0 && p.z > 1e-5) {\\n vec2 dir = normalize(p.xy - p2.xy);\\n vec2 norm = vec2(dir.y / vp.z, -dir.x / vp.w) * sign(position.z) * size;\\n if (abs(position.z) == 2.0) {\\n gl_Position = vec4(p.xy + norm, 0.0, 1.0);\\n v_Uv = p.xy;\\n v_Mag = p.z;\\n }\\n else {\\n gl_Position = vec4(p2.xy + norm, 0.0, 1.0);\\n v_Mag = p2.z;\\n v_Uv = p2.xy;\\n }\\n gl_Position = worldViewProjection * gl_Position;\\n }\\n else {\\n gl_Position = vec4(100000.0, 100000.0, 100000.0, 1.0);\\n }\\n}\\n\\n@end\\n\\n@export ecgl.vfParticle.renderLines.fragment\\n\\nuniform vec4 color : [1.0, 1.0, 1.0, 1.0];\\nuniform sampler2D gradientTexture;\\nuniform sampler2D colorTexture;\\n\\nvarying float v_Mag;\\nvarying vec2 v_Uv;\\n\\nvoid main()\\n{\\n gl_FragColor = color;\\n #ifdef GRADIENTTEXTURE_ENABLED\\n gl_FragColor *= texture2D(gradientTexture, vec2(v_Mag, 0.5));\\n#endif\\n#ifdef COLORTEXTURE_ENABLED\\n gl_FragColor *= texture2D(colorTexture, v_Uv);\\n#endif\\n}\\n\\n@end\\n\";", "import Pass from 'claygl/src/compositor/Pass';\nimport Geometry from 'claygl/src/Geometry';\nimport Mesh from 'claygl/src/Mesh';\nimport Material from 'claygl/src/Material';\nimport Shader from 'claygl/src/Shader';\nimport Texture2D from 'claygl/src/Texture2D';\nimport Texture from 'claygl/src/Texture';\nimport OrthoCamera from 'claygl/src/camera/Orthographic';\nimport PlaneGeometry from 'claygl/src/geometry/Plane';\nimport FrameBuffer from 'claygl/src/FrameBuffer';\nimport Line2DGeometry from './Line2D'; // import TemporalSS from '../../effect/TemporalSuperSampling';\n\nimport vectorFieldParticleGLSL from './vectorFieldParticle.glsl.js';\nShader['import'](vectorFieldParticleGLSL);\n\nfunction createSpriteCanvas(size) {\n  var canvas = document.createElement('canvas');\n  canvas.width = canvas.height = size;\n  var ctx = canvas.getContext('2d');\n  ctx.fillStyle = '#fff';\n  ctx.arc(size / 2, size / 2, size / 2, 0, Math.PI * 2);\n  ctx.fill();\n  return canvas;\n} // import spriteUtil from '../../util/sprite';\n\n\nvar VectorFieldParticleSurface = function () {\n  /**\n   * @type {number}\n   */\n  this.motionBlurFactor = 0.99;\n  /**\n   * Vector field lookup image\n   * @type {clay.Texture2D}\n   */\n\n  this.vectorFieldTexture = new Texture2D({\n    type: Texture.FLOAT,\n    // minFilter: Texture.NEAREST,\n    // magFilter: Texture.NEAREST,\n    flipY: false\n  });\n  /**\n   * Particle life range\n   * @type {Array.<number>}\n   */\n\n  this.particleLife = [5, 20];\n  this._particleType = 'point';\n  /**\n   * @type {number}\n   */\n\n  this._particleSize = 1;\n  /**\n   * @type {Array.<number>}\n   */\n\n  this.particleColor = [1, 1, 1, 1];\n  /**\n   * @type {number}\n   */\n\n  this.particleSpeedScaling = 1.0;\n  /**\n   * @type {clay.Texture2D}\n   */\n\n  this._thisFrameTexture = null;\n  this._particlePass = null;\n  this._spawnTexture = null;\n  this._particleTexture0 = null;\n  this._particleTexture1 = null;\n  this._particlePointsMesh = null;\n  this._surfaceFrameBuffer = null;\n  this._elapsedTime = 0.0;\n  this._scene = null;\n  this._camera = null;\n  this._lastFrameTexture = null; // this._temporalSS = new TemporalSS(50);\n  // this._antialising = false;\n\n  this._supersampling = 1;\n  this._downsampleTextures = [];\n  this._width = 512;\n  this._height = 512;\n  this.init();\n};\n\nVectorFieldParticleSurface.prototype = {\n  constructor: VectorFieldParticleSurface,\n  init: function () {\n    var parameters = {\n      type: Texture.FLOAT,\n      minFilter: Texture.NEAREST,\n      magFilter: Texture.NEAREST,\n      useMipmap: false\n    };\n    this._spawnTexture = new Texture2D(parameters);\n    this._particleTexture0 = new Texture2D(parameters);\n    this._particleTexture1 = new Texture2D(parameters);\n    this._frameBuffer = new FrameBuffer({\n      depthBuffer: false\n    });\n    this._particlePass = new Pass({\n      fragment: Shader.source('ecgl.vfParticle.particle.fragment')\n    });\n\n    this._particlePass.setUniform('velocityTexture', this.vectorFieldTexture);\n\n    this._particlePass.setUniform('spawnTexture', this._spawnTexture);\n\n    this._downsamplePass = new Pass({\n      fragment: Shader.source('clay.compositor.downsample')\n    });\n    var particlePointsMesh = new Mesh({\n      // Render after last frame full quad\n      renderOrder: 10,\n      material: new Material({\n        shader: new Shader(Shader.source('ecgl.vfParticle.renderPoints.vertex'), Shader.source('ecgl.vfParticle.renderPoints.fragment'))\n      }),\n      mode: Mesh.POINTS,\n      geometry: new Geometry({\n        dynamic: true,\n        mainAttribute: 'texcoord0'\n      })\n    });\n    var particleLinesMesh = new Mesh({\n      // Render after last frame full quad\n      renderOrder: 10,\n      material: new Material({\n        shader: new Shader(Shader.source('ecgl.vfParticle.renderLines.vertex'), Shader.source('ecgl.vfParticle.renderLines.fragment'))\n      }),\n      geometry: new Line2DGeometry(),\n      culling: false\n    });\n    var lastFrameFullQuad = new Mesh({\n      material: new Material({\n        shader: new Shader(Shader.source('ecgl.color.vertex'), Shader.source('ecgl.color.fragment')) // DO NOT BLEND Blend will multiply alpha\n        // transparent: true\n\n      }),\n      geometry: new PlaneGeometry()\n    });\n    lastFrameFullQuad.material.enableTexture('diffuseMap');\n    this._particlePointsMesh = particlePointsMesh;\n    this._particleLinesMesh = particleLinesMesh;\n    this._lastFrameFullQuadMesh = lastFrameFullQuad;\n    this._camera = new OrthoCamera();\n    this._thisFrameTexture = new Texture2D();\n    this._lastFrameTexture = new Texture2D();\n  },\n  setParticleDensity: function (width, height) {\n    var nVertex = width * height;\n    var spawnTextureData = new Float32Array(nVertex * 4);\n    var off = 0;\n    var lifeRange = this.particleLife;\n\n    for (var i = 0; i < width; i++) {\n      for (var j = 0; j < height; j++, off++) {\n        // x position, range [0 - 1]\n        spawnTextureData[off * 4] = Math.random(); // y position, range [0 - 1]\n\n        spawnTextureData[off * 4 + 1] = Math.random(); // Some property\n\n        spawnTextureData[off * 4 + 2] = Math.random();\n        var life = (lifeRange[1] - lifeRange[0]) * Math.random() + lifeRange[0]; // Particle life\n\n        spawnTextureData[off * 4 + 3] = life;\n      }\n    }\n\n    if (this._particleType === 'line') {\n      this._setLineGeometry(width, height);\n    } else {\n      this._setPointsGeometry(width, height);\n    }\n\n    this._spawnTexture.width = width;\n    this._spawnTexture.height = height;\n    this._spawnTexture.pixels = spawnTextureData;\n    this._particleTexture0.width = this._particleTexture1.width = width;\n    this._particleTexture0.height = this._particleTexture1.height = height;\n\n    this._particlePass.setUniform('textureSize', [width, height]);\n  },\n  _setPointsGeometry: function (width, height) {\n    var nVertex = width * height;\n    var geometry = this._particlePointsMesh.geometry;\n    var attributes = geometry.attributes;\n    attributes.texcoord0.init(nVertex);\n    var off = 0;\n\n    for (var i = 0; i < width; i++) {\n      for (var j = 0; j < height; j++, off++) {\n        attributes.texcoord0.value[off * 2] = i / width;\n        attributes.texcoord0.value[off * 2 + 1] = j / height;\n      }\n    }\n\n    geometry.dirty();\n  },\n  _setLineGeometry: function (width, height) {\n    var nLine = width * height;\n\n    var geometry = this._getParticleMesh().geometry;\n\n    geometry.setLineCount(nLine);\n    geometry.resetOffset();\n\n    for (var i = 0; i < width; i++) {\n      for (var j = 0; j < height; j++) {\n        geometry.addLine([i / width, j / height]);\n      }\n    }\n\n    geometry.dirty();\n  },\n  _getParticleMesh: function () {\n    return this._particleType === 'line' ? this._particleLinesMesh : this._particlePointsMesh;\n  },\n  update: function (renderer, api, deltaTime, firstFrame) {\n    var particleMesh = this._getParticleMesh();\n\n    var frameBuffer = this._frameBuffer;\n    var particlePass = this._particlePass;\n\n    if (firstFrame) {\n      this._updateDownsampleTextures(renderer, api);\n    }\n\n    particleMesh.material.set('size', this._particleSize * this._supersampling);\n    particleMesh.material.set('color', this.particleColor);\n    particlePass.setUniform('speedScaling', this.particleSpeedScaling);\n    frameBuffer.attach(this._particleTexture1);\n    particlePass.setUniform('firstFrameTime', firstFrame ? (this.particleLife[1] + this.particleLife[0]) / 2 : 0);\n    particlePass.setUniform('particleTexture', this._particleTexture0);\n    particlePass.setUniform('deltaTime', deltaTime);\n    particlePass.setUniform('elapsedTime', this._elapsedTime);\n    particlePass.render(renderer, frameBuffer);\n    particleMesh.material.set('particleTexture', this._particleTexture1);\n    particleMesh.material.set('prevParticleTexture', this._particleTexture0);\n    frameBuffer.attach(this._thisFrameTexture);\n    frameBuffer.bind(renderer);\n    renderer.gl.clear(renderer.gl.DEPTH_BUFFER_BIT | renderer.gl.COLOR_BUFFER_BIT);\n    var lastFrameFullQuad = this._lastFrameFullQuadMesh;\n    lastFrameFullQuad.material.set('diffuseMap', this._lastFrameTexture);\n    lastFrameFullQuad.material.set('color', [1, 1, 1, this.motionBlurFactor]);\n\n    this._camera.update(true);\n\n    renderer.renderPass([lastFrameFullQuad, particleMesh], this._camera);\n    frameBuffer.unbind(renderer);\n\n    this._downsample(renderer);\n\n    this._swapTexture();\n\n    this._elapsedTime += deltaTime;\n  },\n  _downsample: function (renderer) {\n    var downsampleTextures = this._downsampleTextures;\n\n    if (downsampleTextures.length === 0) {\n      return;\n    }\n\n    var current = 0;\n    var sourceTexture = this._thisFrameTexture;\n    var targetTexture = downsampleTextures[current];\n\n    while (targetTexture) {\n      this._frameBuffer.attach(targetTexture);\n\n      this._downsamplePass.setUniform('texture', sourceTexture);\n\n      this._downsamplePass.setUniform('textureSize', [sourceTexture.width, sourceTexture.height]);\n\n      this._downsamplePass.render(renderer, this._frameBuffer);\n\n      sourceTexture = targetTexture;\n      targetTexture = downsampleTextures[++current];\n    }\n  },\n  getSurfaceTexture: function () {\n    var downsampleTextures = this._downsampleTextures;\n    return downsampleTextures.length > 0 ? downsampleTextures[downsampleTextures.length - 1] : this._lastFrameTexture;\n  },\n  setRegion: function (region) {\n    this._particlePass.setUniform('region', region);\n  },\n  resize: function (width, height) {\n    this._lastFrameTexture.width = width * this._supersampling;\n    this._lastFrameTexture.height = height * this._supersampling;\n    this._thisFrameTexture.width = width * this._supersampling;\n    this._thisFrameTexture.height = height * this._supersampling;\n    this._width = width;\n    this._height = height;\n  },\n  setParticleSize: function (size) {\n    var particleMesh = this._getParticleMesh();\n\n    if (size <= 2) {\n      particleMesh.material.disableTexture('spriteTexture');\n      particleMesh.material.transparent = false;\n      return;\n    }\n\n    if (!this._spriteTexture) {\n      this._spriteTexture = new Texture2D();\n    }\n\n    if (!this._spriteTexture.image || this._spriteTexture.image.width !== size) {\n      this._spriteTexture.image = createSpriteCanvas(size);\n\n      this._spriteTexture.dirty();\n    }\n\n    particleMesh.material.transparent = true;\n    particleMesh.material.enableTexture('spriteTexture');\n    particleMesh.material.set('spriteTexture', this._spriteTexture);\n    this._particleSize = size;\n  },\n  setGradientTexture: function (gradientTexture) {\n    var material = this._getParticleMesh().material;\n\n    material[gradientTexture ? 'enableTexture' : 'disableTexture']('gradientTexture');\n    material.setUniform('gradientTexture', gradientTexture);\n  },\n  setColorTextureImage: function (colorTextureImg, api) {\n    var material = this._getParticleMesh().material;\n\n    material.setTextureImage('colorTexture', colorTextureImg, api, {\n      flipY: true\n    });\n  },\n  setParticleType: function (type) {\n    this._particleType = type;\n  },\n  clearFrame: function (renderer) {\n    var frameBuffer = this._frameBuffer;\n    frameBuffer.attach(this._lastFrameTexture);\n    frameBuffer.bind(renderer);\n    renderer.gl.clear(renderer.gl.DEPTH_BUFFER_BIT | renderer.gl.COLOR_BUFFER_BIT);\n    frameBuffer.unbind(renderer);\n  },\n  setSupersampling: function (supersampling) {\n    this._supersampling = supersampling;\n    this.resize(this._width, this._height);\n  },\n  _updateDownsampleTextures: function (renderer, api) {\n    var downsampleTextures = this._downsampleTextures;\n    var upScale = Math.max(Math.floor(Math.log(this._supersampling / api.getDevicePixelRatio()) / Math.log(2)), 0);\n    var scale = 2;\n    var width = this._width * this._supersampling;\n    var height = this._height * this._supersampling;\n\n    for (var i = 0; i < upScale; i++) {\n      downsampleTextures[i] = downsampleTextures[i] || new Texture2D();\n      downsampleTextures[i].width = width / scale;\n      downsampleTextures[i].height = height / scale;\n      scale *= 2;\n    }\n\n    for (; i < downsampleTextures.length; i++) {\n      downsampleTextures[i].dispose(renderer);\n    }\n\n    downsampleTextures.length = upScale;\n  },\n  _swapTexture: function () {\n    var tmp = this._particleTexture0;\n    this._particleTexture0 = this._particleTexture1;\n    this._particleTexture1 = tmp;\n    var tmp = this._thisFrameTexture;\n    this._thisFrameTexture = this._lastFrameTexture;\n    this._lastFrameTexture = tmp;\n  },\n  dispose: function (renderer) {\n    renderer.disposeFrameBuffer(this._frameBuffer); // Dispose textures\n\n    renderer.disposeTexture(this.vectorFieldTexture);\n    renderer.disposeTexture(this._spawnTexture);\n    renderer.disposeTexture(this._particleTexture0);\n    renderer.disposeTexture(this._particleTexture1);\n    renderer.disposeTexture(this._thisFrameTexture);\n    renderer.disposeTexture(this._lastFrameTexture);\n    renderer.disposeGeometry(this._particleLinesMesh.geometry);\n    renderer.disposeGeometry(this._particlePointsMesh.geometry);\n    renderer.disposeGeometry(this._lastFrameFullQuadMesh.geometry);\n\n    if (this._spriteTexture) {\n      renderer.disposeTexture(this._spriteTexture);\n    }\n\n    this._particlePass.dispose(renderer);\n\n    this._downsamplePass.dispose(renderer);\n\n    this._downsampleTextures.forEach(function (texture) {\n      texture.dispose(renderer);\n    });\n  }\n};\nexport default VectorFieldParticleSurface;", "import * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport retrieve from '../../util/retrieve';\nimport ViewGL from '../../core/ViewGL';\nimport VectorFieldParticleSurface from './VectorFieldParticleSurface'; // TODO 百度地图不是 linear 的\n\nexport default echarts.ChartView.extend({\n  type: 'flowGL',\n  __ecgl__: true,\n  init: function (ecModel, api) {\n    this.viewGL = new ViewGL('orthographic');\n    this.groupGL = new graphicGL.Node();\n    this.viewGL.add(this.groupGL);\n    this._particleSurface = new VectorFieldParticleSurface();\n    var planeMesh = new graphicGL.Mesh({\n      geometry: new graphicGL.PlaneGeometry(),\n      material: new graphicGL.Material({\n        shader: new graphicGL.Shader({\n          vertex: graphicGL.Shader.source('ecgl.color.vertex'),\n          fragment: graphicGL.Shader.source('ecgl.color.fragment')\n        }),\n        // Must enable blending and multiply alpha.\n        // Or premultipliedAlpha will let the alpha useless.\n        transparent: true\n      })\n    });\n    planeMesh.material.enableTexture('diffuseMap');\n    this.groupGL.add(planeMesh);\n    this._planeMesh = planeMesh;\n  },\n  render: function (seriesModel, ecModel, api) {\n    var particleSurface = this._particleSurface; // Set particleType before set others.\n\n    particleSurface.setParticleType(seriesModel.get('particleType'));\n    particleSurface.setSupersampling(seriesModel.get('supersampling'));\n\n    this._updateData(seriesModel, api);\n\n    this._updateCamera(api.getWidth(), api.getHeight(), api.getDevicePixelRatio());\n\n    var particleDensity = retrieve.firstNotNull(seriesModel.get('particleDensity'), 128);\n    particleSurface.setParticleDensity(particleDensity, particleDensity);\n    var planeMesh = this._planeMesh;\n    var time = +new Date();\n    var self = this;\n    var firstFrame = true;\n    planeMesh.__percent = 0;\n    planeMesh.stopAnimation();\n    planeMesh.animate('', {\n      loop: true\n    }).when(100000, {\n      __percent: 1\n    }).during(function () {\n      var timeNow = +new Date();\n      var dTime = Math.min(timeNow - time, 20);\n      time = time + dTime;\n\n      if (self._renderer) {\n        particleSurface.update(self._renderer, api, dTime / 1000, firstFrame);\n        planeMesh.material.set('diffuseMap', particleSurface.getSurfaceTexture()); // planeMesh.material.set('diffuseMap', self._particleSurface.vectorFieldTexture);\n      }\n\n      firstFrame = false;\n    }).start();\n    var itemStyleModel = seriesModel.getModel('itemStyle');\n    var color = graphicGL.parseColor(itemStyleModel.get('color'));\n    color[3] *= retrieve.firstNotNull(itemStyleModel.get('opacity'), 1);\n    planeMesh.material.set('color', color);\n    particleSurface.setColorTextureImage(seriesModel.get('colorTexture'), api);\n    particleSurface.setParticleSize(seriesModel.get('particleSize'));\n    particleSurface.particleSpeedScaling = seriesModel.get('particleSpeed');\n    particleSurface.motionBlurFactor = 1.0 - Math.pow(0.1, seriesModel.get('particleTrail'));\n  },\n  updateTransform: function (seriesModel, ecModel, api) {\n    this._updateData(seriesModel, api);\n  },\n  afterRender: function (globeModel, ecModel, api, layerGL) {\n    var renderer = layerGL.renderer;\n    this._renderer = renderer;\n  },\n  _updateData: function (seriesModel, api) {\n    var coordSys = seriesModel.coordinateSystem;\n    var dims = coordSys.dimensions.map(function (coordDim) {\n      return seriesModel.coordDimToDataDim(coordDim)[0];\n    });\n    var data = seriesModel.getData();\n    var xExtent = data.getDataExtent(dims[0]);\n    var yExtent = data.getDataExtent(dims[1]);\n    var gridWidth = seriesModel.get('gridWidth');\n    var gridHeight = seriesModel.get('gridHeight');\n\n    if (gridWidth == null || gridWidth === 'auto') {\n      // TODO not accurate.\n      var aspect = (xExtent[1] - xExtent[0]) / (yExtent[1] - yExtent[0]);\n      gridWidth = Math.round(Math.sqrt(aspect * data.count()));\n    }\n\n    if (gridHeight == null || gridHeight === 'auto') {\n      gridHeight = Math.ceil(data.count() / gridWidth);\n    }\n\n    var vectorFieldTexture = this._particleSurface.vectorFieldTexture; // Half Float needs Uint16Array\n\n    var pixels = vectorFieldTexture.pixels;\n\n    if (!pixels || pixels.length !== gridHeight * gridWidth * 4) {\n      pixels = vectorFieldTexture.pixels = new Float32Array(gridWidth * gridHeight * 4);\n    } else {\n      for (var i = 0; i < pixels.length; i++) {\n        pixels[i] = 0;\n      }\n    }\n\n    var maxMag = 0;\n    var minMag = Infinity;\n    var points = new Float32Array(data.count() * 2);\n    var offset = 0;\n    var bbox = [[Infinity, Infinity], [-Infinity, -Infinity]];\n    data.each([dims[0], dims[1], 'vx', 'vy'], function (x, y, vx, vy) {\n      var pt = coordSys.dataToPoint([x, y]);\n      points[offset++] = pt[0];\n      points[offset++] = pt[1];\n      bbox[0][0] = Math.min(pt[0], bbox[0][0]);\n      bbox[0][1] = Math.min(pt[1], bbox[0][1]);\n      bbox[1][0] = Math.max(pt[0], bbox[1][0]);\n      bbox[1][1] = Math.max(pt[1], bbox[1][1]);\n      var mag = Math.sqrt(vx * vx + vy * vy);\n      maxMag = Math.max(maxMag, mag);\n      minMag = Math.min(minMag, mag);\n    });\n    data.each(['vx', 'vy'], function (vx, vy, i) {\n      var xPix = Math.round((points[i * 2] - bbox[0][0]) / (bbox[1][0] - bbox[0][0]) * (gridWidth - 1));\n      var yPix = gridHeight - 1 - Math.round((points[i * 2 + 1] - bbox[0][1]) / (bbox[1][1] - bbox[0][1]) * (gridHeight - 1));\n      var idx = (yPix * gridWidth + xPix) * 4;\n      pixels[idx] = vx / maxMag * 0.5 + 0.5;\n      pixels[idx + 1] = vy / maxMag * 0.5 + 0.5;\n      pixels[idx + 3] = 1;\n    });\n    vectorFieldTexture.width = gridWidth;\n    vectorFieldTexture.height = gridHeight;\n\n    if (seriesModel.get('coordinateSystem') === 'bmap') {\n      this._fillEmptyPixels(vectorFieldTexture);\n    }\n\n    vectorFieldTexture.dirty();\n\n    this._updatePlanePosition(bbox[0], bbox[1], seriesModel, api);\n\n    this._updateGradientTexture(data.getVisual('visualMeta'), [minMag, maxMag]);\n  },\n  // PENDING Use grid mesh ? or delaunay triangulation?\n  _fillEmptyPixels: function (texture) {\n    var pixels = texture.pixels;\n    var width = texture.width;\n    var height = texture.height;\n\n    function fetchPixel(x, y, rg) {\n      x = Math.max(Math.min(x, width - 1), 0);\n      y = Math.max(Math.min(y, height - 1), 0);\n      var idx = (y * (width - 1) + x) * 4;\n\n      if (pixels[idx + 3] === 0) {\n        return false;\n      }\n\n      rg[0] = pixels[idx];\n      rg[1] = pixels[idx + 1];\n      return true;\n    }\n\n    function addPixel(a, b, out) {\n      out[0] = a[0] + b[0];\n      out[1] = a[1] + b[1];\n    }\n\n    var center = [],\n        left = [],\n        right = [],\n        top = [],\n        bottom = [];\n    var weight = 0;\n\n    for (var y = 0; y < height; y++) {\n      for (var x = 0; x < width; x++) {\n        var idx = (y * (width - 1) + x) * 4;\n\n        if (pixels[idx + 3] === 0) {\n          weight = center[0] = center[1] = 0;\n\n          if (fetchPixel(x - 1, y, left)) {\n            weight++;\n            addPixel(left, center, center);\n          }\n\n          if (fetchPixel(x + 1, y, right)) {\n            weight++;\n            addPixel(right, center, center);\n          }\n\n          if (fetchPixel(x, y - 1, top)) {\n            weight++;\n            addPixel(top, center, center);\n          }\n\n          if (fetchPixel(x, y + 1, bottom)) {\n            weight++;\n            addPixel(bottom, center, center);\n          }\n\n          center[0] /= weight;\n          center[1] /= weight; // PENDING If overwrite. bilinear interpolation.\n\n          pixels[idx] = center[0];\n          pixels[idx + 1] = center[1];\n        }\n\n        pixels[idx + 3] = 1;\n      }\n    }\n  },\n  _updateGradientTexture: function (visualMeta, magExtent) {\n    if (!visualMeta || !visualMeta.length) {\n      this._particleSurface.setGradientTexture(null);\n\n      return;\n    } // TODO Different dimensions\n\n\n    this._gradientTexture = this._gradientTexture || new graphicGL.Texture2D({\n      image: document.createElement('canvas')\n    });\n    var gradientTexture = this._gradientTexture;\n    var canvas = gradientTexture.image;\n    canvas.width = 200;\n    canvas.height = 1;\n    var ctx = canvas.getContext('2d');\n    var gradient = ctx.createLinearGradient(0, 0.5, canvas.width, 0.5);\n    visualMeta[0].stops.forEach(function (stop) {\n      var offset;\n\n      if (magExtent[1] === magExtent[0]) {\n        offset = 0;\n      } else {\n        offset = stop.value / magExtent[1];\n        offset = Math.min(Math.max(offset, 0), 1);\n      }\n\n      gradient.addColorStop(offset, stop.color);\n    });\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    gradientTexture.dirty();\n\n    this._particleSurface.setGradientTexture(this._gradientTexture);\n  },\n  _updatePlanePosition: function (leftTop, rightBottom, seriesModel, api) {\n    var limitedResult = this._limitInViewportAndFullFill(leftTop, rightBottom, seriesModel, api);\n\n    leftTop = limitedResult.leftTop;\n    rightBottom = limitedResult.rightBottom;\n\n    this._particleSurface.setRegion(limitedResult.region);\n\n    this._planeMesh.position.set((leftTop[0] + rightBottom[0]) / 2, api.getHeight() - (leftTop[1] + rightBottom[1]) / 2, 0);\n\n    var width = rightBottom[0] - leftTop[0];\n    var height = rightBottom[1] - leftTop[1];\n\n    this._planeMesh.scale.set(width / 2, height / 2, 1);\n\n    this._particleSurface.resize(Math.max(Math.min(width, 2048), 1), Math.max(Math.min(height, 2048), 1));\n\n    if (this._renderer) {\n      this._particleSurface.clearFrame(this._renderer);\n    }\n  },\n  _limitInViewportAndFullFill: function (leftTop, rightBottom, seriesModel, api) {\n    var newLeftTop = [Math.max(leftTop[0], 0), Math.max(leftTop[1], 0)];\n    var newRightBottom = [Math.min(rightBottom[0], api.getWidth()), Math.min(rightBottom[1], api.getHeight())]; // Tiliing in lng orientation.\n\n    if (seriesModel.get('coordinateSystem') === 'bmap') {\n      var lngRange = seriesModel.getData().getDataExtent(seriesModel.coordDimToDataDim('lng')[0]); // PENDING, consider grid density\n\n      var isContinuous = Math.floor(lngRange[1] - lngRange[0]) >= 359;\n\n      if (isContinuous) {\n        if (newLeftTop[0] > 0) {\n          newLeftTop[0] = 0;\n        }\n\n        if (newRightBottom[0] < api.getWidth()) {\n          newRightBottom[0] = api.getWidth();\n        }\n      }\n    }\n\n    var width = rightBottom[0] - leftTop[0];\n    var height = rightBottom[1] - leftTop[1];\n    var newWidth = newRightBottom[0] - newLeftTop[0];\n    var newHeight = newRightBottom[1] - newLeftTop[1];\n    var region = [(newLeftTop[0] - leftTop[0]) / width, 1.0 - newHeight / height - (newLeftTop[1] - leftTop[1]) / height, newWidth / width, newHeight / height];\n    return {\n      leftTop: newLeftTop,\n      rightBottom: newRightBottom,\n      region: region\n    };\n  },\n  _updateCamera: function (width, height, dpr) {\n    this.viewGL.setViewport(0, 0, width, height, dpr);\n    var camera = this.viewGL.camera; // FIXME  bottom can't be larger than top\n\n    camera.left = camera.bottom = 0;\n    camera.top = height;\n    camera.right = width;\n    camera.near = 0;\n    camera.far = 100;\n    camera.position.z = 10;\n  },\n  remove: function () {\n    this._planeMesh.stopAnimation();\n\n    this.groupGL.removeAll();\n  },\n  dispose: function () {\n    if (this._renderer) {\n      this._particleSurface.dispose(this._renderer);\n    }\n\n    this.groupGL.removeAll();\n  }\n});", "// TODO ECharts GL must be imported whatever component,charts is imported.\nimport '../../echarts-gl';\nimport FlowGLSeries from './FlowGLSeries';\nimport FlowGLView from './FlowGLView';\nexport function install(registers) {\n  registers.registerChartView(FlowGLView);\n  registers.registerSeriesModel(FlowGLSeries);\n}", "import * as echarts from 'echarts/lib/echarts';\nimport { concatArray } from 'zrender/lib/core/util';\nvar LinesGLSeries = echarts.SeriesModel.extend({\n  type: 'series.linesGL',\n  dependencies: ['grid', 'geo'],\n  visualStyleAccessPath: 'lineStyle',\n  visualDrawType: 'stroke',\n  streamEnabled: true,\n  init: function (option) {\n    var result = this._processFlatCoordsArray(option.data);\n\n    this._flatCoords = result.flatCoords;\n    this._flatCoordsOffset = result.flatCoordsOffset;\n\n    if (result.flatCoords) {\n      option.data = new Float32Array(result.count);\n    }\n\n    LinesGLSeries.superApply(this, 'init', arguments);\n  },\n  mergeOption: function (option) {\n    var result = this._processFlatCoordsArray(option.data);\n\n    this._flatCoords = result.flatCoords;\n    this._flatCoordsOffset = result.flatCoordsOffset;\n\n    if (result.flatCoords) {\n      option.data = new Float32Array(result.count);\n    }\n\n    LinesGLSeries.superApply(this, 'mergeOption', arguments);\n  },\n  appendData: function (params) {\n    var result = this._processFlatCoordsArray(params.data);\n\n    if (result.flatCoords) {\n      if (!this._flatCoords) {\n        this._flatCoords = result.flatCoords;\n        this._flatCoordsOffset = result.flatCoordsOffset;\n      } else {\n        this._flatCoords = concatArray(this._flatCoords, result.flatCoords);\n        this._flatCoordsOffset = concatArray(this._flatCoordsOffset, result.flatCoordsOffset);\n      }\n\n      params.data = new Float32Array(result.count);\n    }\n\n    this.getRawData().appendData(params.data);\n  },\n  _getCoordsFromItemModel: function (idx) {\n    var itemModel = this.getData().getItemModel(idx);\n    var coords = itemModel.option instanceof Array ? itemModel.option : itemModel.getShallow('coords');\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!(coords instanceof Array && coords.length > 0 && coords[0] instanceof Array)) {\n        throw new Error('Invalid coords ' + JSON.stringify(coords) + '. Lines must have 2d coords array in data item.');\n      }\n    }\n\n    return coords;\n  },\n  getLineCoordsCount: function (idx) {\n    if (this._flatCoordsOffset) {\n      return this._flatCoordsOffset[idx * 2 + 1];\n    } else {\n      return this._getCoordsFromItemModel(idx).length;\n    }\n  },\n  getLineCoords: function (idx, out) {\n    if (this._flatCoordsOffset) {\n      var offset = this._flatCoordsOffset[idx * 2];\n      var len = this._flatCoordsOffset[idx * 2 + 1];\n\n      for (var i = 0; i < len; i++) {\n        out[i] = out[i] || [];\n        out[i][0] = this._flatCoords[offset + i * 2];\n        out[i][1] = this._flatCoords[offset + i * 2 + 1];\n      }\n\n      return len;\n    } else {\n      var coords = this._getCoordsFromItemModel(idx);\n\n      for (var i = 0; i < coords.length; i++) {\n        out[i] = out[i] || [];\n        out[i][0] = coords[i][0];\n        out[i][1] = coords[i][1];\n      }\n\n      return coords.length;\n    }\n  },\n  _processFlatCoordsArray: function (data) {\n    var startOffset = 0;\n\n    if (this._flatCoords) {\n      startOffset = this._flatCoords.length;\n    } // Stored as a typed array. In format\n    // Points Count(2) | x | y | x | y | Points Count(3) | x |  y | x | y | x | y |\n\n\n    if (typeof data[0] === 'number') {\n      var len = data.length; // Store offset and len of each segment\n\n      var coordsOffsetAndLenStorage = new Uint32Array(len);\n      var coordsStorage = new Float64Array(len);\n      var coordsCursor = 0;\n      var offsetCursor = 0;\n      var dataCount = 0;\n\n      for (var i = 0; i < len;) {\n        dataCount++;\n        var count = data[i++]; // Offset\n\n        coordsOffsetAndLenStorage[offsetCursor++] = coordsCursor + startOffset; // Len\n\n        coordsOffsetAndLenStorage[offsetCursor++] = count;\n\n        for (var k = 0; k < count; k++) {\n          var x = data[i++];\n          var y = data[i++];\n          coordsStorage[coordsCursor++] = x;\n          coordsStorage[coordsCursor++] = y;\n\n          if (i > len) {\n            if (process.env.NODE_ENV !== 'production') {\n              throw new Error('Invalid data format.');\n            }\n          }\n        }\n      }\n\n      return {\n        flatCoordsOffset: new Uint32Array(coordsOffsetAndLenStorage.buffer, 0, offsetCursor),\n        flatCoords: coordsStorage,\n        count: dataCount\n      };\n    }\n\n    return {\n      flatCoordsOffset: null,\n      flatCoords: null,\n      count: data.length\n    };\n  },\n  getInitialData: function (option, ecModel) {\n    var lineData = new echarts.List(['value'], this);\n    lineData.hasItemOption = false;\n    lineData.initData(option.data, [], function (dataItem, dimName, dataIndex, dimIndex) {\n      // dataItem is simply coords\n      if (dataItem instanceof Array) {\n        return NaN;\n      } else {\n        lineData.hasItemOption = true;\n        var value = dataItem.value;\n\n        if (value != null) {\n          return value instanceof Array ? value[dimIndex] : value;\n        }\n      }\n    });\n    return lineData;\n  },\n  defaultOption: {\n    coordinateSystem: 'geo',\n    zlevel: 10,\n    progressive: 1e4,\n    progressiveThreshold: 5e4,\n    // Cartesian coordinate system\n    // xAxisIndex: 0,\n    // yAxisIndex: 0,\n    // Geo coordinate system\n    // geoIndex: 0,\n    // Support source-over, lighter\n    blendMode: 'source-over',\n    lineStyle: {\n      opacity: 0.8\n    },\n    postEffect: {\n      enable: false,\n      colorCorrection: {\n        exposure: 0,\n        brightness: 0,\n        contrast: 1,\n        saturation: 1,\n        enable: true\n      }\n    }\n  }\n});\nexport default LinesGLSeries;", "import * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport ViewGL from '../../core/ViewGL';\nimport Lines2DGeometry from '../../util/geometry/Lines2D';\nimport GLViewHelper from '../common/GLViewHelper';\nimport { getItemVisualColor, getItemVisualOpacity } from '../../util/visual';\nimport retrieve from '../../util/retrieve';\nexport default echarts.ChartView.extend({\n  type: 'linesGL',\n  __ecgl__: true,\n  init: function (ecModel, api) {\n    this.groupGL = new graphicGL.Node();\n    this.viewGL = new ViewGL('orthographic');\n    this.viewGL.add(this.groupGL);\n    this._glViewHelper = new GLViewHelper(this.viewGL);\n    this._nativeLinesShader = graphicGL.createShader('ecgl.lines3D');\n    this._meshLinesShader = graphicGL.createShader('ecgl.meshLines3D');\n    this._linesMeshes = [];\n    this._currentStep = 0;\n  },\n  render: function (seriesModel, ecModel, api) {\n    this.groupGL.removeAll();\n\n    this._glViewHelper.reset(seriesModel, api);\n\n    var linesMesh = this._linesMeshes[0];\n\n    if (!linesMesh) {\n      linesMesh = this._linesMeshes[0] = this._createLinesMesh(seriesModel);\n    }\n\n    this._linesMeshes.length = 1;\n    this.groupGL.add(linesMesh);\n\n    this._updateLinesMesh(seriesModel, linesMesh, 0, seriesModel.getData().count());\n\n    this.viewGL.setPostEffect(seriesModel.getModel('postEffect'), api);\n  },\n  incrementalPrepareRender: function (seriesModel, ecModel, api) {\n    this.groupGL.removeAll();\n\n    this._glViewHelper.reset(seriesModel, api);\n\n    this._currentStep = 0;\n    this.viewGL.setPostEffect(seriesModel.getModel('postEffect'), api);\n  },\n  incrementalRender: function (params, seriesModel, ecModel, api) {\n    var linesMesh = this._linesMeshes[this._currentStep];\n\n    if (!linesMesh) {\n      linesMesh = this._createLinesMesh(seriesModel);\n      this._linesMeshes[this._currentStep] = linesMesh;\n    }\n\n    this._updateLinesMesh(seriesModel, linesMesh, params.start, params.end);\n\n    this.groupGL.add(linesMesh);\n    api.getZr().refresh();\n    this._currentStep++;\n  },\n  updateTransform: function (seriesModel, ecModel, api) {\n    if (seriesModel.coordinateSystem.getRoamTransform) {\n      this._glViewHelper.updateTransform(seriesModel, api);\n    }\n  },\n  _createLinesMesh: function (seriesModel) {\n    var linesMesh = new graphicGL.Mesh({\n      $ignorePicking: true,\n      material: new graphicGL.Material({\n        shader: graphicGL.createShader('ecgl.lines3D'),\n        transparent: true,\n        depthMask: false,\n        depthTest: false\n      }),\n      geometry: new Lines2DGeometry({\n        segmentScale: 10,\n        useNativeLine: true,\n        dynamic: false\n      }),\n      mode: graphicGL.Mesh.LINES,\n      culling: false\n    });\n    return linesMesh;\n  },\n  _updateLinesMesh: function (seriesModel, linesMesh, start, end) {\n    var data = seriesModel.getData();\n    linesMesh.material.blend = seriesModel.get('blendMode') === 'lighter' ? graphicGL.additiveBlend : null;\n    var curveness = seriesModel.get('lineStyle.curveness') || 0;\n    var isPolyline = seriesModel.get('polyline');\n    var geometry = linesMesh.geometry;\n    var coordSys = seriesModel.coordinateSystem;\n    var lineWidth = retrieve.firstNotNull(seriesModel.get('lineStyle.width'), 1);\n\n    if (lineWidth > 1) {\n      if (linesMesh.material.shader !== this._meshLinesShader) {\n        linesMesh.material.attachShader(this._meshLinesShader);\n      }\n\n      linesMesh.mode = graphicGL.Mesh.TRIANGLES;\n    } else {\n      if (linesMesh.material.shader !== this._nativeLinesShader) {\n        linesMesh.material.attachShader(this._nativeLinesShader);\n      }\n\n      linesMesh.mode = graphicGL.Mesh.LINES;\n    }\n\n    start = start || 0;\n    end = end || data.count();\n    geometry.resetOffset();\n    var vertexCount = 0;\n    var triangleCount = 0;\n    var p0 = [];\n    var p1 = [];\n    var p2 = [];\n    var p3 = [];\n    var lineCoords = [];\n    var t = 0.3;\n    var t2 = 0.7;\n\n    function updateBezierControlPoints() {\n      p1[0] = p0[0] * t2 + p3[0] * t - (p0[1] - p3[1]) * curveness;\n      p1[1] = p0[1] * t2 + p3[1] * t - (p3[0] - p0[0]) * curveness;\n      p2[0] = p0[0] * t + p3[0] * t2 - (p0[1] - p3[1]) * curveness;\n      p2[1] = p0[1] * t + p3[1] * t2 - (p3[0] - p0[0]) * curveness;\n    }\n\n    if (isPolyline || curveness !== 0) {\n      for (var idx = start; idx < end; idx++) {\n        if (isPolyline) {\n          var count = seriesModel.getLineCoordsCount(idx);\n          vertexCount += geometry.getPolylineVertexCount(count);\n          triangleCount += geometry.getPolylineTriangleCount(count);\n        } else {\n          seriesModel.getLineCoords(idx, lineCoords);\n\n          this._glViewHelper.dataToPoint(coordSys, lineCoords[0], p0);\n\n          this._glViewHelper.dataToPoint(coordSys, lineCoords[1], p3);\n\n          updateBezierControlPoints();\n          vertexCount += geometry.getCubicCurveVertexCount(p0, p1, p2, p3);\n          triangleCount += geometry.getCubicCurveTriangleCount(p0, p1, p2, p3);\n        }\n      }\n    } else {\n      var lineCount = end - start;\n      vertexCount += lineCount * geometry.getLineVertexCount();\n      triangleCount += lineCount * geometry.getLineVertexCount();\n    }\n\n    geometry.setVertexCount(vertexCount);\n    geometry.setTriangleCount(triangleCount);\n    var dataIndex = start;\n    var colorArr = [];\n\n    for (var idx = start; idx < end; idx++) {\n      graphicGL.parseColor(getItemVisualColor(data, dataIndex), colorArr);\n      var opacity = retrieve.firstNotNull(getItemVisualOpacity(data, dataIndex), 1);\n      colorArr[3] *= opacity;\n      var count = seriesModel.getLineCoords(idx, lineCoords);\n\n      for (var k = 0; k < count; k++) {\n        this._glViewHelper.dataToPoint(coordSys, lineCoords[k], lineCoords[k]);\n      }\n\n      if (isPolyline) {\n        geometry.addPolyline(lineCoords, colorArr, lineWidth, 0, count);\n      } else if (curveness !== 0) {\n        p0 = lineCoords[0];\n        p3 = lineCoords[1];\n        updateBezierControlPoints();\n        geometry.addCubicCurve(p0, p1, p2, p3, colorArr, lineWidth);\n      } else {\n        geometry.addPolyline(lineCoords, colorArr, lineWidth, 0, 2);\n      }\n\n      dataIndex++;\n    }\n  },\n  dispose: function () {\n    this.groupGL.removeAll();\n  },\n  remove: function () {\n    this.groupGL.removeAll();\n  }\n});", "// TODO ECharts GL must be imported whatever component,charts is imported.\nimport '../../echarts-gl';\nimport LinesGLSeries from './LinesGLSeries';\nimport LinesGLView from './LinesGLView';\nexport function install(registers) {\n  registers.registerChartView(LinesGLView);\n  registers.registerSeriesModel(LinesGLSeries);\n}"],
  "mappings": "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",
  "names": ["size", "vec3", "isDimensionStacked", "size", "value", "vec3", "i", "k", "normal", "vec3", "self", "install", "vec3", "install", "sign", "x", "y", "i", "y2", "x2", "vec3", "self", "install", "vec3", "create", "normal", "vec3", "install", "install", "getPrecision", "vec3", "idx", "i", "j", "normal", "idx3", "install", "transformPolygon", "install", "install", "pt", "self", "vec2", "normal", "tangent", "vec2", "ForceAtlas2", "defaultConfigs", "vec2", "self", "layoutId", "node", "normalize", "install", "symbolType", "symbolSize", "LinesGeometry", "self", "i", "x", "y", "idx", "install", "install"]
}
