{
  "version": 3,
  "sources": ["../../typed_janus_js/src/interfaces/janus.ts"],
  "sourcesContent": ["import { BehaviorSubject, ReplaySubject, Subject } from 'rxjs'\n\nexport interface Dependencies {\n    adapter: any\n    WebSocket: (server: string, protocol: string) => WebSocket\n    isArray: (array: any) => array is Array<any>\n    extension: ChromeExtension\n    httpAPICall: (url: string, options: HttpApiCallOption) => void\n}\n\nexport interface DefaultDependencies extends Dependencies {\n    fetch: typeof fetch\n    Promise: PromiseConstructorLike\n}\n\nexport interface OldDependencies extends Dependencies {\n    jQuery: typeof jQuery\n}\n\nexport interface DependenciesResult {\n    adapter: any\n    newWebSocket: (server: string, protocol: string) => WebSocket\n    isArray: (array: any) => array is Array<any>\n    extension: ChromeExtension\n    httpAPICall: (url: string, options: HttpApiCallOption) => void\n}\n\ntype ChromeExtension = {\n    cache?: { [key in string]: GetScreenCallback }\n    extensionId: string\n    isInstalled: () => boolean\n    getScreen: (callback: GetScreenCallback) => void\n    init: () => void\n}\n\ntype GetScreenCallback = (error?, sourceId?) => void\n\ntype HttpApiCallOption = {\n    async: boolean\n    verb: string\n    body: JanusRequest\n    timeout: number\n    withCredentials: boolean\n    success: (result: unknown) => void\n    error: (error: string, reason?: unknown) => void\n}\n\ntype JanusRequest = {\n    plugin?: string\n    token?: string\n    apisecret?: string\n    session_id?: number\n    handle_id?: number\n    opaque_id?: string\n    loop_index?: number\n    janus: string\n    transaction: string\n    body?: any\n    jsep?: JSEP\n}\n\nenum DebugLevel {\n    Trace = 'trace',\n    vDebug = 'vdebug',\n    Debug = 'debug',\n    Log = 'log',\n    Warning = 'warn',\n    Error = 'error',\n}\n\nexport interface JSEP {\n    e2ee?: boolean\n    sdp?: string\n    type?: string\n    rid_order?: 'hml' | 'lmh'\n    force_relay?: boolean\n}\n\nexport interface InitOptions {\n    debug?: boolean | 'all' | DebugLevel[]\n    callback?: Function\n    dependencies?: DependenciesResult\n}\n\nexport interface ReconnectOptions {\n    success?: Function\n    error?: (error: string) => void\n}\n\nexport interface DestroyOptions {\n    cleanupHandles?: boolean\n    notifyDestroyed?: boolean\n    unload?: boolean\n    success?: () => void\n    error?: (error: string) => void\n}\n\nexport interface GetInfoOptions {\n    success?: (info: any) => void\n    error?: (error: string) => void\n}\n\nexport interface PluginCallbacks {\n    dataChannelOptions?: RTCDataChannelInit\n    success?: (handle: PluginHandle) => void\n    error?: (error: string) => void\n    consentDialog?: (on: boolean) => void\n    webrtcState?: (isConnected: boolean) => void\n    iceState?: (\n        state: 'connected' | 'failed' | 'disconnected' | 'closed'\n    ) => void\n    mediaState?: (\n        medium: 'audio' | 'video',\n        receiving: boolean,\n        mid?: number\n    ) => void\n    slowLink?: (uplink: boolean, lost: number, mid: string) => void\n    onmessage?: (message: Message, jsep?: JSEP) => void\n    onlocaltrack?: (track: MediaStreamTrack, on: boolean) => void\n    onremotetrack?: (track: MediaStreamTrack, mid: string, on: boolean) => void\n    ondataopen?: Function\n    ondata?: Function\n    oncleanup?: Function\n    ondetached?: Function\n}\n\nexport interface PluginOptions extends PluginCallbacks {\n    plugin: string\n    opaqueId?: string\n    token?: string\n    loopIndex?: number\n}\n\nexport interface OfferParams {\n    tracks?: TrackOption[]\n    trickle?: boolean\n    iceRestart?: boolean\n    success?: (jsep: JSEP) => void\n    error?: (error: Error) => void\n    customizeSdp?: (jsep: JSEP) => void\n\n    /** @deprecated use tracks instead */\n    media?: {\n        audioSend?: boolean\n        audioRecv?: boolean\n        videoSend?: boolean\n        videoRecv?: boolean\n        audio?: boolean | { deviceId: string }\n        video?:\n            | boolean\n            | { deviceId: string }\n            | 'lowres'\n            | 'lowres-16:9'\n            | 'stdres'\n            | 'stdres-16:9'\n            | 'hires'\n            | 'hires-16:9'\n        data?: boolean\n        failIfNoAudio?: boolean\n        failIfNoVideo?: boolean\n        screenshareFrameRate?: number\n    }\n}\n\nexport interface PluginMessage {\n    message: {\n        request: string\n        [otherProps: string]: any\n    }\n    jsep?: JSEP\n    success?: (data?: any) => void\n    error?: (error: string) => void\n}\n\nexport interface WebRTCInfo {\n    bitrate: {\n        bsbefore: string | null\n        bsnow: string | null\n        timer: string | null\n        tsbefore: string | null\n        tsnow: string | null\n        value: string | null\n    }\n    dataChannel: { [key in string]: RTCDataChannel }\n    dataChannelOptions: RTCDataChannelInit\n\n    dtmfSender: RTCDTMFSender\n    iceDone: boolean\n    mediaConstraints: any\n    mySdp: {\n        sdp: string\n        type: string\n    }\n    myStream: MediaStream\n    pc: RTCPeerConnection\n    receiverTransforms: {\n        audio: TransformStream\n        video: TransformStream\n    }\n    remoteSdp: string\n    remoteStream: MediaStream\n    senderTransforms: {\n        audio: TransformStream\n        video: TransformStream\n    }\n    started: boolean\n    streamExternal: boolean\n    trickle: boolean\n    volume: {\n        value: number\n        timer: number\n    }\n\n    sdpSent: boolean\n    insertableStreams?: any\n    candidates: RTCIceCandidateInit[]\n}\n\nexport type PluginCreateAnswerParam = {\n    jsep: JSEP\n    tracks?: TrackOption[]\n\n    /** @deprecated use tracks instead */\n    media?: { audioSend: any; videoSend: any }\n    success?: (data: JSEP) => void\n    error?: (error: string) => void\n}\n\nexport type PluginHandleRemoteJsepParam = {\n    jsep: JSEP\n    success?: (data: JSEP) => void\n    error?: (error: string) => void\n}\n\nexport type PluginReplaceTracksParam = {\n    tracks: TrackOption[]\n    success?: (data: unknown) => void\n    error?: (error: string) => void\n}\n\nexport type TrackOption = {\n    add?: boolean\n    replace?: boolean\n    remove?: boolean\n    type: 'video' | 'screen' | 'audio' | 'data'\n    mid?: string\n    capture: boolean | MediaStreamTrack\n    recv?: boolean\n    group?: 'default' | string\n    gumGroup?: TrackOption['group']\n    simulcast?: boolean\n    svc?: string\n    simulcastMaxBitrates?: {\n        low: number\n        medium: number\n        high: number\n    }\n    sendEncodings?: RTCRtpEncodingParameters\n    framerate?: number\n    bitrate?: number\n    dontStop?: boolean\n    transforms?: {\n        sender: ReadableWritablePair\n        receiver: ReadableWritablePair\n    }\n}\n\nexport type PluginDtmfParam = {\n    dtmf: Dtmf\n    success?: (data: unknown) => void\n    error?: (error: string) => void\n}\n\nexport type Dtmf = {\n    tones: string\n    duration: number\n    gap: number\n}\n\nexport type PluginDataParam = {\n    success?: (data: unknown) => void\n    error?: (error: string) => void\n    text: string\n}\n\nexport type TrackDesc = {\n    mid?: string\n    type?: string\n    id?: string\n    label?: string\n}\n\nexport interface DetachOptions {\n    success?: () => void\n    error?: (error: string) => void\n    noRequest?: boolean\n}\n\nexport interface PluginHandle {\n    plugin: string\n    id: string\n    token?: string\n    detached: boolean\n    webrtcStuff: WebRTCInfo\n    getId(): string\n    getPlugin(): string\n    getVolume(mid: string, callback: (result: number) => void): void\n    getRemoteVolume(mid: string, callback: (result: number) => void): void\n    getLocalVolume(mid: string, callback: (result: number) => void): void\n    isAudioMuted(): boolean\n    muteAudio(): void\n    unmuteAudio(): void\n    isVideoMuted(): boolean\n    muteVideo(): void\n    unmuteVideo(): void\n    getBitrate(): string\n    setMaxBitrate(bitrate: number): void\n    send(message: PluginMessage): void\n    data(params: PluginDataParam): void\n    dtmf(params: PluginDtmfParam): void\n    createOffer(params: OfferParams): void\n    createAnswer(params: PluginCreateAnswerParam): void\n    handleRemoteJsep(params: PluginHandleRemoteJsepParam): void\n    replaceTracks(params: PluginReplaceTracksParam): Promise<void>\n    getLocalTracks(): TrackDesc[]\n    getRemoteTracks(): TrackDesc[]\n    hangup(sendRequest?: boolean): void\n    detach(params?: DetachOptions): void\n}\n\ndeclare namespace JanusJS {\n    class Janus {\n        static webRTCAdapter: any\n        static safariVp8: boolean\n        static useDefaultDependencies(\n            deps: Partial<Dependencies>\n        ): DependenciesResult\n        static useOldDependencies(\n            deps: Partial<Dependencies>\n        ): DependenciesResult\n        static init(options: InitOptions): void\n        static isWebrtcSupported(): boolean\n        static debug(...args: any[]): void\n        static log(...args: any[]): void\n        static warn(...args: any[]): void\n        static error(...args: any[]): void\n        static randomString(length: number): string\n        static attachMediaStream(\n            element: HTMLMediaElement,\n            stream: MediaStream\n        ): void\n        static reattachMediaStream(\n            to: HTMLMediaElement,\n            from: HTMLMediaElement\n        ): void\n\n        static stopAllTracks(stream: MediaStream): void\n\n        constructor(options: ConstructorOptions)\n\n        attach(options: PluginOptions): void\n        getServer(): string\n        isConnected(): boolean\n        reconnect(callbacks: ReconnectOptions): void\n        getSessionId(): number\n        getInfo(callbacks: GetInfoOptions): void\n        destroy(callbacks: DestroyOptions): void\n    }\n}\n\nexport default JanusJS.Janus\nexport { JanusJS }\n\nexport interface ConstructorOptions {\n    server: string | string[]\n    iceServers?: RTCIceServer[]\n    ipv6?: boolean\n    withCredentials?: boolean\n    max_poll_events?: number\n    destroyOnUnload?: boolean\n    token?: string\n    apisecret?: string\n    success?: Function\n    error?: (error: any) => void\n    destroyed?: Function\n    iceTransportPolicy?: RTCIceTransportPolicy\n    bundlePolicy?: RTCBundlePolicy\n    keepAlivePeriod?: number\n    longPollTimeout?: number\n}\n\n// Our Defined\n\nexport enum MessageType {\n    Recording = 'recording',\n    Starting = 'starting',\n    Started = 'started',\n    Stopped = 'stopped',\n    SlowLink = 'slow_link',\n    Preparing = 'preparing',\n    Refreshing = 'refreshing',\n}\n\nexport interface Message {\n    result?: {\n        status: MessageType\n        id?: string\n        uplink?: number\n    }\n    error?: string\n    [key: string]: any\n}\nexport interface MessageCallback extends Object {\n    result: Result\n}\n\nexport interface Result extends Object {\n    event: string\n}\n\nexport interface Controllers {\n    onMessageController: Subject<{\n        message: MessageCallback | any\n        jsep: JSEP\n    }>\n    onLocalTrackController: BehaviorSubject<{\n        track: MediaStreamTrack\n        on: boolean\n    }>\n    onRemoteTrackController: Subject<{\n        track: MediaStreamTrack\n        on: boolean\n        mid: string\n    }>\n    onRecordingDataController: Subject<{\n        blob: Blob\n        chunkNumber: number\n    }>\n    onStatReportsController: Subject<any[]>\n    onDataController: BehaviorSubject<any>\n    onErrorController: BehaviorSubject<any>\n    onMediaStateController: BehaviorSubject<{\n        medium: 'audio' | 'video'\n        recieving: boolean\n        mid: number\n    }>\n    onSlowLinkController: BehaviorSubject<{\n        uplink: boolean\n        lost: number\n        mid: string\n    }>\n    onWebRTCStateController: BehaviorSubject<boolean>\n    onIceStateController: BehaviorSubject<\n        'connected' | 'failed' | 'disconnected' | 'closed'\n    >\n    onDataOpenController: BehaviorSubject<void>\n    onDetachedController: BehaviorSubject<void>\n    onCleanupController: BehaviorSubject<void>\n}\n\nexport interface CreateRecordingController {\n    blob: Blob\n    chunkNumber: number\n}\nexport interface CreateRecordingResult {\n    mediaRecorder: MediaRecorder\n    controller: Subject<CreateRecordingController>\n}\n\nexport interface AnswerParams {\n    tracks?: {\n        type: 'video' | 'audio' | 'data'\n        capture: boolean\n        recv: boolean\n    }[]\n    media?: {\n        audioSend?: boolean\n        addAudio?: boolean\n        addVideo?: boolean\n        addData?: boolean\n        audioRecv?: boolean\n        videoSend?: boolean\n        removeAudio?: boolean\n        removeVideo?: boolean\n        replaceAudio?: boolean\n        replaceVideo?: boolean\n        videoRecv?: boolean\n        audio?: boolean | { deviceId: string }\n        video?:\n            | boolean\n            | { deviceId: string }\n            | 'lowres'\n            | 'lowres-16:9'\n            | 'stdres'\n            | 'stdres-16:9'\n            | 'hires'\n            | 'hires-16:9'\n        data?: boolean\n        failIfNoAudio?: boolean\n        failIfNoVideo?: boolean\n        screenshareFrameRate?: number\n    }\n    jsep: any\n}\n\nexport interface DataParams {\n    text: any\n}\n"],
  "mappings": ";;;AAkXA,IAAO,gBAAQ,QAAQ;AAuBhB,IAAK,cAAL,kBAAKA,iBAAL;AACH,EAAAA,aAAA,eAAY;AACZ,EAAAA,aAAA,cAAW;AACX,EAAAA,aAAA,aAAU;AACV,EAAAA,aAAA,aAAU;AACV,EAAAA,aAAA,cAAW;AACX,EAAAA,aAAA,eAAY;AACZ,EAAAA,aAAA,gBAAa;AAPL,SAAAA;AAAA,GAAA;",
  "names": ["MessageType"]
}
