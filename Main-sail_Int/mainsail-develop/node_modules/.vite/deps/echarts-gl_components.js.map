{
  "version": 3,
  "sources": ["../../echarts-gl/lib/component/grid3D/Grid3DModel.js", "../../echarts-gl/lib/util/geometry/Quads.js", "../../echarts-gl/lib/component/grid3D/Grid3DFace.js", "../../echarts-gl/lib/component/grid3D/Grid3DAxis.js", "../../echarts-gl/lib/component/grid3D/Grid3DView.js", "../../echarts-gl/lib/coord/grid3D/Cartesian3D.js", "../../echarts-gl/lib/coord/grid3D/Axis3D.js", "../../echarts-gl/lib/coord/grid3DCreator.js", "../../echarts-gl/lib/component/grid3D/Axis3DModel.js", "../../echarts-gl/lib/component/grid3D/axis3DDefault.js", "../../echarts-gl/lib/component/grid3D/createAxis3DModel.js", "../../echarts-gl/lib/component/grid3D/install.js", "../../echarts-gl/lib/component/globe/GlobeModel.js", "../../echarts-gl/lib/util/sunCalc.js", "../../echarts-gl/lib/component/globe/atmosphere.glsl.js", "../../echarts-gl/lib/component/globe/GlobeView.js", "../../echarts-gl/lib/coord/globe/Globe.js", "../../echarts-gl/lib/coord/globeCreator.js", "../../echarts-gl/lib/component/globe/install.js", "../../echarts-gl/lib/component/mapbox3D/Mapbox3DModel.js", "../../echarts-gl/lib/component/mapbox3D/Mapbox3DLayer.js", "../../echarts-gl/lib/util/shader/displayShadow.glsl.js", "../../echarts-gl/lib/component/mapbox3D/Mapbox3DView.js", "../../echarts-gl/lib/coord/mapServiceCommon/MapService3D.js", "../../echarts-gl/lib/coord/mapbox3D/Mapbox3D.js", "../../echarts-gl/lib/coord/mapServiceCommon/createMapService3DCreator.js", "../../echarts-gl/lib/coord/mapbox3DCreator.js", "../../echarts-gl/lib/component/mapbox3D/install.js", "../../echarts-gl/lib/component/maptalks3D/Maptalks3DModel.js", "../../echarts-gl/lib/component/maptalks3D/Maptalks3DLayer.js", "../../echarts-gl/lib/component/maptalks3D/Maptalks3DView.js", "../../echarts-gl/lib/coord/maptalks3D/Maptalks3D.js", "../../echarts-gl/lib/coord/maptalks3DCreator.js", "../../echarts-gl/lib/component/maptalks3D/install.js"],
  "sourcesContent": ["import * as echarts from 'echarts/lib/echarts';\nimport componentViewControlMixin from '../common/componentViewControlMixin';\nimport componentPostEffectMixin from '../common/componentPostEffectMixin';\nimport componentLightMixin from '../common/componentLightMixin';\nvar Grid3DModel = echarts.ComponentModel.extend({\n  type: 'grid3D',\n  dependencies: ['xAxis3D', 'yAxis3D', 'zAxis3D'],\n  defaultOption: {\n    show: true,\n    zlevel: -10,\n    // Layout used for viewport\n    left: 0,\n    top: 0,\n    width: '100%',\n    height: '100%',\n    environment: 'auto',\n    // Dimension of grid3D\n    boxWidth: 100,\n    boxHeight: 100,\n    boxDepth: 100,\n    // Common axis options.\n    axisPointer: {\n      show: true,\n      lineStyle: {\n        color: 'rgba(0, 0, 0, 0.8)',\n        width: 1\n      },\n      label: {\n        show: true,\n        // (dimValue: number, value: Array) => string\n        formatter: null,\n        // TODO, Consider boxWidth\n        margin: 8,\n        // backgroundColor: '#ffbd67',\n        // borderColor: '#000',\n        // borderWidth: 0,\n        textStyle: {\n          fontSize: 14,\n          color: '#fff',\n          backgroundColor: 'rgba(0,0,0,0.5)',\n          padding: 3,\n          borderRadius: 3\n        }\n      }\n    },\n    axisLine: {\n      show: true,\n      lineStyle: {\n        color: '#333',\n        width: 2,\n        type: 'solid'\n      }\n    },\n    axisTick: {\n      show: true,\n      inside: false,\n      length: 3,\n      lineStyle: {\n        width: 1\n      }\n    },\n    axisLabel: {\n      show: true,\n      inside: false,\n      rotate: 0,\n      margin: 8,\n      textStyle: {\n        fontSize: 12\n      }\n    },\n    splitLine: {\n      show: true,\n      lineStyle: {\n        color: ['#ccc'],\n        width: 1,\n        type: 'solid'\n      }\n    },\n    splitArea: {\n      show: false,\n      areaStyle: {\n        color: ['rgba(250,250,250,0.3)', 'rgba(200,200,200,0.3)']\n      }\n    },\n    // Light options\n    light: {\n      main: {\n        // Alpha angle for top-down rotation\n        // Positive to rotate to top.\n        alpha: 30,\n        // beta angle for left-right rotation\n        // Positive to rotate to right.\n        beta: 40\n      },\n      ambient: {\n        intensity: 0.4\n      }\n    },\n    viewControl: {\n      // Small damping for precise control.\n      // damping: 0.1,\n      // Alpha angle for top-down rotation\n      // Positive to rotate to top.\n      alpha: 20,\n      // beta angle for left-right rotation\n      // Positive to rotate to right.\n      beta: 40,\n      autoRotate: false,\n      // Distance to the surface of grid3D.\n      distance: 200,\n      // Min distance to the surface of grid3D\n      minDistance: 40,\n      // Max distance to the surface of grid3D\n      maxDistance: 400\n    }\n  }\n});\necharts.util.merge(Grid3DModel.prototype, componentViewControlMixin);\necharts.util.merge(Grid3DModel.prototype, componentPostEffectMixin);\necharts.util.merge(Grid3DModel.prototype, componentLightMixin);\nexport default Grid3DModel;", "/**\n * @module echarts-gl/util/geometry/QuadsGeometry\n * @author Yi Shen(http://github.com/pissang)\n */\nimport Geometry from 'claygl/src/Geometry';\nimport * as echarts from 'echarts/lib/echarts';\nimport dynamicConvertMixin from './dynamicConvertMixin';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nvar vec3 = glmatrix.vec3;\n/**\n * @constructor\n * @alias module:echarts-gl/util/geometry/QuadsGeometry\n * @extends clay.Geometry\n */\n\nvar QuadsGeometry = Geometry.extend(function () {\n  return {\n    segmentScale: 1,\n\n    /**\n     * Need to use mesh to expand lines if lineWidth > MAX_LINE_WIDTH\n     */\n    useNativeLine: true,\n    attributes: {\n      position: new Geometry.Attribute('position', 'float', 3, 'POSITION'),\n      normal: new Geometry.Attribute('normal', 'float', 3, 'NORMAL'),\n      color: new Geometry.Attribute('color', 'float', 4, 'COLOR')\n    }\n  };\n},\n/** @lends module: echarts-gl/util/geometry/QuadsGeometry.prototype */\n{\n  /**\n   * Reset offset\n   */\n  resetOffset: function () {\n    this._vertexOffset = 0;\n    this._faceOffset = 0;\n  },\n\n  /**\n   * @param {number} nQuad\n   */\n  setQuadCount: function (nQuad) {\n    var attributes = this.attributes;\n    var vertexCount = this.getQuadVertexCount() * nQuad;\n    var triangleCount = this.getQuadTriangleCount() * nQuad;\n\n    if (this.vertexCount !== vertexCount) {\n      attributes.position.init(vertexCount);\n      attributes.normal.init(vertexCount);\n      attributes.color.init(vertexCount);\n    }\n\n    if (this.triangleCount !== triangleCount) {\n      this.indices = vertexCount > 0xffff ? new Uint32Array(triangleCount * 3) : new Uint16Array(triangleCount * 3);\n    }\n  },\n  getQuadVertexCount: function () {\n    return 4;\n  },\n  getQuadTriangleCount: function () {\n    return 2;\n  },\n\n  /**\n   * Add a quad, which in following order:\n   * 0-----1\n   * 3-----2\n   */\n  addQuad: function () {\n    var a = vec3.create();\n    var b = vec3.create();\n    var normal = vec3.create();\n    var indices = [0, 3, 1, 3, 2, 1];\n    return function (coords, color) {\n      var positionAttr = this.attributes.position;\n      var normalAttr = this.attributes.normal;\n      var colorAttr = this.attributes.color;\n      vec3.sub(a, coords[1], coords[0]);\n      vec3.sub(b, coords[2], coords[1]);\n      vec3.cross(normal, a, b);\n      vec3.normalize(normal, normal);\n\n      for (var i = 0; i < 4; i++) {\n        positionAttr.set(this._vertexOffset + i, coords[i]);\n        colorAttr.set(this._vertexOffset + i, color);\n        normalAttr.set(this._vertexOffset + i, normal);\n      }\n\n      var idx = this._faceOffset * 3;\n\n      for (var i = 0; i < 6; i++) {\n        this.indices[idx + i] = indices[i] + this._vertexOffset;\n      }\n\n      this._vertexOffset += 4;\n      this._faceOffset += 2;\n    };\n  }()\n});\necharts.util.defaults(QuadsGeometry.prototype, dynamicConvertMixin);\nexport default QuadsGeometry;", "import * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport retrieve from '../../util/retrieve';\nimport Lines3DGeometry from '../../util/geometry/Lines3D';\nimport QuadsGeometry from '../../util/geometry/Quads';\nvar firstNotNull = retrieve.firstNotNull;\nvar dimIndicesMap = {\n  // Left to right\n  x: 0,\n  // Far to near\n  y: 2,\n  // Bottom to up\n  z: 1\n};\n\nfunction updateFacePlane(node, plane, otherAxis, dir) {\n  var coord = [0, 0, 0];\n  var distance = dir < 0 ? otherAxis.getExtentMin() : otherAxis.getExtentMax();\n  coord[dimIndicesMap[otherAxis.dim]] = distance;\n  node.position.setArray(coord);\n  node.rotation.identity(); // Negative distance because on the opposite of normal direction.\n\n  plane.distance = -Math.abs(distance);\n  plane.normal.set(0, 0, 0);\n\n  if (otherAxis.dim === 'x') {\n    node.rotation.rotateY(dir * Math.PI / 2);\n    plane.normal.x = -dir;\n  } else if (otherAxis.dim === 'z') {\n    node.rotation.rotateX(-dir * Math.PI / 2);\n    plane.normal.y = -dir;\n  } else {\n    if (dir > 0) {\n      node.rotation.rotateY(Math.PI);\n    }\n\n    plane.normal.z = -dir;\n  }\n}\n\nfunction Grid3DFace(faceInfo, linesMaterial, quadsMaterial) {\n  this.rootNode = new graphicGL.Node();\n  var linesMesh = new graphicGL.Mesh({\n    geometry: new Lines3DGeometry({\n      useNativeLine: false\n    }),\n    material: linesMaterial,\n    castShadow: false,\n    ignorePicking: true,\n    $ignorePicking: true,\n    renderOrder: 1\n  });\n  var quadsMesh = new graphicGL.Mesh({\n    geometry: new QuadsGeometry(),\n    material: quadsMaterial,\n    castShadow: false,\n    culling: false,\n    ignorePicking: true,\n    $ignorePicking: true,\n    renderOrder: 0\n  }); // Quads are behind lines.\n\n  this.rootNode.add(quadsMesh);\n  this.rootNode.add(linesMesh);\n  this.faceInfo = faceInfo;\n  this.plane = new graphicGL.Plane();\n  this.linesMesh = linesMesh;\n  this.quadsMesh = quadsMesh;\n}\n\nGrid3DFace.prototype.update = function (grid3DModel, ecModel, api) {\n  var cartesian = grid3DModel.coordinateSystem;\n  var axes = [cartesian.getAxis(this.faceInfo[0]), cartesian.getAxis(this.faceInfo[1])];\n  var lineGeometry = this.linesMesh.geometry;\n  var quadsGeometry = this.quadsMesh.geometry;\n  lineGeometry.convertToDynamicArray(true);\n  quadsGeometry.convertToDynamicArray(true);\n\n  this._updateSplitLines(lineGeometry, axes, grid3DModel, api);\n\n  this._udpateSplitAreas(quadsGeometry, axes, grid3DModel, api);\n\n  lineGeometry.convertToTypedArray();\n  quadsGeometry.convertToTypedArray();\n  var otherAxis = cartesian.getAxis(this.faceInfo[2]);\n  updateFacePlane(this.rootNode, this.plane, otherAxis, this.faceInfo[3]);\n};\n\nGrid3DFace.prototype._updateSplitLines = function (geometry, axes, grid3DModel, api) {\n  var dpr = api.getDevicePixelRatio();\n  axes.forEach(function (axis, idx) {\n    var axisModel = axis.model;\n    var otherExtent = axes[1 - idx].getExtent();\n\n    if (axis.scale.isBlank()) {\n      return;\n    }\n\n    var splitLineModel = axisModel.getModel('splitLine', grid3DModel.getModel('splitLine')); // Render splitLines\n\n    if (splitLineModel.get('show')) {\n      var lineStyleModel = splitLineModel.getModel('lineStyle');\n      var lineColors = lineStyleModel.get('color');\n      var opacity = firstNotNull(lineStyleModel.get('opacity'), 1.0);\n      var lineWidth = firstNotNull(lineStyleModel.get('width'), 1.0);\n      lineColors = echarts.util.isArray(lineColors) ? lineColors : [lineColors];\n      var ticksCoords = axis.getTicksCoords({\n        tickModel: splitLineModel\n      });\n      var count = 0;\n\n      for (var i = 0; i < ticksCoords.length; i++) {\n        var tickCoord = ticksCoords[i].coord;\n        var lineColor = graphicGL.parseColor(lineColors[count % lineColors.length]);\n        lineColor[3] *= opacity;\n        var p0 = [0, 0, 0];\n        var p1 = [0, 0, 0]; // 0 - x, 1 - y\n\n        p0[idx] = p1[idx] = tickCoord;\n        p0[1 - idx] = otherExtent[0];\n        p1[1 - idx] = otherExtent[1];\n        geometry.addLine(p0, p1, lineColor, lineWidth * dpr);\n        count++;\n      }\n    }\n  });\n};\n\nGrid3DFace.prototype._udpateSplitAreas = function (geometry, axes, grid3DModel, api) {\n  axes.forEach(function (axis, idx) {\n    var axisModel = axis.model;\n    var otherExtent = axes[1 - idx].getExtent();\n\n    if (axis.scale.isBlank()) {\n      return;\n    }\n\n    var splitAreaModel = axisModel.getModel('splitArea', grid3DModel.getModel('splitArea')); // Render splitAreas\n\n    if (splitAreaModel.get('show')) {\n      var areaStyleModel = splitAreaModel.getModel('areaStyle');\n      var colors = areaStyleModel.get('color');\n      var opacity = firstNotNull(areaStyleModel.get('opacity'), 1.0);\n      colors = echarts.util.isArray(colors) ? colors : [colors];\n      var ticksCoords = axis.getTicksCoords({\n        tickModel: splitAreaModel,\n        clamp: true\n      });\n      var count = 0;\n      var prevP0 = [0, 0, 0];\n      var prevP1 = [0, 0, 0]; // 0 - x, 1 - y\n\n      for (var i = 0; i < ticksCoords.length; i++) {\n        var tickCoord = ticksCoords[i].coord;\n        var p0 = [0, 0, 0];\n        var p1 = [0, 0, 0]; // 0 - x, 1 - y\n\n        p0[idx] = p1[idx] = tickCoord;\n        p0[1 - idx] = otherExtent[0];\n        p1[1 - idx] = otherExtent[1];\n\n        if (i === 0) {\n          prevP0 = p0;\n          prevP1 = p1;\n          continue;\n        }\n\n        var color = graphicGL.parseColor(colors[count % colors.length]);\n        color[3] *= opacity;\n        geometry.addQuad([prevP0, p0, p1, prevP1], color);\n        prevP0 = p0;\n        prevP1 = p1;\n        count++;\n      }\n    }\n  });\n};\n\nexport default Grid3DFace;", "import * as echarts from 'echarts/lib/echarts';\nimport { createTextStyle } from 'echarts/lib/label/labelStyle';\nimport graphicGL from '../../util/graphicGL';\nimport Lines3DGeometry from '../../util/geometry/Lines3D';\nimport retrieve from '../../util/retrieve';\nimport LabelsMesh from '../../util/mesh/LabelsMesh';\nvar firstNotNull = retrieve.firstNotNull;\nvar dimIndicesMap = {\n  // Left to right\n  x: 0,\n  // Far to near\n  y: 2,\n  // Bottom to up\n  z: 1\n};\n\nfunction Grid3DAxis(dim, linesMaterial) {\n  var linesMesh = new graphicGL.Mesh({\n    geometry: new Lines3DGeometry({\n      useNativeLine: false\n    }),\n    material: linesMaterial,\n    castShadow: false,\n    ignorePicking: true,\n    renderOrder: 2\n  });\n  var axisLabelsMesh = new LabelsMesh();\n  axisLabelsMesh.material.depthMask = false;\n  var rootNode = new graphicGL.Node();\n  rootNode.add(linesMesh);\n  rootNode.add(axisLabelsMesh);\n  this.rootNode = rootNode;\n  this.dim = dim;\n  this.linesMesh = linesMesh;\n  this.labelsMesh = axisLabelsMesh;\n  this.axisLineCoords = null;\n  this.labelElements = [];\n}\n\nvar otherDim = {\n  x: 'y',\n  y: 'x',\n  z: 'y'\n};\n\nGrid3DAxis.prototype.update = function (grid3DModel, axisLabelSurface, api) {\n  var cartesian = grid3DModel.coordinateSystem;\n  var axis = cartesian.getAxis(this.dim);\n  var linesGeo = this.linesMesh.geometry;\n  var labelsGeo = this.labelsMesh.geometry;\n  linesGeo.convertToDynamicArray(true);\n  labelsGeo.convertToDynamicArray(true);\n  var axisModel = axis.model;\n  var extent = axis.getExtent();\n  var dpr = api.getDevicePixelRatio();\n  var axisLineModel = axisModel.getModel('axisLine', grid3DModel.getModel('axisLine'));\n  var axisTickModel = axisModel.getModel('axisTick', grid3DModel.getModel('axisTick'));\n  var axisLabelModel = axisModel.getModel('axisLabel', grid3DModel.getModel('axisLabel'));\n  var axisLineColor = axisLineModel.get('lineStyle.color'); // Render axisLine\n\n  if (axisLineModel.get('show')) {\n    var axisLineStyleModel = axisLineModel.getModel('lineStyle');\n    var p0 = [0, 0, 0];\n    var p1 = [0, 0, 0];\n    var idx = dimIndicesMap[axis.dim];\n    p0[idx] = extent[0];\n    p1[idx] = extent[1]; // Save some useful info.\n\n    this.axisLineCoords = [p0, p1];\n    var color = graphicGL.parseColor(axisLineColor);\n    var lineWidth = firstNotNull(axisLineStyleModel.get('width'), 1.0);\n    var opacity = firstNotNull(axisLineStyleModel.get('opacity'), 1.0);\n    color[3] *= opacity;\n    linesGeo.addLine(p0, p1, color, lineWidth * dpr);\n  } // Render axis ticksCoords\n\n\n  if (axisTickModel.get('show')) {\n    var lineStyleModel = axisTickModel.getModel('lineStyle');\n    var lineColor = graphicGL.parseColor(firstNotNull(lineStyleModel.get('color'), axisLineColor));\n    var lineWidth = firstNotNull(lineStyleModel.get('width'), 1.0);\n    lineColor[3] *= firstNotNull(lineStyleModel.get('opacity'), 1.0);\n    var ticksCoords = axis.getTicksCoords();\n    var tickLength = axisTickModel.get('length');\n\n    for (var i = 0; i < ticksCoords.length; i++) {\n      var tickCoord = ticksCoords[i].coord;\n      var p0 = [0, 0, 0];\n      var p1 = [0, 0, 0];\n      var idx = dimIndicesMap[axis.dim];\n      var otherIdx = dimIndicesMap[otherDim[axis.dim]]; // 0 : x, 1 : y\n\n      p0[idx] = p1[idx] = tickCoord;\n      p1[otherIdx] = tickLength;\n      linesGeo.addLine(p0, p1, lineColor, lineWidth * dpr);\n    }\n  }\n\n  this.labelElements = [];\n  var dpr = api.getDevicePixelRatio();\n\n  if (axisLabelModel.get('show')) {\n    var ticksCoords = axis.getTicksCoords();\n    var categoryData = axisModel.get('data');\n    var labelMargin = axisLabelModel.get('margin');\n    var labels = axis.getViewLabels();\n\n    for (var i = 0; i < labels.length; i++) {\n      var tickValue = labels[i].tickValue;\n      var formattedLabel = labels[i].formattedLabel;\n      var rawLabel = labels[i].rawLabel;\n      var tickCoord = axis.dataToCoord(tickValue);\n      var p = [0, 0, 0];\n      var idx = dimIndicesMap[axis.dim];\n      var otherIdx = dimIndicesMap[otherDim[axis.dim]]; // 0 : x, 1 : y\n\n      p[idx] = p[idx] = tickCoord;\n      p[otherIdx] = labelMargin;\n      var itemTextStyleModel = axisLabelModel;\n\n      if (categoryData && categoryData[tickValue] && categoryData[tickValue].textStyle) {\n        itemTextStyleModel = new echarts.Model(categoryData[tickValue].textStyle, axisLabelModel, axisModel.ecModel);\n      }\n\n      var textColor = firstNotNull(itemTextStyleModel.get('color'), axisLineColor);\n      var textEl = new echarts.graphic.Text({\n        style: createTextStyle(itemTextStyleModel, {\n          text: formattedLabel,\n          fill: typeof textColor === 'function' ? textColor( // (1) In category axis with data zoom, tick is not the original\n          // index of axis.data. So tick should not be exposed to user\n          // in category axis.\n          // (2) Compatible with previous version, which always returns labelStr.\n          // But in interval scale labelStr is like '223,445', which maked\n          // user repalce ','. So we modify it to return original val but remain\n          // it as 'string' to avoid error in replacing.\n          axis.type === 'category' ? rawLabel : axis.type === 'value' ? tickValue + '' : tickValue, i) : textColor,\n          verticalAlign: 'top',\n          align: 'left'\n        })\n      });\n      var coords = axisLabelSurface.add(textEl);\n      var rect = textEl.getBoundingRect();\n      labelsGeo.addSprite(p, [rect.width * dpr, rect.height * dpr], coords);\n      this.labelElements.push(textEl);\n    }\n  }\n\n  if (axisModel.get('name')) {\n    var nameTextStyleModel = axisModel.getModel('nameTextStyle');\n    var p = [0, 0, 0];\n    var idx = dimIndicesMap[axis.dim];\n    var otherIdx = dimIndicesMap[otherDim[axis.dim]];\n    var labelColor = firstNotNull(nameTextStyleModel.get('color'), axisLineColor);\n    var strokeColor = nameTextStyleModel.get('borderColor');\n    var lineWidth = nameTextStyleModel.get('borderWidth'); // TODO start and end\n\n    p[idx] = p[idx] = (extent[0] + extent[1]) / 2;\n    p[otherIdx] = axisModel.get('nameGap');\n    var textEl = new echarts.graphic.Text({\n      style: createTextStyle(nameTextStyleModel, {\n        text: axisModel.get('name'),\n        fill: labelColor,\n        stroke: strokeColor,\n        lineWidth: lineWidth\n      })\n    });\n    var coords = axisLabelSurface.add(textEl);\n    var rect = textEl.getBoundingRect();\n    labelsGeo.addSprite(p, [rect.width * dpr, rect.height * dpr], coords);\n    textEl.__idx = this.labelElements.length;\n    this.nameLabelElement = textEl;\n  }\n\n  this.labelsMesh.material.set('textureAtlas', axisLabelSurface.getTexture());\n  this.labelsMesh.material.set('uvScale', axisLabelSurface.getCoordsScale());\n  linesGeo.convertToTypedArray();\n  labelsGeo.convertToTypedArray();\n};\n\nGrid3DAxis.prototype.setSpriteAlign = function (textAlign, textVerticalAlign, api) {\n  var dpr = api.getDevicePixelRatio();\n  var labelGeo = this.labelsMesh.geometry;\n\n  for (var i = 0; i < this.labelElements.length; i++) {\n    var labelEl = this.labelElements[i];\n    var rect = labelEl.getBoundingRect();\n    labelGeo.setSpriteAlign(i, [rect.width * dpr, rect.height * dpr], textAlign, textVerticalAlign);\n  } // name label\n\n\n  var nameLabelEl = this.nameLabelElement;\n\n  if (nameLabelEl) {\n    var rect = nameLabelEl.getBoundingRect();\n    labelGeo.setSpriteAlign(nameLabelEl.__idx, [rect.width * dpr, rect.height * dpr], textAlign, textVerticalAlign);\n    labelGeo.dirty();\n  }\n\n  this.textAlign = textAlign;\n  this.textVerticalAlign = textVerticalAlign;\n};\n\nexport default Grid3DAxis;", "// TODO orthographic camera\nimport * as echarts from 'echarts/lib/echarts';\nimport { createTextStyle } from 'echarts/lib/label/labelStyle';\nimport graphicGL from '../../util/graphicGL';\nimport OrbitControl from '../../util/OrbitControl';\nimport Lines3DGeometry from '../../util/geometry/Lines3D';\nimport retrieve from '../../util/retrieve';\nvar firstNotNull = retrieve.firstNotNull;\nimport ZRTextureAtlasSurface from '../../util/ZRTextureAtlasSurface';\nimport SceneHelper from '../common/SceneHelper';\nimport Grid3DFace from './Grid3DFace';\nimport Grid3DAxis from './Grid3DAxis';\nimport LabelsMesh from '../../util/mesh/LabelsMesh';\nimport lines3DGLSL from '../../util/shader/lines3D.glsl.js';\ngraphicGL.Shader.import(lines3DGLSL);\nvar dimIndicesMap = {\n  // Left to right\n  x: 0,\n  // Far to near\n  y: 2,\n  // Bottom to up\n  z: 1\n};\nexport default echarts.ComponentView.extend({\n  type: 'grid3D',\n  __ecgl__: true,\n  init: function (ecModel, api) {\n    var FACES = [// planeDim0, planeDim1, offsetDim, dir on dim3 axis(gl), plane.\n    ['y', 'z', 'x', -1, 'left'], ['y', 'z', 'x', 1, 'right'], ['x', 'y', 'z', -1, 'bottom'], ['x', 'y', 'z', 1, 'top'], ['x', 'z', 'y', -1, 'far'], ['x', 'z', 'y', 1, 'near']];\n    var DIMS = ['x', 'y', 'z'];\n    var quadsMaterial = new graphicGL.Material({\n      // transparent: true,\n      shader: graphicGL.createShader('ecgl.color'),\n      depthMask: false,\n      transparent: true\n    });\n    var linesMaterial = new graphicGL.Material({\n      // transparent: true,\n      shader: graphicGL.createShader('ecgl.meshLines3D'),\n      depthMask: false,\n      transparent: true\n    });\n    quadsMaterial.define('fragment', 'DOUBLE_SIDED');\n    quadsMaterial.define('both', 'VERTEX_COLOR');\n    this.groupGL = new graphicGL.Node();\n    this._control = new OrbitControl({\n      zr: api.getZr()\n    });\n\n    this._control.init(); // Save mesh and other infos for each face.\n\n\n    this._faces = FACES.map(function (faceInfo) {\n      var face = new Grid3DFace(faceInfo, linesMaterial, quadsMaterial);\n      this.groupGL.add(face.rootNode);\n      return face;\n    }, this); // Save mesh and other infos for each axis.\n\n    this._axes = DIMS.map(function (dim) {\n      var axis = new Grid3DAxis(dim, linesMaterial);\n      this.groupGL.add(axis.rootNode);\n      return axis;\n    }, this);\n    var dpr = api.getDevicePixelRatio(); // Texture surface for label.\n\n    this._axisLabelSurface = new ZRTextureAtlasSurface({\n      width: 256,\n      height: 256,\n      devicePixelRatio: dpr\n    });\n\n    this._axisLabelSurface.onupdate = function () {\n      api.getZr().refresh();\n    };\n\n    this._axisPointerLineMesh = new graphicGL.Mesh({\n      geometry: new Lines3DGeometry({\n        useNativeLine: false\n      }),\n      material: linesMaterial,\n      castShadow: false,\n      // PENDING\n      ignorePicking: true,\n      renderOrder: 3\n    });\n    this.groupGL.add(this._axisPointerLineMesh);\n    this._axisPointerLabelsSurface = new ZRTextureAtlasSurface({\n      width: 128,\n      height: 128,\n      devicePixelRatio: dpr\n    });\n    this._axisPointerLabelsMesh = new LabelsMesh({\n      ignorePicking: true,\n      renderOrder: 4,\n      castShadow: false\n    });\n\n    this._axisPointerLabelsMesh.material.set('textureAtlas', this._axisPointerLabelsSurface.getTexture());\n\n    this.groupGL.add(this._axisPointerLabelsMesh);\n    this._lightRoot = new graphicGL.Node();\n    this._sceneHelper = new SceneHelper();\n\n    this._sceneHelper.initLight(this._lightRoot);\n  },\n  render: function (grid3DModel, ecModel, api) {\n    this._model = grid3DModel;\n    this._api = api;\n    var cartesian = grid3DModel.coordinateSystem; // Always have light.\n\n    cartesian.viewGL.add(this._lightRoot);\n\n    if (grid3DModel.get('show')) {\n      cartesian.viewGL.add(this.groupGL);\n    } else {\n      cartesian.viewGL.remove(this.groupGL);\n    } // cartesian.viewGL.setCameraType(grid3DModel.get('viewControl.projection'));\n\n\n    var control = this._control;\n    control.setViewGL(cartesian.viewGL);\n    var viewControlModel = grid3DModel.getModel('viewControl');\n    control.setFromViewControlModel(viewControlModel, 0);\n\n    this._axisLabelSurface.clear();\n\n    control.off('update');\n\n    if (grid3DModel.get('show')) {\n      this._faces.forEach(function (face) {\n        face.update(grid3DModel, ecModel, api);\n      }, this);\n\n      this._axes.forEach(function (axis) {\n        axis.update(grid3DModel, this._axisLabelSurface, api);\n      }, this);\n    }\n\n    control.on('update', this._onCameraChange.bind(this, grid3DModel, api), this);\n\n    this._sceneHelper.setScene(cartesian.viewGL.scene);\n\n    this._sceneHelper.updateLight(grid3DModel); // Set post effect\n\n\n    cartesian.viewGL.setPostEffect(grid3DModel.getModel('postEffect'), api);\n    cartesian.viewGL.setTemporalSuperSampling(grid3DModel.getModel('temporalSuperSampling'));\n\n    this._initMouseHandler(grid3DModel);\n  },\n  afterRender: function (grid3DModel, ecModel, api, layerGL) {\n    // Create ambient cubemap after render because we need to know the renderer.\n    // TODO\n    var renderer = layerGL.renderer;\n\n    this._sceneHelper.updateAmbientCubemap(renderer, grid3DModel, api);\n\n    this._sceneHelper.updateSkybox(renderer, grid3DModel, api);\n  },\n\n  /**\n   * showAxisPointer will be triggered by action.\n   */\n  showAxisPointer: function (grid3dModel, ecModel, api, payload) {\n    this._doShowAxisPointer();\n\n    this._updateAxisPointer(payload.value);\n  },\n\n  /**\n   * hideAxisPointer will be triggered by action.\n   */\n  hideAxisPointer: function (grid3dModel, ecModel, api, payload) {\n    this._doHideAxisPointer();\n  },\n  _initMouseHandler: function (grid3DModel) {\n    var cartesian = grid3DModel.coordinateSystem;\n    var viewGL = cartesian.viewGL; // TODO xAxis3D.axisPointer.show ?\n\n    if (grid3DModel.get('show') && grid3DModel.get('axisPointer.show')) {\n      viewGL.on('mousemove', this._updateAxisPointerOnMousePosition, this);\n    } else {\n      viewGL.off('mousemove', this._updateAxisPointerOnMousePosition);\n    }\n  },\n\n  /**\n   * Try find and show axisPointer on the intersect point\n   * of mouse ray with grid plane.\n   */\n  _updateAxisPointerOnMousePosition: function (e) {\n    // Ignore if mouse is on the element.\n    if (e.target) {\n      return;\n    }\n\n    var grid3DModel = this._model;\n    var cartesian = grid3DModel.coordinateSystem;\n    var viewGL = cartesian.viewGL;\n    var ray = viewGL.castRay(e.offsetX, e.offsetY, new graphicGL.Ray());\n    var nearestIntersectPoint;\n\n    for (var i = 0; i < this._faces.length; i++) {\n      var face = this._faces[i];\n\n      if (face.rootNode.invisible) {\n        continue;\n      } // Plane is not face the camera. flip it\n\n\n      if (face.plane.normal.dot(viewGL.camera.worldTransform.z) < 0) {\n        face.plane.normal.negate();\n      }\n\n      var point = ray.intersectPlane(face.plane);\n\n      if (!point) {\n        continue;\n      }\n\n      var axis0 = cartesian.getAxis(face.faceInfo[0]);\n      var axis1 = cartesian.getAxis(face.faceInfo[1]);\n      var idx0 = dimIndicesMap[face.faceInfo[0]];\n      var idx1 = dimIndicesMap[face.faceInfo[1]];\n\n      if (axis0.contain(point.array[idx0]) && axis1.contain(point.array[idx1])) {\n        nearestIntersectPoint = point;\n      }\n    }\n\n    if (nearestIntersectPoint) {\n      var data = cartesian.pointToData(nearestIntersectPoint.array, [], true);\n\n      this._updateAxisPointer(data);\n\n      this._doShowAxisPointer();\n    } else {\n      this._doHideAxisPointer();\n    }\n  },\n  _onCameraChange: function (grid3DModel, api) {\n    if (grid3DModel.get('show')) {\n      this._updateFaceVisibility();\n\n      this._updateAxisLinePosition();\n    }\n\n    var control = this._control;\n    api.dispatchAction({\n      type: 'grid3DChangeCamera',\n      alpha: control.getAlpha(),\n      beta: control.getBeta(),\n      distance: control.getDistance(),\n      center: control.getCenter(),\n      from: this.uid,\n      grid3DId: grid3DModel.id\n    });\n  },\n\n  /**\n   * Update visibility of each face when camera view changed, front face will be invisible.\n   * @private\n   */\n  _updateFaceVisibility: function () {\n    var camera = this._control.getCamera();\n\n    var viewSpacePos = new graphicGL.Vector3();\n    camera.update();\n\n    for (var idx = 0; idx < this._faces.length / 2; idx++) {\n      var depths = [];\n\n      for (var k = 0; k < 2; k++) {\n        var face = this._faces[idx * 2 + k];\n        face.rootNode.getWorldPosition(viewSpacePos);\n        viewSpacePos.transformMat4(camera.viewMatrix);\n        depths[k] = viewSpacePos.z;\n      } // Set the front face invisible\n\n\n      var frontIndex = depths[0] > depths[1] ? 0 : 1;\n      var frontFace = this._faces[idx * 2 + frontIndex];\n      var backFace = this._faces[idx * 2 + 1 - frontIndex]; // Update rotation.\n\n      frontFace.rootNode.invisible = true;\n      backFace.rootNode.invisible = false;\n    }\n  },\n\n  /**\n   * Update axis line position when camera view changed.\n   * @private\n   */\n  _updateAxisLinePosition: function () {\n    // Put xAxis, yAxis on x, y visible plane.\n    // Put zAxis on the left.\n    // TODO\n    var cartesian = this._model.coordinateSystem;\n    var xAxis = cartesian.getAxis('x');\n    var yAxis = cartesian.getAxis('y');\n    var zAxis = cartesian.getAxis('z');\n    var top = zAxis.getExtentMax();\n    var bottom = zAxis.getExtentMin();\n    var left = xAxis.getExtentMin();\n    var right = xAxis.getExtentMax();\n    var near = yAxis.getExtentMax();\n    var far = yAxis.getExtentMin();\n    var xAxisNode = this._axes[0].rootNode;\n    var yAxisNode = this._axes[1].rootNode;\n    var zAxisNode = this._axes[2].rootNode;\n    var faces = this._faces; // Notice: in cartesian up axis is z, but in webgl up axis is y.\n\n    var xAxisZOffset = faces[4].rootNode.invisible ? far : near;\n    var xAxisYOffset = faces[2].rootNode.invisible ? top : bottom;\n    var yAxisXOffset = faces[0].rootNode.invisible ? left : right;\n    var yAxisYOffset = faces[2].rootNode.invisible ? top : bottom;\n    var zAxisXOffset = faces[0].rootNode.invisible ? right : left;\n    var zAxisZOffset = faces[4].rootNode.invisible ? far : near;\n    xAxisNode.rotation.identity();\n    yAxisNode.rotation.identity();\n    zAxisNode.rotation.identity();\n\n    if (faces[4].rootNode.invisible) {\n      this._axes[0].flipped = true;\n      xAxisNode.rotation.rotateX(Math.PI);\n    }\n\n    if (faces[0].rootNode.invisible) {\n      this._axes[1].flipped = true;\n      yAxisNode.rotation.rotateZ(Math.PI);\n    }\n\n    if (faces[4].rootNode.invisible) {\n      this._axes[2].flipped = true;\n      zAxisNode.rotation.rotateY(Math.PI);\n    }\n\n    xAxisNode.position.set(0, xAxisYOffset, xAxisZOffset);\n    yAxisNode.position.set(yAxisXOffset, yAxisYOffset, 0); // Actually z\n\n    zAxisNode.position.set(zAxisXOffset, 0, zAxisZOffset); // Actually y\n\n    xAxisNode.update();\n    yAxisNode.update();\n    zAxisNode.update();\n\n    this._updateAxisLabelAlign();\n  },\n\n  /**\n   * Update label align on axis when axisLine position changed.\n   * @private\n   */\n  _updateAxisLabelAlign: function () {\n    // var cartesian = this._model.coordinateSystem;\n    var camera = this._control.getCamera();\n\n    var coords = [new graphicGL.Vector4(), new graphicGL.Vector4()];\n    var center = new graphicGL.Vector4();\n    this.groupGL.getWorldPosition(center);\n    center.w = 1.0;\n    center.transformMat4(camera.viewMatrix).transformMat4(camera.projectionMatrix);\n    center.x /= center.w;\n    center.y /= center.w;\n\n    this._axes.forEach(function (axisInfo) {\n      var lineCoords = axisInfo.axisLineCoords;\n      var labelGeo = axisInfo.labelsMesh.geometry;\n\n      for (var i = 0; i < coords.length; i++) {\n        coords[i].setArray(lineCoords[i]);\n        coords[i].w = 1.0;\n        coords[i].transformMat4(axisInfo.rootNode.worldTransform).transformMat4(camera.viewMatrix).transformMat4(camera.projectionMatrix);\n        coords[i].x /= coords[i].w;\n        coords[i].y /= coords[i].w;\n      }\n\n      var dx = coords[1].x - coords[0].x;\n      var dy = coords[1].y - coords[0].y;\n      var cx = (coords[1].x + coords[0].x) / 2;\n      var cy = (coords[1].y + coords[0].y) / 2;\n      var textAlign;\n      var verticalAlign;\n\n      if (Math.abs(dy / dx) < 0.5) {\n        textAlign = 'center';\n        verticalAlign = cy > center.y ? 'bottom' : 'top';\n      } else {\n        verticalAlign = 'middle';\n        textAlign = cx > center.x ? 'left' : 'right';\n      } // axis labels\n\n\n      axisInfo.setSpriteAlign(textAlign, verticalAlign, this._api);\n    }, this);\n  },\n  _doShowAxisPointer: function () {\n    if (!this._axisPointerLineMesh.invisible) {\n      return;\n    }\n\n    this._axisPointerLineMesh.invisible = false;\n    this._axisPointerLabelsMesh.invisible = false;\n\n    this._api.getZr().refresh();\n  },\n  _doHideAxisPointer: function () {\n    if (this._axisPointerLineMesh.invisible) {\n      return;\n    }\n\n    this._axisPointerLineMesh.invisible = true;\n    this._axisPointerLabelsMesh.invisible = true;\n\n    this._api.getZr().refresh();\n  },\n\n  /**\n   * @private updateAxisPointer.\n   */\n  _updateAxisPointer: function (data) {\n    var cartesian = this._model.coordinateSystem;\n    var point = cartesian.dataToPoint(data);\n    var axisPointerLineMesh = this._axisPointerLineMesh;\n    var linesGeo = axisPointerLineMesh.geometry;\n\n    var axisPointerParentModel = this._model.getModel('axisPointer');\n\n    var dpr = this._api.getDevicePixelRatio();\n\n    linesGeo.convertToDynamicArray(true);\n\n    function ifShowAxisPointer(axis) {\n      return retrieve.firstNotNull(axis.model.get('axisPointer.show'), axisPointerParentModel.get('show'));\n    }\n\n    function getAxisColorAndLineWidth(axis) {\n      var axisPointerModel = axis.model.getModel('axisPointer', axisPointerParentModel);\n      var lineStyleModel = axisPointerModel.getModel('lineStyle');\n      var color = graphicGL.parseColor(lineStyleModel.get('color'));\n      var lineWidth = firstNotNull(lineStyleModel.get('width'), 1);\n      var opacity = firstNotNull(lineStyleModel.get('opacity'), 1);\n      color[3] *= opacity;\n      return {\n        color: color,\n        lineWidth: lineWidth\n      };\n    }\n\n    for (var k = 0; k < this._faces.length; k++) {\n      var face = this._faces[k];\n\n      if (face.rootNode.invisible) {\n        continue;\n      }\n\n      var faceInfo = face.faceInfo;\n      var otherCoord = faceInfo[3] < 0 ? cartesian.getAxis(faceInfo[2]).getExtentMin() : cartesian.getAxis(faceInfo[2]).getExtentMax();\n      var otherDimIdx = dimIndicesMap[faceInfo[2]]; // Line on face.\n\n      for (var i = 0; i < 2; i++) {\n        var dim = faceInfo[i];\n        var faceOtherDim = faceInfo[1 - i];\n        var axis = cartesian.getAxis(dim);\n        var faceOtherAxis = cartesian.getAxis(faceOtherDim);\n\n        if (!ifShowAxisPointer(axis)) {\n          continue;\n        }\n\n        var p0 = [0, 0, 0];\n        var p1 = [0, 0, 0];\n        var dimIdx = dimIndicesMap[dim];\n        var faceOtherDimIdx = dimIndicesMap[faceOtherDim];\n        p0[dimIdx] = p1[dimIdx] = point[dimIdx];\n        p0[otherDimIdx] = p1[otherDimIdx] = otherCoord;\n        p0[faceOtherDimIdx] = faceOtherAxis.getExtentMin();\n        p1[faceOtherDimIdx] = faceOtherAxis.getExtentMax();\n        var colorAndLineWidth = getAxisColorAndLineWidth(axis);\n        linesGeo.addLine(p0, p1, colorAndLineWidth.color, colorAndLineWidth.lineWidth * dpr);\n      } // Project line.\n\n\n      if (ifShowAxisPointer(cartesian.getAxis(faceInfo[2]))) {\n        var p0 = point.slice();\n        var p1 = point.slice();\n        p1[otherDimIdx] = otherCoord;\n        var colorAndLineWidth = getAxisColorAndLineWidth(cartesian.getAxis(faceInfo[2]));\n        linesGeo.addLine(p0, p1, colorAndLineWidth.color, colorAndLineWidth.lineWidth * dpr);\n      }\n    }\n\n    linesGeo.convertToTypedArray();\n\n    this._updateAxisPointerLabelsMesh(data);\n\n    this._api.getZr().refresh();\n  },\n  _updateAxisPointerLabelsMesh: function (data) {\n    var grid3dModel = this._model;\n    var axisPointerLabelsMesh = this._axisPointerLabelsMesh;\n    var axisPointerLabelsSurface = this._axisPointerLabelsSurface;\n    var cartesian = grid3dModel.coordinateSystem;\n    var axisPointerParentModel = grid3dModel.getModel('axisPointer');\n    axisPointerLabelsMesh.geometry.convertToDynamicArray(true);\n    axisPointerLabelsSurface.clear();\n    var otherDim = {\n      x: 'y',\n      y: 'x',\n      z: 'y'\n    };\n\n    this._axes.forEach(function (axisInfo, idx) {\n      var axis = cartesian.getAxis(axisInfo.dim);\n      var axisModel = axis.model;\n      var axisPointerModel = axisModel.getModel('axisPointer', axisPointerParentModel);\n      var labelModel = axisPointerModel.getModel('label');\n      var lineColor = axisPointerModel.get('lineStyle.color');\n\n      if (!labelModel.get('show') || !axisPointerModel.get('show')) {\n        return;\n      }\n\n      var val = data[idx];\n      var formatter = labelModel.get('formatter');\n      var text = axis.scale.getLabel({\n        value: val\n      });\n\n      if (formatter != null) {\n        text = formatter(text, data);\n      } else {\n        if (axis.scale.type === 'interval' || axis.scale.type === 'log') {\n          var precision = echarts.number.getPrecisionSafe(axis.scale.getTicks()[0]);\n          text = val.toFixed(precision + 2);\n        }\n      }\n\n      var labelColor = labelModel.get('color');\n      var textEl = new echarts.graphic.Text({\n        style: createTextStyle(labelModel, {\n          text: text,\n          fill: labelColor || lineColor,\n          align: 'left',\n          verticalAlign: 'top'\n        })\n      });\n      var coords = axisPointerLabelsSurface.add(textEl);\n      var rect = textEl.getBoundingRect();\n\n      var dpr = this._api.getDevicePixelRatio();\n\n      var pos = axisInfo.rootNode.position.toArray();\n      var otherIdx = dimIndicesMap[otherDim[axisInfo.dim]];\n      pos[otherIdx] += (axisInfo.flipped ? -1 : 1) * labelModel.get('margin');\n      pos[dimIndicesMap[axisInfo.dim]] = axis.dataToCoord(data[idx]);\n      axisPointerLabelsMesh.geometry.addSprite(pos, [rect.width * dpr, rect.height * dpr], coords, axisInfo.textAlign, axisInfo.textVerticalAlign);\n    }, this);\n\n    axisPointerLabelsSurface.getZr().refreshImmediately();\n    axisPointerLabelsMesh.material.set('uvScale', axisPointerLabelsSurface.getCoordsScale());\n    axisPointerLabelsMesh.geometry.convertToTypedArray();\n  },\n  dispose: function () {\n    this.groupGL.removeAll();\n\n    this._control.dispose();\n\n    this._axisLabelSurface.dispose();\n\n    this._axisPointerLabelsSurface.dispose();\n  }\n});", "import * as echarts from 'echarts/lib/echarts';\nimport Cartesian from 'echarts/lib/coord/cartesian/Cartesian';\n\nfunction Cartesian3D(name) {\n  Cartesian.call(this, name);\n  this.type = 'cartesian3D';\n  this.dimensions = ['x', 'y', 'z'];\n  this.size = [0, 0, 0];\n}\n\nCartesian3D.prototype = {\n  constructor: Cartesian3D,\n  model: null,\n  containPoint: function (point) {\n    return this.getAxis('x').contain(point[0]) && this.getAxis('y').contain(point[2]) && this.getAxis('z').contain(point[1]);\n  },\n  containData: function (data) {\n    return this.getAxis('x').containData(data[0]) && this.getAxis('y').containData(data[1]) && this.getAxis('z').containData(data[2]);\n  },\n  dataToPoint: function (data, out, clamp) {\n    out = out || [];\n    out[0] = this.getAxis('x').dataToCoord(data[0], clamp);\n    out[2] = this.getAxis('y').dataToCoord(data[1], clamp);\n    out[1] = this.getAxis('z').dataToCoord(data[2], clamp);\n    return out;\n  },\n  pointToData: function (point, out, clamp) {\n    out = out || [];\n    out[0] = this.getAxis('x').coordToData(point[0], clamp);\n    out[1] = this.getAxis('y').coordToData(point[2], clamp);\n    out[2] = this.getAxis('z').coordToData(point[1], clamp);\n    return out;\n  }\n};\necharts.util.inherits(Cartesian3D, Cartesian);\nexport default Cartesian3D;", "import * as echarts from 'echarts/lib/echarts';\n\nfunction Axis3D(dim, scale, extent) {\n  echarts.Axis.call(this, dim, scale, extent);\n}\n\nAxis3D.prototype = {\n  constructor: Axis3D,\n  getExtentMin: function () {\n    var extent = this._extent;\n    return Math.min(extent[0], extent[1]);\n  },\n  getExtentMax: function () {\n    var extent = this._extent;\n    return Math.max(extent[0], extent[1]);\n  },\n  calculateCategoryInterval: function () {\n    // TODO consider label length\n    return Math.floor(this.scale.count() / 8);\n  }\n};\necharts.util.inherits(Axis3D, echarts.Axis);\nexport default Axis3D;", "import Cartesian3D from './grid3D/Cartesian3D';\nimport Axis3D from './grid3D/Axis3D';\nimport * as echarts from 'echarts/lib/echarts';\nimport { getLayoutRect } from 'echarts/lib/util/layout';\nimport ViewGL from '../core/ViewGL';\nimport retrieve from '../util/retrieve';\n\nfunction resizeCartesian3D(grid3DModel, api) {\n  // Use left/top/width/height\n  var boxLayoutOption = grid3DModel.getBoxLayoutParams();\n  var viewport = getLayoutRect(boxLayoutOption, {\n    width: api.getWidth(),\n    height: api.getHeight()\n  }); // Flip Y\n\n  viewport.y = api.getHeight() - viewport.y - viewport.height;\n  this.viewGL.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, api.getDevicePixelRatio());\n  var boxWidth = grid3DModel.get('boxWidth');\n  var boxHeight = grid3DModel.get('boxHeight');\n  var boxDepth = grid3DModel.get('boxDepth');\n\n  if (process.env.NODE_ENV !== 'production') {\n    ['x', 'y', 'z'].forEach(function (dim) {\n      if (!this.getAxis(dim)) {\n        throw new Error('Grid' + grid3DModel.id + ' don\\'t have ' + dim + 'Axis');\n      }\n    }, this);\n  }\n\n  this.getAxis('x').setExtent(-boxWidth / 2, boxWidth / 2); // From near to far\n\n  this.getAxis('y').setExtent(boxDepth / 2, -boxDepth / 2);\n  this.getAxis('z').setExtent(-boxHeight / 2, boxHeight / 2);\n  this.size = [boxWidth, boxHeight, boxDepth];\n}\n\nfunction updateCartesian3D(ecModel, api) {\n  var dataExtents = {};\n\n  function unionDataExtents(dim, extent) {\n    dataExtents[dim] = dataExtents[dim] || [Infinity, -Infinity];\n    dataExtents[dim][0] = Math.min(extent[0], dataExtents[dim][0]);\n    dataExtents[dim][1] = Math.max(extent[1], dataExtents[dim][1]);\n  } // Get data extents for scale.\n\n\n  ecModel.eachSeries(function (seriesModel) {\n    if (seriesModel.coordinateSystem !== this) {\n      return;\n    }\n\n    var data = seriesModel.getData();\n    ['x', 'y', 'z'].forEach(function (coordDim) {\n      data.mapDimensionsAll(coordDim, true).forEach(function (dataDim) {\n        unionDataExtents(coordDim, data.getDataExtent(dataDim, true));\n      });\n    });\n  }, this);\n  ['xAxis3D', 'yAxis3D', 'zAxis3D'].forEach(function (axisType) {\n    ecModel.eachComponent(axisType, function (axisModel) {\n      var dim = axisType.charAt(0);\n      var grid3DModel = axisModel.getReferringComponents('grid3D').models[0];\n      var cartesian3D = grid3DModel.coordinateSystem;\n\n      if (cartesian3D !== this) {\n        return;\n      }\n\n      var axis = cartesian3D.getAxis(dim);\n\n      if (axis) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn('Can\\'t have two %s in one grid3D', axisType);\n        }\n\n        return;\n      }\n\n      var scale = echarts.helper.createScale(dataExtents[dim] || [Infinity, -Infinity], axisModel);\n      axis = new Axis3D(dim, scale);\n      axis.type = axisModel.get('type');\n      var isCategory = axis.type === 'category';\n      axis.onBand = isCategory && axisModel.get('boundaryGap');\n      axis.inverse = axisModel.get('inverse');\n      axisModel.axis = axis;\n      axis.model = axisModel; // override `echarts/coord/Axis#getLabelModel`\n\n      axis.getLabelModel = function () {\n        return axisModel.getModel('axisLabel', grid3DModel.getModel('axisLabel'));\n      }; // override `echarts/coord/Axis#getTickModel`\n\n\n      axis.getTickModel = function () {\n        return axisModel.getModel('axisTick', grid3DModel.getModel('axisTick'));\n      };\n\n      cartesian3D.addAxis(axis);\n    }, this);\n  }, this);\n  this.resize(this.model, api);\n}\n\nvar grid3DCreator = {\n  dimensions: Cartesian3D.prototype.dimensions,\n  create: function (ecModel, api) {\n    var cartesian3DList = [];\n    ecModel.eachComponent('grid3D', function (grid3DModel) {\n      // FIXME\n      grid3DModel.__viewGL = grid3DModel.__viewGL || new ViewGL();\n      var cartesian3D = new Cartesian3D();\n      cartesian3D.model = grid3DModel;\n      cartesian3D.viewGL = grid3DModel.__viewGL;\n      grid3DModel.coordinateSystem = cartesian3D;\n      cartesian3DList.push(cartesian3D); // Inject resize and update\n\n      cartesian3D.resize = resizeCartesian3D;\n      cartesian3D.update = updateCartesian3D;\n    });\n    var axesTypes = ['xAxis3D', 'yAxis3D', 'zAxis3D'];\n\n    function findAxesModels(seriesModel, ecModel) {\n      return axesTypes.map(function (axisType) {\n        var axisModel = seriesModel.getReferringComponents(axisType).models[0];\n\n        if (axisModel == null) {\n          axisModel = ecModel.getComponent(axisType);\n        }\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (!axisModel) {\n            throw new Error(axisType + ' \"' + retrieve.firstNotNull(seriesModel.get(axisType + 'Index'), seriesModel.get(axisType + 'Id'), 0) + '\" not found');\n          }\n        }\n\n        return axisModel;\n      });\n    }\n\n    ecModel.eachSeries(function (seriesModel) {\n      if (seriesModel.get('coordinateSystem') !== 'cartesian3D') {\n        return;\n      }\n\n      var firstGridModel = seriesModel.getReferringComponents('grid3D').models[0];\n\n      if (firstGridModel == null) {\n        var axesModels = findAxesModels(seriesModel, ecModel);\n        var firstGridModel = axesModels[0].getCoordSysModel();\n        axesModels.forEach(function (axisModel) {\n          var grid3DModel = axisModel.getCoordSysModel();\n\n          if (process.env.NODE_ENV !== 'production') {\n            if (!grid3DModel) {\n              throw new Error('grid3D \"' + retrieve.firstNotNull(axisModel.get('gridIndex'), axisModel.get('gridId'), 0) + '\" not found');\n            }\n\n            if (grid3DModel !== firstGridModel) {\n              throw new Error('xAxis3D, yAxis3D, zAxis3D must use the same grid');\n            }\n          }\n        });\n      }\n\n      var coordSys = firstGridModel.coordinateSystem;\n      seriesModel.coordinateSystem = coordSys;\n    });\n    return cartesian3DList;\n  }\n};\nexport default grid3DCreator;", "import * as echarts from 'echarts/lib/echarts';\nvar Axis3DModel = echarts.ComponentModel.extend({\n  type: 'cartesian3DAxis',\n  axis: null,\n\n  /**\n   * @override\n   */\n  getCoordSysModel: function () {\n    return this.ecModel.queryComponents({\n      mainType: 'grid3D',\n      index: this.option.gridIndex,\n      id: this.option.gridId\n    })[0];\n  }\n});\necharts.helper.mixinAxisModelCommonMethods(Axis3DModel);\nexport default Axis3DModel;", "import * as echarts from 'echarts/lib/echarts';\nvar defaultOption = {\n  show: true,\n  grid3DIndex: 0,\n  // 反向坐标轴\n  inverse: false,\n  // 坐标轴名字\n  name: '',\n  // 坐标轴名字位置\n  nameLocation: 'middle',\n  nameTextStyle: {\n    fontSize: 16\n  },\n  // 文字与轴线距离\n  nameGap: 20,\n  axisPointer: {},\n  axisLine: {},\n  // 坐标轴小标记\n  axisTick: {},\n  axisLabel: {},\n  // 分隔区域\n  splitArea: {}\n};\nvar categoryAxis = echarts.util.merge({\n  // 类目起始和结束两端空白策略\n  boundaryGap: true,\n  // splitArea: {\n  // show: false\n  // },\n  // 坐标轴小标记\n  axisTick: {\n    // If tick is align with label when boundaryGap is true\n    // Default with axisTick\n    alignWithLabel: false,\n    interval: 'auto'\n  },\n  // 坐标轴文本标签，详见axis.axisLabel\n  axisLabel: {\n    interval: 'auto'\n  },\n  axisPointer: {\n    label: {\n      show: false\n    }\n  }\n}, defaultOption);\nvar valueAxis = echarts.util.merge({\n  // 数值起始和结束两端空白策略\n  boundaryGap: [0, 0],\n  // 最小值, 设置成 'dataMin' 则从数据中计算最小值\n  // min: null,\n  // 最大值，设置成 'dataMax' 则从数据中计算最大值\n  // max: null,\n  // 脱离0值比例，放大聚焦到最终_min，_max区间\n  // scale: false,\n  // 分割段数，默认为5\n  splitNumber: 5,\n  // Minimum interval\n  // minInterval: null\n  axisPointer: {\n    label: {}\n  }\n}, defaultOption); // FIXME\n\nvar timeAxis = echarts.util.defaults({\n  scale: true,\n  min: 'dataMin',\n  max: 'dataMax'\n}, valueAxis);\nvar logAxis = echarts.util.defaults({\n  logBase: 10\n}, valueAxis);\nlogAxis.scale = true;\nexport default {\n  categoryAxis3D: categoryAxis,\n  valueAxis3D: valueAxis,\n  timeAxis3D: timeAxis,\n  logAxis3D: logAxis\n};", "import * as echarts from 'echarts/lib/echarts';\nimport axisDefault from './axis3DDefault';\nimport OrdinalMeta from 'echarts/lib/data/OrdinalMeta';\nvar AXIS_TYPES = ['value', 'category', 'time', 'log'];\n/**\n * Generate sub axis model class\n * @param {} registers\n * @param {string} dim 'x' 'y' 'radius' 'angle' 'parallel'\n * @param {module:echarts/model/Component} BaseAxisModelClass\n * @param {Function} axisTypeDefaulter\n * @param {Object} [extraDefaultOption]\n */\n\nexport default function (registers, dim, BaseAxisModelClass, axisTypeDefaulter, extraDefaultOption) {\n  AXIS_TYPES.forEach(function (axisType) {\n    var AxisModel = BaseAxisModelClass.extend({\n      type: dim + 'Axis3D.' + axisType,\n\n      /**\n       * @type readOnly\n       */\n      __ordinalMeta: null,\n      mergeDefaultAndTheme: function (option, ecModel) {\n        var themeModel = ecModel.getTheme();\n        echarts.util.merge(option, themeModel.get(axisType + 'Axis3D'));\n        echarts.util.merge(option, this.getDefaultOption());\n        option.type = axisTypeDefaulter(dim, option);\n      },\n\n      /**\n       * @override\n       */\n      optionUpdated: function () {\n        var thisOption = this.option;\n\n        if (thisOption.type === 'category') {\n          this.__ordinalMeta = OrdinalMeta.createByAxisModel(this);\n        }\n      },\n      getCategories: function () {\n        if (this.option.type === 'category') {\n          return this.__ordinalMeta.categories;\n        }\n      },\n      getOrdinalMeta: function () {\n        return this.__ordinalMeta;\n      },\n      defaultOption: echarts.util.merge(echarts.util.clone(axisDefault[axisType + 'Axis3D']), extraDefaultOption || {}, true)\n    });\n    registers.registerComponentModel(AxisModel);\n  }); // TODO\n\n  registers.registerSubTypeDefaulter(dim + 'Axis3D', echarts.util.curry(axisTypeDefaulter, dim));\n}\n;", "// TODO ECharts GL must be imported whatever component,charts is imported.\nimport '../../echarts-gl';\nimport Grid3DModel from './Grid3DModel';\nimport Grid3DView from './Grid3DView';\nimport grid3DCreator from '../../coord/grid3DCreator';\nimport Axis3DModel from './Axis3DModel';\nimport createAxis3DModel from './createAxis3DModel';\n\nfunction getAxisType(axisDim, option) {\n  // Default axis with data is category axis\n  return option.type || (option.data ? 'category' : 'value');\n}\n\nexport function install(registers) {\n  registers.registerComponentModel(Grid3DModel);\n  registers.registerComponentView(Grid3DView);\n  registers.registerCoordinateSystem('grid3D', grid3DCreator);\n  ['x', 'y', 'z'].forEach(function (dim) {\n    createAxis3DModel(registers, dim, Axis3DModel, getAxisType, {\n      name: dim.toUpperCase()\n    });\n    const AxisView = registers.ComponentView.extend({\n      type: dim + 'Axis3D'\n    });\n    registers.registerComponentView(AxisView);\n  });\n  registers.registerAction({\n    type: 'grid3DChangeCamera',\n    event: 'grid3dcamerachanged',\n    update: 'series:updateCamera'\n  }, function (payload, ecModel) {\n    ecModel.eachComponent({\n      mainType: 'grid3D',\n      query: payload\n    }, function (componentModel) {\n      componentModel.setView(payload);\n    });\n  });\n  registers.registerAction({\n    type: 'grid3DShowAxisPointer',\n    event: 'grid3dshowaxispointer',\n    update: 'grid3D:showAxisPointer'\n  }, function (payload, ecModel) {});\n  registers.registerAction({\n    type: 'grid3DHideAxisPointer',\n    event: 'grid3dhideaxispointer',\n    update: 'grid3D:hideAxisPointer'\n  }, function (payload, ecModel) {});\n}", "import * as echarts from 'echarts/lib/echarts';\nimport componentViewControlMixin from '../common/componentViewControlMixin';\nimport componentPostEffectMixin from '../common/componentPostEffectMixin';\nimport componentLightMixin from '../common/componentLightMixin';\nimport componentShadingMixin from '../common/componentShadingMixin';\n\nfunction defaultId(option, idx) {\n  option.id = option.id || option.name || idx + '';\n}\n\nvar GlobeModel = echarts.ComponentModel.extend({\n  type: 'globe',\n  layoutMode: 'box',\n  coordinateSystem: null,\n  init: function () {\n    GlobeModel.superApply(this, 'init', arguments);\n    echarts.util.each(this.option.layers, function (layerOption, idx) {\n      echarts.util.merge(layerOption, this.defaultLayerOption);\n      defaultId(layerOption, idx);\n    }, this);\n  },\n  mergeOption: function (option) {\n    // TODO test\n    var oldLayers = this.option.layers;\n    this.option.layers = null;\n    GlobeModel.superApply(this, 'mergeOption', arguments);\n\n    function createLayerMap(layers) {\n      return echarts.util.reduce(layers, function (obj, layerOption, idx) {\n        defaultId(layerOption, idx);\n        obj[layerOption.id] = layerOption;\n        return obj;\n      }, {});\n    }\n\n    if (oldLayers && oldLayers.length) {\n      var newLayerMap = createLayerMap(option.layers);\n      var oldLayerMap = createLayerMap(oldLayers);\n\n      for (var id in newLayerMap) {\n        if (oldLayerMap[id]) {\n          echarts.util.merge(oldLayerMap[id], newLayerMap[id], true);\n        } else {\n          oldLayers.push(option.layers[id]);\n        }\n      } // Copy back\n\n\n      this.option.layers = oldLayers;\n    } // else overwrite\n    // Set default\n\n\n    echarts.util.each(this.option.layers, function (layerOption) {\n      echarts.util.merge(layerOption, this.defaultLayerOption);\n    }, this);\n  },\n  optionUpdated: function () {\n    this.updateDisplacementHash();\n  },\n  defaultLayerOption: {\n    show: true,\n    type: 'overlay'\n  },\n  defaultOption: {\n    show: true,\n    zlevel: -10,\n    // Layout used for viewport\n    left: 0,\n    top: 0,\n    width: '100%',\n    height: '100%',\n    environment: 'auto',\n    baseColor: '#fff',\n    // Base albedo texture\n    baseTexture: '',\n    // Height texture for bump mapping and vertex displacement\n    heightTexture: '',\n    // Texture for vertex displacement, default use heightTexture\n    displacementTexture: '',\n    // Scale of vertex displacement, available only if displacementTexture is set.\n    displacementScale: 0,\n    // Detail of displacement. 'low', 'medium', 'high', 'ultra'\n    displacementQuality: 'medium',\n    // Globe radius\n    globeRadius: 100,\n    // Globe outer radius. Which is max of altitude.\n    globeOuterRadius: 150,\n    // Shading of globe\n    shading: 'lambert',\n    // Extend light\n    light: {\n      // Main sun light\n      main: {\n        // Time, default it will use system time\n        time: ''\n      }\n    },\n    // atmosphere\n    atmosphere: {\n      show: false,\n      offset: 5,\n      color: '#ffffff',\n      glowPower: 6.0,\n      innerGlowPower: 2.0\n    },\n    // light\n    // postEffect\n    // temporalSuperSampling\n    viewControl: {\n      autoRotate: true,\n      panSensitivity: 0,\n      targetCoord: null\n    },\n    // {\n    //     show: true,\n    //     name: 'cloud',\n    //     type: 'overlay',\n    //     shading: 'lambert',\n    //     distance: 10,\n    //     texture: ''\n    // }\n    // {\n    //     type: 'blend',\n    //     blendTo: 'albedo'\n    //     blendType: 'source-over'\n    // }\n    layers: []\n  },\n  setDisplacementData: function (data, width, height) {\n    this.displacementData = data;\n    this.displacementWidth = width;\n    this.displacementHeight = height;\n  },\n  getDisplacementTexture: function () {\n    return this.get('displacementTexture') || this.get('heightTexture');\n  },\n  getDisplacemenScale: function () {\n    var displacementTexture = this.getDisplacementTexture();\n    var displacementScale = this.get('displacementScale');\n\n    if (!displacementTexture || displacementTexture === 'none') {\n      displacementScale = 0;\n    }\n\n    return displacementScale;\n  },\n  hasDisplacement: function () {\n    return this.getDisplacemenScale() > 0;\n  },\n  _displacementChanged: true,\n  _displacementScale: 0,\n  updateDisplacementHash: function () {\n    var displacementTexture = this.getDisplacementTexture();\n    var displacementScale = this.getDisplacemenScale();\n    this._displacementChanged = this._displacementTexture !== displacementTexture || this._displacementScale !== displacementScale;\n    this._displacementTexture = displacementTexture;\n    this._displacementScale = displacementScale;\n  },\n  isDisplacementChanged: function () {\n    return this._displacementChanged;\n  }\n});\necharts.util.merge(GlobeModel.prototype, componentViewControlMixin);\necharts.util.merge(GlobeModel.prototype, componentPostEffectMixin);\necharts.util.merge(GlobeModel.prototype, componentLightMixin);\necharts.util.merge(GlobeModel.prototype, componentShadingMixin);\nexport default GlobeModel;", "/*\n (c) 2011-2014, Vladimir Agafonkin\n SunCalc is a JavaScript library for calculating sun/mooon position and light phases.\n https://github.com/mourner/suncalc\n*/\n// shortcuts for easier to read formulas\nvar PI = Math.PI,\n    sin = Math.sin,\n    cos = Math.cos,\n    tan = Math.tan,\n    asin = Math.asin,\n    atan = Math.atan2,\n    rad = PI / 180; // sun calculations are based on http://aa.quae.nl/en/reken/zonpositie.html formulas\n// date/time constants and conversions\n\nvar dayMs = 1000 * 60 * 60 * 24,\n    J1970 = 2440588,\n    J2000 = 2451545;\n\nfunction toJulian(date) {\n  return date.valueOf() / dayMs - 0.5 + J1970;\n}\n\nfunction toDays(date) {\n  return toJulian(date) - J2000;\n} // general calculations for position\n\n\nvar e = rad * 23.4397; // obliquity of the Earth\n\nfunction rightAscension(l, b) {\n  return atan(sin(l) * cos(e) - tan(b) * sin(e), cos(l));\n}\n\nfunction declination(l, b) {\n  return asin(sin(b) * cos(e) + cos(b) * sin(e) * sin(l));\n}\n\nfunction azimuth(H, phi, dec) {\n  return atan(sin(H), cos(H) * sin(phi) - tan(dec) * cos(phi));\n}\n\nfunction altitude(H, phi, dec) {\n  return asin(sin(phi) * sin(dec) + cos(phi) * cos(dec) * cos(H));\n}\n\nfunction siderealTime(d, lw) {\n  return rad * (280.16 + 360.9856235 * d) - lw;\n} // general sun calculations\n\n\nfunction solarMeanAnomaly(d) {\n  return rad * (357.5291 + 0.98560028 * d);\n}\n\nfunction eclipticLongitude(M) {\n  var C = rad * (1.9148 * sin(M) + 0.02 * sin(2 * M) + 0.0003 * sin(3 * M)),\n      // equation of center\n  P = rad * 102.9372; // perihelion of the Earth\n\n  return M + C + P + PI;\n}\n\nfunction sunCoords(d) {\n  var M = solarMeanAnomaly(d),\n      L = eclipticLongitude(M);\n  return {\n    dec: declination(L, 0),\n    ra: rightAscension(L, 0)\n  };\n}\n\nvar SunCalc = {}; // calculates sun position for a given date and latitude/longitude\n\nSunCalc.getPosition = function (date, lat, lng) {\n  var lw = rad * -lng,\n      phi = rad * lat,\n      d = toDays(date),\n      c = sunCoords(d),\n      H = siderealTime(d, lw) - c.ra;\n  return {\n    azimuth: azimuth(H, phi, c.dec),\n    altitude: altitude(H, phi, c.dec)\n  };\n};\n\nexport default SunCalc;", "export default \"@export ecgl.atmosphere.vertex\\nattribute vec3 position: POSITION;\\nattribute vec3 normal : NORMAL;\\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\\nuniform mat4 normalMatrix : WORLDINVERSETRANSPOSE;\\n\\nvarying vec3 v_Normal;\\n\\nvoid main() {\\n v_Normal = normalize((normalMatrix * vec4(normal, 0.0)).xyz);\\n gl_Position = worldViewProjection * vec4(position, 1.0);\\n}\\n@end\\n\\n\\n@export ecgl.atmosphere.fragment\\nuniform mat4 viewTranspose: VIEWTRANSPOSE;\\nuniform float glowPower;\\nuniform vec3 glowColor;\\n\\nvarying vec3 v_Normal;\\n\\nvoid main() {\\n float intensity = pow(1.0 - dot(v_Normal, (viewTranspose * vec4(0.0, 0.0, 1.0, 0.0)).xyz), glowPower);\\n gl_FragColor = vec4(glowColor, intensity * intensity);\\n}\\n@end\";", "import * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport OrbitControl from '../../util/OrbitControl';\nimport SceneHelper from '../common/SceneHelper';\nimport sunCalc from '../../util/sunCalc';\nimport retrieve from '../../util/retrieve';\nimport utilShaderCode from 'claygl/src/shader/source/util.glsl.js';\nimport atmosphereShaderCode from './atmosphere.glsl.js';\ngraphicGL.Shader['import'](utilShaderCode);\ngraphicGL.Shader['import'](atmosphereShaderCode);\nexport default echarts.ComponentView.extend({\n  type: 'globe',\n  __ecgl__: true,\n  _displacementScale: 0,\n  init: function (ecModel, api) {\n    this.groupGL = new graphicGL.Node();\n    /**\n     * @type {clay.geometry.Sphere}\n     * @private\n     */\n\n    this._sphereGeometry = new graphicGL.SphereGeometry({\n      widthSegments: 200,\n      heightSegments: 100,\n      dynamic: true\n    });\n    this._overlayGeometry = new graphicGL.SphereGeometry({\n      widthSegments: 80,\n      heightSegments: 40\n    });\n    /**\n     * @type {clay.geometry.Plane}\n     */\n\n    this._planeGeometry = new graphicGL.PlaneGeometry();\n    /**\n     * @type {clay.geometry.Mesh}\n     */\n\n    this._earthMesh = new graphicGL.Mesh({\n      renderNormal: true\n    });\n    /**\n     * @type {clay.geometry.Mesh}\n     */\n\n    this._atmosphereMesh = new graphicGL.Mesh();\n    this._atmosphereGeometry = new graphicGL.SphereGeometry({\n      widthSegments: 80,\n      heightSegments: 40\n    });\n    this._atmosphereMaterial = new graphicGL.Material({\n      shader: new graphicGL.Shader(graphicGL.Shader.source('ecgl.atmosphere.vertex'), graphicGL.Shader.source('ecgl.atmosphere.fragment')),\n      transparent: true\n    });\n    this._atmosphereMesh.geometry = this._atmosphereGeometry;\n    this._atmosphereMesh.material = this._atmosphereMaterial;\n    this._atmosphereMesh.frontFace = graphicGL.Mesh.CW;\n    this._lightRoot = new graphicGL.Node();\n    this._sceneHelper = new SceneHelper();\n\n    this._sceneHelper.initLight(this._lightRoot);\n\n    this.groupGL.add(this._atmosphereMesh);\n    this.groupGL.add(this._earthMesh);\n    this._control = new OrbitControl({\n      zr: api.getZr()\n    });\n\n    this._control.init();\n\n    this._layerMeshes = {};\n  },\n  render: function (globeModel, ecModel, api) {\n    var coordSys = globeModel.coordinateSystem;\n    var shading = globeModel.get('shading'); // Always have light.\n\n    coordSys.viewGL.add(this._lightRoot);\n\n    if (globeModel.get('show')) {\n      // Add self to scene;\n      coordSys.viewGL.add(this.groupGL);\n    } else {\n      coordSys.viewGL.remove(this.groupGL);\n    }\n\n    this._sceneHelper.setScene(coordSys.viewGL.scene); // Set post effect\n\n\n    coordSys.viewGL.setPostEffect(globeModel.getModel('postEffect'), api);\n    coordSys.viewGL.setTemporalSuperSampling(globeModel.getModel('temporalSuperSampling'));\n    var earthMesh = this._earthMesh;\n    earthMesh.geometry = this._sphereGeometry;\n    var shadingPrefix = 'ecgl.' + shading;\n\n    if (!earthMesh.material || earthMesh.material.shader.name !== shadingPrefix) {\n      earthMesh.material = graphicGL.createMaterial(shadingPrefix);\n    }\n\n    graphicGL.setMaterialFromModel(shading, earthMesh.material, globeModel, api);\n    ['roughnessMap', 'metalnessMap', 'detailMap', 'normalMap'].forEach(function (texName) {\n      var texture = earthMesh.material.get(texName);\n\n      if (texture) {\n        texture.flipY = false;\n      }\n    });\n    earthMesh.material.set('color', graphicGL.parseColor(globeModel.get('baseColor'))); // shrink a little\n\n    var scale = coordSys.radius * 0.99;\n    earthMesh.scale.set(scale, scale, scale);\n\n    if (globeModel.get('atmosphere.show')) {\n      earthMesh.material.define('both', 'ATMOSPHERE_ENABLED');\n      this._atmosphereMesh.invisible = false;\n\n      this._atmosphereMaterial.setUniforms({\n        glowPower: globeModel.get('atmosphere.glowPower') || 6.0,\n        glowColor: globeModel.get('atmosphere.color') || '#ffffff'\n      });\n\n      earthMesh.material.setUniforms({\n        glowPower: globeModel.get('atmosphere.innerGlowPower') || 2.0,\n        glowColor: globeModel.get('atmosphere.color') || '#ffffff'\n      });\n      var offset = globeModel.get('atmosphere.offset') || 5;\n\n      this._atmosphereMesh.scale.set(scale + offset, scale + offset, scale + offset);\n    } else {\n      earthMesh.material.undefine('both', 'ATMOSPHERE_ENABLED');\n      this._atmosphereMesh.invisible = true;\n    }\n\n    var diffuseTexture = earthMesh.material.setTextureImage('diffuseMap', globeModel.get('baseTexture'), api, {\n      flipY: false,\n      anisotropic: 8\n    });\n\n    if (diffuseTexture && diffuseTexture.surface) {\n      diffuseTexture.surface.attachToMesh(earthMesh);\n    } // Update bump map\n\n\n    var bumpTexture = earthMesh.material.setTextureImage('bumpMap', globeModel.get('heightTexture'), api, {\n      flipY: false,\n      anisotropic: 8\n    });\n\n    if (bumpTexture && bumpTexture.surface) {\n      bumpTexture.surface.attachToMesh(earthMesh);\n    }\n\n    earthMesh.material[globeModel.get('postEffect.enable') ? 'define' : 'undefine']('fragment', 'SRGB_DECODE');\n\n    this._updateLight(globeModel, api);\n\n    this._displaceVertices(globeModel, api);\n\n    this._updateViewControl(globeModel, api);\n\n    this._updateLayers(globeModel, api);\n  },\n  afterRender: function (globeModel, ecModel, api, layerGL) {\n    // Create ambient cubemap after render because we need to know the renderer.\n    // TODO\n    var renderer = layerGL.renderer;\n\n    this._sceneHelper.updateAmbientCubemap(renderer, globeModel, api);\n\n    this._sceneHelper.updateSkybox(renderer, globeModel, api);\n  },\n  _updateLayers: function (globeModel, api) {\n    var coordSys = globeModel.coordinateSystem;\n    var layers = globeModel.get('layers');\n    var lastDistance = coordSys.radius;\n    var layerDiffuseTextures = [];\n    var layerDiffuseIntensity = [];\n    var layerEmissiveTextures = [];\n    var layerEmissionIntensity = [];\n    echarts.util.each(layers, function (layerOption) {\n      var layerModel = new echarts.Model(layerOption);\n      var layerType = layerModel.get('type');\n      var texture = graphicGL.loadTexture(layerModel.get('texture'), api, {\n        flipY: false,\n        anisotropic: 8\n      });\n\n      if (texture.surface) {\n        texture.surface.attachToMesh(this._earthMesh);\n      }\n\n      if (layerType === 'blend') {\n        var blendTo = layerModel.get('blendTo');\n        var intensity = retrieve.firstNotNull(layerModel.get('intensity'), 1.0);\n\n        if (blendTo === 'emission') {\n          layerEmissiveTextures.push(texture);\n          layerEmissionIntensity.push(intensity);\n        } else {\n          // Default is albedo\n          layerDiffuseTextures.push(texture);\n          layerDiffuseIntensity.push(intensity);\n        }\n      } else {\n        // Default use overlay\n        var id = layerModel.get('id');\n        var overlayMesh = this._layerMeshes[id];\n\n        if (!overlayMesh) {\n          overlayMesh = this._layerMeshes[id] = new graphicGL.Mesh({\n            geometry: this._overlayGeometry,\n            castShadow: false,\n            ignorePicking: true\n          });\n        }\n\n        var shading = layerModel.get('shading');\n\n        if (shading === 'lambert') {\n          overlayMesh.material = overlayMesh.__lambertMaterial || new graphicGL.Material({\n            autoUpdateTextureStatus: false,\n            shader: graphicGL.createShader('ecgl.lambert'),\n            transparent: true,\n            depthMask: false\n          });\n          overlayMesh.__lambertMaterial = overlayMesh.material;\n        } else {\n          // color\n          overlayMesh.material = overlayMesh.__colorMaterial || new graphicGL.Material({\n            autoUpdateTextureStatus: false,\n            shader: graphicGL.createShader('ecgl.color'),\n            transparent: true,\n            depthMask: false\n          });\n          overlayMesh.__colorMaterial = overlayMesh.material;\n        } // overlay should be transparent if texture is not loaded yet.\n\n\n        overlayMesh.material.enableTexture('diffuseMap');\n        var distance = layerModel.get('distance'); // Based on distance of last layer\n\n        var radius = lastDistance + (distance == null ? coordSys.radius / 100 : distance);\n        overlayMesh.scale.set(radius, radius, radius);\n        lastDistance = radius; // FIXME Exists blink.\n\n        var blankTexture = this._blankTexture || (this._blankTexture = graphicGL.createBlankTexture('rgba(255, 255, 255, 0)'));\n        overlayMesh.material.set('diffuseMap', blankTexture);\n        graphicGL.loadTexture(layerModel.get('texture'), api, {\n          flipY: false,\n          anisotropic: 8\n        }, function (texture) {\n          if (texture.surface) {\n            texture.surface.attachToMesh(overlayMesh);\n          }\n\n          overlayMesh.material.set('diffuseMap', texture);\n          api.getZr().refresh();\n        });\n        layerModel.get('show') ? this.groupGL.add(overlayMesh) : this.groupGL.remove(overlayMesh);\n      }\n    }, this);\n    var earthMaterial = this._earthMesh.material;\n    earthMaterial.define('fragment', 'LAYER_DIFFUSEMAP_COUNT', layerDiffuseTextures.length);\n    earthMaterial.define('fragment', 'LAYER_EMISSIVEMAP_COUNT', layerEmissiveTextures.length);\n    earthMaterial.set('layerDiffuseMap', layerDiffuseTextures);\n    earthMaterial.set('layerDiffuseIntensity', layerDiffuseIntensity);\n    earthMaterial.set('layerEmissiveMap', layerEmissiveTextures);\n    earthMaterial.set('layerEmissionIntensity', layerEmissionIntensity);\n    var debugWireframeModel = globeModel.getModel('debug.wireframe');\n\n    if (debugWireframeModel.get('show')) {\n      earthMaterial.define('both', 'WIREFRAME_TRIANGLE');\n      var color = graphicGL.parseColor(debugWireframeModel.get('lineStyle.color') || 'rgba(0,0,0,0.5)');\n      var width = retrieve.firstNotNull(debugWireframeModel.get('lineStyle.width'), 1);\n      earthMaterial.set('wireframeLineWidth', width);\n      earthMaterial.set('wireframeLineColor', color);\n    } else {\n      earthMaterial.undefine('both', 'WIREFRAME_TRIANGLE');\n    }\n  },\n  _updateViewControl: function (globeModel, api) {\n    var coordSys = globeModel.coordinateSystem; // Update camera\n\n    var viewControlModel = globeModel.getModel('viewControl');\n    var camera = coordSys.viewGL.camera;\n    var self = this;\n\n    function makeAction() {\n      return {\n        type: 'globeChangeCamera',\n        alpha: control.getAlpha(),\n        beta: control.getBeta(),\n        distance: control.getDistance() - coordSys.radius,\n        center: control.getCenter(),\n        from: self.uid,\n        globeId: globeModel.id\n      };\n    } // Update control\n\n\n    var control = this._control;\n    control.setViewGL(coordSys.viewGL);\n    var coord = viewControlModel.get('targetCoord');\n    var alpha, beta;\n\n    if (coord != null) {\n      beta = coord[0] + 90;\n      alpha = coord[1];\n    }\n\n    control.setFromViewControlModel(viewControlModel, {\n      baseDistance: coordSys.radius,\n      alpha: alpha,\n      beta: beta\n    });\n    control.off('update');\n    control.on('update', function () {\n      api.dispatchAction(makeAction());\n    });\n  },\n  _displaceVertices: function (globeModel, api) {\n    var displacementQuality = globeModel.get('displacementQuality');\n    var showDebugWireframe = globeModel.get('debug.wireframe.show');\n    var globe = globeModel.coordinateSystem;\n\n    if (!globeModel.isDisplacementChanged() && displacementQuality === this._displacementQuality && showDebugWireframe === this._showDebugWireframe) {\n      return;\n    }\n\n    this._displacementQuality = displacementQuality;\n    this._showDebugWireframe = showDebugWireframe;\n    var geometry = this._sphereGeometry;\n    var widthSegments = {\n      low: 100,\n      medium: 200,\n      high: 400,\n      ultra: 800\n    }[displacementQuality] || 200;\n    var heightSegments = widthSegments / 2;\n\n    if (geometry.widthSegments !== widthSegments || showDebugWireframe) {\n      geometry.widthSegments = widthSegments;\n      geometry.heightSegments = heightSegments;\n      geometry.build();\n    }\n\n    this._doDisplaceVertices(geometry, globe);\n\n    if (showDebugWireframe) {\n      geometry.generateBarycentric();\n    }\n  },\n  _doDisplaceVertices: function (geometry, globe) {\n    var positionArr = geometry.attributes.position.value;\n    var uvArr = geometry.attributes.texcoord0.value;\n    var originalPositionArr = geometry.__originalPosition;\n\n    if (!originalPositionArr || originalPositionArr.length !== positionArr.length) {\n      originalPositionArr = new Float32Array(positionArr.length);\n      originalPositionArr.set(positionArr);\n      geometry.__originalPosition = originalPositionArr;\n    }\n\n    var width = globe.displacementWidth;\n    var height = globe.displacementHeight;\n    var data = globe.displacementData;\n\n    for (var i = 0; i < geometry.vertexCount; i++) {\n      var i3 = i * 3;\n      var i2 = i * 2;\n      var x = originalPositionArr[i3 + 1];\n      var y = originalPositionArr[i3 + 2];\n      var z = originalPositionArr[i3 + 3];\n      var u = uvArr[i2++];\n      var v = uvArr[i2++];\n      var j = Math.round(u * (width - 1));\n      var k = Math.round(v * (height - 1));\n      var idx = k * width + j;\n      var scale = data ? data[idx] : 0;\n      positionArr[i3 + 1] = x + x * scale;\n      positionArr[i3 + 2] = y + y * scale;\n      positionArr[i3 + 3] = z + z * scale;\n    }\n\n    geometry.generateVertexNormals();\n    geometry.dirty();\n    geometry.updateBoundingBox();\n  },\n  _updateLight: function (globeModel, api) {\n    var earthMesh = this._earthMesh;\n\n    this._sceneHelper.updateLight(globeModel);\n\n    var mainLight = this._sceneHelper.mainLight; // Put sun in the right position\n\n    var time = globeModel.get('light.main.time') || new Date(); // http://en.wikipedia.org/wiki/Azimuth\n\n    var pos = sunCalc.getPosition(echarts.number.parseDate(time), 0, 0);\n    var r0 = Math.cos(pos.altitude); // FIXME How to calculate the y ?\n\n    mainLight.position.y = -r0 * Math.cos(pos.azimuth);\n    mainLight.position.x = Math.sin(pos.altitude);\n    mainLight.position.z = r0 * Math.sin(pos.azimuth);\n    mainLight.lookAt(earthMesh.getWorldPosition());\n  },\n  dispose: function (ecModel, api) {\n    this.groupGL.removeAll();\n\n    this._control.dispose();\n  }\n});", "import glmatrix from 'claygl/src/dep/glmatrix';\nvar vec3 = glmatrix.vec3;\n\nfunction Globe(radius) {\n  this.radius = radius;\n  this.viewGL = null;\n  this.altitudeAxis; // Displacement data provided by texture.\n\n  this.displacementData = null;\n  this.displacementWidth;\n  this.displacementHeight;\n}\n\nGlobe.prototype = {\n  constructor: Globe,\n  dimensions: ['lng', 'lat', 'alt'],\n  type: 'globe',\n  containPoint: function () {},\n  setDisplacementData: function (data, width, height) {\n    this.displacementData = data;\n    this.displacementWidth = width;\n    this.displacementHeight = height;\n  },\n  _getDisplacementScale: function (lng, lat) {\n    var i = (lng + 180) / 360 * (this.displacementWidth - 1);\n    var j = (90 - lat) / 180 * (this.displacementHeight - 1); // NEAREST SAMPLING\n    // TODO Better bilinear sampling\n\n    var idx = Math.round(i) + Math.round(j) * this.displacementWidth;\n    return this.displacementData[idx];\n  },\n  dataToPoint: function (data, out) {\n    var lng = data[0];\n    var lat = data[1]; // Default have 0 altitude\n\n    var altVal = data[2] || 0;\n    var r = this.radius;\n\n    if (this.displacementData) {\n      r *= 1 + this._getDisplacementScale(lng, lat);\n    }\n\n    if (this.altitudeAxis) {\n      r += this.altitudeAxis.dataToCoord(altVal);\n    }\n\n    lng = lng * Math.PI / 180;\n    lat = lat * Math.PI / 180;\n    var r0 = Math.cos(lat) * r;\n    out = out || []; // PENDING\n\n    out[0] = -r0 * Math.cos(lng + Math.PI);\n    out[1] = Math.sin(lat) * r;\n    out[2] = r0 * Math.sin(lng + Math.PI);\n    return out;\n  },\n  pointToData: function (point, out) {\n    var x = point[0];\n    var y = point[1];\n    var z = point[2];\n    var len = vec3.len(point);\n    x /= len;\n    y /= len;\n    z /= len;\n    var theta = Math.asin(y);\n    var phi = Math.atan2(z, -x);\n\n    if (phi < 0) {\n      phi = Math.PI * 2 + phi;\n    }\n\n    var lat = theta * 180 / Math.PI;\n    var lng = phi * 180 / Math.PI - 180;\n    out = out || [];\n    out[0] = lng;\n    out[1] = lat;\n    out[2] = len - this.radius;\n\n    if (this.altitudeAxis) {\n      out[2] = this.altitudeAxis.coordToData(out[2]);\n    }\n\n    return out;\n  }\n};\nexport default Globe;", "import Globe from './globe/Globe';\nimport * as echarts from 'echarts/lib/echarts';\nimport { getLayoutRect } from 'echarts/lib/util/layout';\nimport ViewGL from '../core/ViewGL';\nimport retrieve from '../util/retrieve';\nimport graphicGL from '../util/graphicGL';\n\nfunction getDisplacementData(img, displacementScale) {\n  var canvas = document.createElement('canvas');\n  var ctx = canvas.getContext('2d');\n  var width = img.width;\n  var height = img.height;\n  canvas.width = width;\n  canvas.height = height;\n  ctx.drawImage(img, 0, 0, width, height);\n  var rgbaArr = ctx.getImageData(0, 0, width, height).data;\n  var displacementArr = new Float32Array(rgbaArr.length / 4);\n\n  for (var i = 0; i < rgbaArr.length / 4; i++) {\n    var x = rgbaArr[i * 4];\n    displacementArr[i] = x / 255 * displacementScale;\n  }\n\n  return {\n    data: displacementArr,\n    width: width,\n    height: height\n  };\n}\n\nfunction resizeGlobe(globeModel, api) {\n  // Use left/top/width/height\n  var boxLayoutOption = globeModel.getBoxLayoutParams();\n  var viewport = getLayoutRect(boxLayoutOption, {\n    width: api.getWidth(),\n    height: api.getHeight()\n  }); // Flip Y\n\n  viewport.y = api.getHeight() - viewport.y - viewport.height;\n  this.viewGL.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, api.getDevicePixelRatio());\n  this.radius = globeModel.get('globeRadius');\n  var outerRadius = globeModel.get('globeOuterRadius');\n\n  if (this.altitudeAxis) {\n    this.altitudeAxis.setExtent(0, outerRadius - this.radius);\n  }\n}\n\nfunction updateGlobe(ecModel, api) {\n  var altitudeDataExtent = [Infinity, -Infinity];\n  ecModel.eachSeries(function (seriesModel) {\n    if (seriesModel.coordinateSystem !== this) {\n      return;\n    } // Get altitude data extent.\n\n\n    var data = seriesModel.getData();\n    var altDims = seriesModel.coordDimToDataDim('alt');\n    var altDim = altDims && altDims[0];\n\n    if (altDim) {\n      // TODO altitiude is in coords of lines.\n      var dataExtent = data.getDataExtent(altDim, true);\n      altitudeDataExtent[0] = Math.min(altitudeDataExtent[0], dataExtent[0]);\n      altitudeDataExtent[1] = Math.max(altitudeDataExtent[1], dataExtent[1]);\n    }\n  }, this); // Create altitude axis\n\n  if (altitudeDataExtent && isFinite(altitudeDataExtent[1] - altitudeDataExtent[0])) {\n    var scale = echarts.helper.createScale(altitudeDataExtent, {\n      type: 'value',\n      // PENDING\n      min: 'dataMin',\n      max: 'dataMax'\n    });\n    this.altitudeAxis = new echarts.Axis('altitude', scale); // Resize again\n\n    this.resize(this.model, api);\n  }\n}\n\nvar globeCreator = {\n  dimensions: Globe.prototype.dimensions,\n  create: function (ecModel, api) {\n    var globeList = [];\n    ecModel.eachComponent('globe', function (globeModel) {\n      // FIXME\n      globeModel.__viewGL = globeModel.__viewGL || new ViewGL();\n      var globe = new Globe();\n      globe.viewGL = globeModel.__viewGL;\n      globeModel.coordinateSystem = globe;\n      globe.model = globeModel;\n      globeList.push(globe); // Inject resize\n\n      globe.resize = resizeGlobe;\n      globe.resize(globeModel, api);\n      globe.update = updateGlobe;\n    });\n    ecModel.eachSeries(function (seriesModel) {\n      if (seriesModel.get('coordinateSystem') === 'globe') {\n        var globeModel = seriesModel.getReferringComponents('globe').models[0];\n\n        if (!globeModel) {\n          globeModel = ecModel.getComponent('globe');\n        }\n\n        if (!globeModel) {\n          throw new Error('globe \"' + retrieve.firstNotNull(seriesModel.get('globe3DIndex'), seriesModel.get('globe3DId'), 0) + '\" not found');\n        }\n\n        var coordSys = globeModel.coordinateSystem;\n        seriesModel.coordinateSystem = coordSys;\n      }\n    });\n    ecModel.eachComponent('globe', function (globeModel, idx) {\n      var globe = globeModel.coordinateSystem; // Update displacement data\n\n      var displacementTextureValue = globeModel.getDisplacementTexture();\n      var displacementScale = globeModel.getDisplacemenScale();\n\n      if (globeModel.isDisplacementChanged()) {\n        if (globeModel.hasDisplacement()) {\n          var immediateLoaded = true;\n          graphicGL.loadTexture(displacementTextureValue, api, function (texture) {\n            var img = texture.image;\n            var displacementData = getDisplacementData(img, displacementScale);\n            globeModel.setDisplacementData(displacementData.data, displacementData.width, displacementData.height);\n\n            if (!immediateLoaded) {\n              // Update layouts\n              api.dispatchAction({\n                type: 'globeUpdateDisplacment'\n              });\n            }\n          });\n          immediateLoaded = false;\n        } else {\n          globe.setDisplacementData(null, 0, 0);\n        }\n\n        globe.setDisplacementData(globeModel.displacementData, globeModel.displacementWidth, globeModel.displacementHeight);\n      }\n    });\n    return globeList;\n  }\n};\nexport default globeCreator;", "// TODO ECharts GL must be imported whatever component,charts is imported.\nimport '../../echarts-gl';\nimport GlobeModel from './GlobeModel';\nimport GlobeView from './GlobeView';\nimport globeCreator from '../../coord/globeCreator';\nexport function install(registers) {\n  registers.registerComponentModel(GlobeModel);\n  registers.registerComponentView(GlobeView);\n  registers.registerCoordinateSystem('globe', globeCreator);\n  registers.registerAction({\n    type: 'globeChangeCamera',\n    event: 'globecamerachanged',\n    update: 'series:updateCamera'\n  }, function (payload, ecModel) {\n    ecModel.eachComponent({\n      mainType: 'globe',\n      query: payload\n    }, function (componentModel) {\n      componentModel.setView(payload);\n    });\n  });\n  registers.registerAction({\n    type: 'globeUpdateDisplacment',\n    event: 'globedisplacementupdated',\n    update: 'update'\n  }, function (payload, ecModel) {// Noop\n  });\n}", "import * as echarts from 'echarts/lib/echarts';\nimport componentPostEffectMixin from '../common/componentPostEffectMixin';\nimport componentLightMixin from '../common/componentLightMixin';\nvar MAPBOX_CAMERA_OPTION = ['zoom', 'center', 'pitch', 'bearing'];\nvar Mapbox3DModel = echarts.ComponentModel.extend({\n  type: 'mapbox3D',\n  layoutMode: 'box',\n  coordinateSystem: null,\n  defaultOption: {\n    zlevel: -10,\n    style: 'mapbox://styles/mapbox/light-v9',\n    center: [0, 0],\n    zoom: 0,\n    pitch: 0,\n    bearing: 0,\n    light: {\n      main: {\n        alpha: 20,\n        beta: 30\n      }\n    },\n    altitudeScale: 1,\n    // Default depend on altitudeScale\n    boxHeight: 'auto'\n  },\n  getMapboxCameraOption: function () {\n    var self = this;\n    return MAPBOX_CAMERA_OPTION.reduce(function (obj, key) {\n      obj[key] = self.get(key);\n      return obj;\n    }, {});\n  },\n  setMapboxCameraOption: function (option) {\n    if (option != null) {\n      MAPBOX_CAMERA_OPTION.forEach(function (key) {\n        if (option[key] != null) {\n          this.option[key] = option[key];\n        }\n      }, this);\n    }\n  },\n\n  /**\n   * Get mapbox instance\n   */\n  getMapbox: function () {\n    return this._mapbox;\n  },\n  setMapbox: function (mapbox) {\n    this._mapbox = mapbox;\n  }\n});\necharts.util.merge(Mapbox3DModel.prototype, componentPostEffectMixin);\necharts.util.merge(Mapbox3DModel.prototype, componentLightMixin);\nexport default Mapbox3DModel;", "/**\n * @constructor\n * @alias module:echarts-gl/component/mapbox3D/Mapbox3DLayer\n * @param {string} id Layer ID\n * @param {module:zrender/ZRender} zr\n */\nfunction Mapbox3DLayer(id, zr) {\n  this.id = id;\n  this.zr = zr;\n  this.dom = document.createElement('div');\n  this.dom.style.cssText = 'position:absolute;left:0;right:0;top:0;bottom:0;'; // FIXME If in module environment.\n\n  if (!mapboxgl) {\n    throw new Error('Mapbox GL library must be included. See https://www.mapbox.com/mapbox-gl-js/api/');\n  }\n\n  this._mapbox = new mapboxgl.Map({\n    container: this.dom\n  }); // Proxy events\n\n  this._initEvents();\n}\n\nMapbox3DLayer.prototype.setUnpainted = function () {};\n\nMapbox3DLayer.prototype.resize = function () {\n  this._mapbox.resize();\n};\n\nMapbox3DLayer.prototype.getMapbox = function () {\n  return this._mapbox;\n};\n\nMapbox3DLayer.prototype.clear = function () {};\n\nMapbox3DLayer.prototype.refresh = function () {\n  this._mapbox.resize();\n};\n\nvar EVENTS = ['mousedown', 'mouseup', 'click', 'dblclick', 'mousemove', 'mousewheel', 'wheel', 'touchstart', 'touchend', 'touchmove', 'touchcancel'];\n\nMapbox3DLayer.prototype._initEvents = function () {\n  // Event is bound on canvas container.\n  var mapboxRoot = this._mapbox.getCanvasContainer();\n\n  this._handlers = this._handlers || {\n    contextmenu: function (e) {\n      e.preventDefault();\n      return false;\n    }\n  };\n  EVENTS.forEach(function (eName) {\n    this._handlers[eName] = function (e) {\n      var obj = {};\n\n      for (var name in e) {\n        obj[name] = e[name];\n      }\n\n      obj.bubbles = false;\n      var newE = new e.constructor(e.type, obj);\n      mapboxRoot.dispatchEvent(newE);\n    };\n\n    this.zr.dom.addEventListener(eName, this._handlers[eName]);\n  }, this); // PENDING\n\n  this.zr.dom.addEventListener('contextmenu', this._handlers.contextmenu);\n};\n\nMapbox3DLayer.prototype.dispose = function () {\n  EVENTS.forEach(function (eName) {\n    this.zr.dom.removeEventListener(eName, this._handlers[eName]);\n  }, this);\n};\n\nexport default Mapbox3DLayer;", "export default \"\\n@export ecgl.displayShadow.vertex\\n\\n@import ecgl.common.transformUniforms\\n\\n@import ecgl.common.uv.header\\n\\n@import ecgl.common.attributes\\n\\nvarying vec3 v_WorldPosition;\\n\\nvarying vec3 v_Normal;\\n\\nvoid main()\\n{\\n @import ecgl.common.uv.main\\n v_Normal = normalize((worldInverseTranspose * vec4(normal, 0.0)).xyz);\\n\\n v_WorldPosition = (world * vec4(position, 1.0)).xyz;\\n gl_Position = worldViewProjection * vec4(position, 1.0);\\n}\\n\\n@end\\n\\n\\n@export ecgl.displayShadow.fragment\\n\\n@import ecgl.common.uv.fragmentHeader\\n\\nvarying vec3 v_Normal;\\nvarying vec3 v_WorldPosition;\\n\\nuniform float roughness: 0.2;\\n\\n#ifdef DIRECTIONAL_LIGHT_COUNT\\n@import clay.header.directional_light\\n#endif\\n\\n@import ecgl.common.ssaoMap.header\\n\\n@import clay.plugin.compute_shadow_map\\n\\nvoid main()\\n{\\n float shadow = 1.0;\\n\\n @import ecgl.common.ssaoMap.main\\n\\n#if defined(DIRECTIONAL_LIGHT_COUNT) && defined(DIRECTIONAL_LIGHT_SHADOWMAP_COUNT)\\n float shadowContribsDir[DIRECTIONAL_LIGHT_COUNT];\\n if(shadowEnabled)\\n {\\n computeShadowOfDirectionalLights(v_WorldPosition, shadowContribsDir);\\n }\\n for (int i = 0; i < DIRECTIONAL_LIGHT_COUNT; i++) {\\n shadow = min(shadow, shadowContribsDir[i] * 0.5 + 0.5);\\n }\\n#endif\\n\\n shadow *= 0.5 + ao * 0.5;\\n shadow = clamp(shadow, 0.0, 1.0);\\n\\n gl_FragColor = vec4(vec3(0.0), 1.0 - shadow);\\n}\\n\\n@end\";", "import * as echarts from 'echarts/lib/echarts';\nimport Mapbox3DLayer from './Mapbox3DLayer';\nimport SceneHelper from '../common/SceneHelper';\nimport graphicGL from '../../util/graphicGL';\nimport displayShadowGLSL from '../../util/shader/displayShadow.glsl.js';\ngraphicGL.Shader.import(displayShadowGLSL);\nvar TILE_SIZE = 512;\nexport default echarts.ComponentView.extend({\n  type: 'mapbox3D',\n  __ecgl__: true,\n  init: function (ecModel, api) {\n    var zr = api.getZr();\n    this._zrLayer = new Mapbox3DLayer('mapbox3D', zr);\n    zr.painter.insertLayer(-1000, this._zrLayer);\n    this._lightRoot = new graphicGL.Node();\n    this._sceneHelper = new SceneHelper(this._lightRoot);\n\n    this._sceneHelper.initLight(this._lightRoot);\n\n    var mapbox = this._zrLayer.getMapbox();\n\n    var dispatchInteractAction = this._dispatchInteractAction.bind(this, api, mapbox); // PENDING\n\n\n    ['zoom', 'rotate', 'drag', 'pitch', 'rotate', 'move'].forEach(function (eName) {\n      mapbox.on(eName, dispatchInteractAction);\n    });\n    this._groundMesh = new graphicGL.Mesh({\n      geometry: new graphicGL.PlaneGeometry(),\n      material: new graphicGL.Material({\n        shader: new graphicGL.Shader({\n          vertex: graphicGL.Shader.source('ecgl.displayShadow.vertex'),\n          fragment: graphicGL.Shader.source('ecgl.displayShadow.fragment')\n        }),\n        depthMask: false\n      }),\n      // Render first\n      renderOrder: -100,\n      culling: false,\n      castShadow: false,\n      $ignorePicking: true,\n      renderNormal: true\n    });\n  },\n  render: function (mapbox3DModel, ecModel, api) {\n    var mapbox = this._zrLayer.getMapbox();\n\n    var styleDesc = mapbox3DModel.get('style');\n    var styleStr = JSON.stringify(styleDesc);\n\n    if (styleStr !== this._oldStyleStr) {\n      if (styleDesc) {\n        mapbox.setStyle(styleDesc);\n      }\n    }\n\n    this._oldStyleStr = styleStr;\n    mapbox.setCenter(mapbox3DModel.get('center'));\n    mapbox.setZoom(mapbox3DModel.get('zoom'));\n    mapbox.setPitch(mapbox3DModel.get('pitch'));\n    mapbox.setBearing(mapbox3DModel.get('bearing'));\n    mapbox3DModel.setMapbox(mapbox);\n    var coordSys = mapbox3DModel.coordinateSystem; // Not add to rootNode. Or light direction will be stretched by rootNode scale\n\n    coordSys.viewGL.scene.add(this._lightRoot);\n    coordSys.viewGL.add(this._groundMesh);\n\n    this._updateGroundMesh(); // Update lights\n\n\n    this._sceneHelper.setScene(coordSys.viewGL.scene);\n\n    this._sceneHelper.updateLight(mapbox3DModel); // Update post effects\n\n\n    coordSys.viewGL.setPostEffect(mapbox3DModel.getModel('postEffect'), api);\n    coordSys.viewGL.setTemporalSuperSampling(mapbox3DModel.getModel('temporalSuperSampling'));\n    this._mapbox3DModel = mapbox3DModel;\n  },\n  afterRender: function (mapbox3DModel, ecModel, api, layerGL) {\n    var renderer = layerGL.renderer;\n\n    this._sceneHelper.updateAmbientCubemap(renderer, mapbox3DModel, api);\n\n    this._sceneHelper.updateSkybox(renderer, mapbox3DModel, api); // FIXME If other series changes coordinate system.\n    // FIXME When doing progressive rendering.\n\n\n    mapbox3DModel.coordinateSystem.viewGL.scene.traverse(function (mesh) {\n      if (mesh.material) {\n        mesh.material.define('fragment', 'NORMAL_UP_AXIS', 2);\n        mesh.material.define('fragment', 'NORMAL_FRONT_AXIS', 1);\n      }\n    });\n  },\n  updateCamera: function (mapbox3DModel, ecModel, api, payload) {\n    mapbox3DModel.coordinateSystem.setCameraOption(payload);\n\n    this._updateGroundMesh();\n\n    api.getZr().refresh();\n  },\n  _dispatchInteractAction: function (api, mapbox, mapbox3DModel) {\n    api.dispatchAction({\n      type: 'mapbox3DChangeCamera',\n      pitch: mapbox.getPitch(),\n      zoom: mapbox.getZoom(),\n      center: mapbox.getCenter().toArray(),\n      bearing: mapbox.getBearing(),\n      mapbox3DId: this._mapbox3DModel && this._mapbox3DModel.id\n    });\n  },\n  _updateGroundMesh: function () {\n    if (this._mapbox3DModel) {\n      var coordSys = this._mapbox3DModel.coordinateSystem;\n      var pt = coordSys.dataToPoint(coordSys.center);\n\n      this._groundMesh.position.set(pt[0], pt[1], -0.001);\n\n      var plane = new graphicGL.Plane(new graphicGL.Vector3(0, 0, 1), 0);\n      var ray1 = coordSys.viewGL.camera.castRay(new graphicGL.Vector2(-1, -1));\n      var ray2 = coordSys.viewGL.camera.castRay(new graphicGL.Vector2(1, 1));\n      var pos0 = ray1.intersectPlane(plane);\n      var pos1 = ray2.intersectPlane(plane);\n      var scale = pos0.dist(pos1) / coordSys.viewGL.rootNode.scale.x;\n\n      this._groundMesh.scale.set(scale, scale, 1);\n    }\n  },\n  dispose: function (ecModel, api) {\n    if (this._zrLayer) {\n      this._zrLayer.dispose();\n    }\n\n    api.getZr().painter.delLayer(-1000);\n  }\n});", "import glmatrix from 'claygl/src/dep/glmatrix';\nvar mat4 = glmatrix.mat4;\nvar TILE_SIZE = 512;\nvar FOV = 0.6435011087932844;\nvar PI = Math.PI;\nvar WORLD_SCALE = 1 / 10;\n\nfunction MapServiceCoordSys3D() {\n  /**\n   * Width of mapbox viewport\n   */\n  this.width = 0;\n  /**\n   * Height of mapbox viewport\n   */\n\n  this.height = 0;\n  this.altitudeScale = 1; // TODO Change boxHeight won't have animation.\n\n  this.boxHeight = 'auto'; // Set by mapbox creator\n\n  this.altitudeExtent;\n  this.bearing = 0;\n  this.pitch = 0;\n  this.center = [0, 0];\n  this._origin;\n  this.zoom = 0;\n  this._initialZoom; // Some parameters for different map services.\n\n  this.maxPitch = 60;\n  this.zoomOffset = 0;\n}\n\nMapServiceCoordSys3D.prototype = {\n  constructor: MapServiceCoordSys3D,\n  dimensions: ['lng', 'lat', 'alt'],\n  containPoint: function () {},\n  setCameraOption: function (option) {\n    this.bearing = option.bearing;\n    this.pitch = option.pitch;\n    this.center = option.center;\n    this.zoom = option.zoom;\n\n    if (!this._origin) {\n      this._origin = this.projectOnTileWithScale(this.center, TILE_SIZE);\n    }\n\n    if (this._initialZoom == null) {\n      this._initialZoom = this.zoom;\n    }\n\n    this.updateTransform();\n  },\n  // https://github.com/mapbox/mapbox-gl-js/blob/master/src/geo/transform.js#L479\n  updateTransform: function () {\n    if (!this.height) {\n      return;\n    }\n\n    var cameraToCenterDistance = 0.5 / Math.tan(FOV / 2) * this.height * WORLD_SCALE; // Convert to radian.\n\n    var pitch = Math.max(Math.min(this.pitch, this.maxPitch), 0) / 180 * Math.PI; // Find the distance from the center point [width/2, height/2] to the\n    // center top point [width/2, 0] in Z units, using the law of sines.\n    // 1 Z unit is equivalent to 1 horizontal px at the center of the map\n    // (the distance between[width/2, height/2] and [width/2 + 1, height/2])\n\n    var halfFov = FOV / 2;\n    var groundAngle = Math.PI / 2 + pitch;\n    var topHalfSurfaceDistance = Math.sin(halfFov) * cameraToCenterDistance / Math.sin(Math.PI - groundAngle - halfFov); // Calculate z distance of the farthest fragment that should be rendered.\n\n    var furthestDistance = Math.cos(Math.PI / 2 - pitch) * topHalfSurfaceDistance + cameraToCenterDistance; // Add a bit extra to avoid precision problems when a fragment's distance is exactly `furthestDistance`\n\n    var farZ = furthestDistance * 1.1; // Forced to be 1000\n\n    if (this.pitch > 50) {\n      farZ = 1000;\n    } // matrix for conversion from location to GL coordinates (-1 .. 1)\n\n\n    var m = [];\n    mat4.perspective(m, FOV, this.width / this.height, 1, farZ);\n    this.viewGL.camera.projectionMatrix.setArray(m);\n    this.viewGL.camera.decomposeProjectionMatrix();\n    var m = mat4.identity([]);\n    var pt = this.dataToPoint(this.center); // Inverse\n\n    mat4.scale(m, m, [1, -1, 1]); // Translate to altitude\n\n    mat4.translate(m, m, [0, 0, -cameraToCenterDistance]);\n    mat4.rotateX(m, m, pitch);\n    mat4.rotateZ(m, m, -this.bearing / 180 * Math.PI); // Translate to center.\n\n    mat4.translate(m, m, [-pt[0] * this.getScale() * WORLD_SCALE, -pt[1] * this.getScale() * WORLD_SCALE, 0]);\n    this.viewGL.camera.viewMatrix.array = m;\n    var invertM = [];\n    mat4.invert(invertM, m);\n    this.viewGL.camera.worldTransform.array = invertM;\n    this.viewGL.camera.decomposeWorldTransform(); // scale vertically to meters per pixel (inverse of ground resolution):\n    // worldSize / (circumferenceOfEarth * cos(lat * π / 180))\n\n    var worldSize = TILE_SIZE * this.getScale();\n    var verticalScale;\n\n    if (this.altitudeExtent && !isNaN(this.boxHeight)) {\n      var range = this.altitudeExtent[1] - this.altitudeExtent[0];\n      verticalScale = this.boxHeight / range * this.getScale() / Math.pow(2, this._initialZoom - this.zoomOffset);\n    } else {\n      verticalScale = worldSize / (2 * Math.PI * 6378000 * Math.abs(Math.cos(this.center[1] * (Math.PI / 180)))) * this.altitudeScale * WORLD_SCALE;\n    } // Include scale to avoid relayout when zooming\n    // FIXME Camera scale may have problem in shadow\n\n\n    this.viewGL.rootNode.scale.set(this.getScale() * WORLD_SCALE, this.getScale() * WORLD_SCALE, verticalScale);\n  },\n  getScale: function () {\n    return Math.pow(2, this.zoom - this.zoomOffset);\n  },\n  projectOnTile: function (data, out) {\n    return this.projectOnTileWithScale(data, this.getScale() * TILE_SIZE, out);\n  },\n  projectOnTileWithScale: function (data, scale, out) {\n    var lng = data[0];\n    var lat = data[1];\n    var lambda2 = lng * PI / 180;\n    var phi2 = lat * PI / 180;\n    var x = scale * (lambda2 + PI) / (2 * PI);\n    var y = scale * (PI - Math.log(Math.tan(PI / 4 + phi2 * 0.5))) / (2 * PI);\n    out = out || [];\n    out[0] = x;\n    out[1] = y;\n    return out;\n  },\n  unprojectFromTile: function (point, out) {\n    return this.unprojectOnTileWithScale(point, this.getScale() * TILE_SIZE, out);\n  },\n  unprojectOnTileWithScale: function (point, scale, out) {\n    var x = point[0];\n    var y = point[1];\n    var lambda2 = x / scale * (2 * PI) - PI;\n    var phi2 = 2 * (Math.atan(Math.exp(PI - y / scale * (2 * PI))) - PI / 4);\n    out = out || [];\n    out[0] = lambda2 * 180 / PI;\n    out[1] = phi2 * 180 / PI;\n    return out;\n  },\n  dataToPoint: function (data, out) {\n    out = this.projectOnTileWithScale(data, TILE_SIZE, out); // Add a origin to avoid precision issue in WebGL.\n\n    out[0] -= this._origin[0];\n    out[1] -= this._origin[1]; // PENDING\n\n    out[2] = !isNaN(data[2]) ? data[2] : 0;\n\n    if (!isNaN(data[2])) {\n      out[2] = data[2];\n\n      if (this.altitudeExtent) {\n        out[2] -= this.altitudeExtent[0];\n      }\n    }\n\n    return out;\n  }\n};\nexport default MapServiceCoordSys3D;", "import MapService3D from '../mapServiceCommon/MapService3D';\n\nfunction Mapbox3D() {\n  MapService3D.apply(this, arguments);\n}\n\nMapbox3D.prototype = new MapService3D();\nMapbox3D.prototype.constructor = Mapbox3D;\nMapbox3D.prototype.type = 'mapbox3D';\nexport default Mapbox3D;", "import retrieve from '../../util/retrieve';\nimport graphicGL from '../../util/graphicGL';\nimport ViewGL from '../../core/ViewGL';\nexport default function (serviceComponentType, ServiceCtor, afterCreate) {\n  function resizeMapService3D(mapService3DModel, api) {\n    var width = api.getWidth();\n    var height = api.getHeight();\n    var dpr = api.getDevicePixelRatio();\n    this.viewGL.setViewport(0, 0, width, height, dpr);\n    this.width = width;\n    this.height = height;\n    this.altitudeScale = mapService3DModel.get('altitudeScale');\n    this.boxHeight = mapService3DModel.get('boxHeight'); // this.updateTransform();\n  }\n\n  function updateService3D(ecModel, api) {\n    if (this.model.get('boxHeight') === 'auto') {\n      return;\n    }\n\n    var altitudeDataExtent = [Infinity, -Infinity];\n    ecModel.eachSeries(function (seriesModel) {\n      if (seriesModel.coordinateSystem !== this) {\n        return;\n      } // Get altitude data extent.\n\n\n      var data = seriesModel.getData();\n      var altDim = seriesModel.coordDimToDataDim('alt')[0];\n\n      if (altDim) {\n        // TODO altitiude is in coords of lines.\n        var dataExtent = data.getDataExtent(altDim, true);\n        altitudeDataExtent[0] = Math.min(altitudeDataExtent[0], dataExtent[0]);\n        altitudeDataExtent[1] = Math.max(altitudeDataExtent[1], dataExtent[1]);\n      }\n    }, this);\n\n    if (altitudeDataExtent && isFinite(altitudeDataExtent[1] - altitudeDataExtent[0])) {\n      this.altitudeExtent = altitudeDataExtent;\n    }\n  }\n\n  return {\n    dimensions: ServiceCtor.prototype.dimensions,\n    create: function (ecModel, api) {\n      var mapService3DList = [];\n      ecModel.eachComponent(serviceComponentType, function (mapService3DModel) {\n        var viewGL = mapService3DModel.__viewGL;\n\n        if (!viewGL) {\n          viewGL = mapService3DModel.__viewGL = new ViewGL();\n          viewGL.setRootNode(new graphicGL.Node());\n        }\n\n        var mapService3DCoordSys = new ServiceCtor();\n        mapService3DCoordSys.viewGL = mapService3DModel.__viewGL; // Inject resize\n\n        mapService3DCoordSys.resize = resizeMapService3D;\n        mapService3DCoordSys.resize(mapService3DModel, api);\n        mapService3DList.push(mapService3DCoordSys);\n        mapService3DModel.coordinateSystem = mapService3DCoordSys;\n        mapService3DCoordSys.model = mapService3DModel;\n        mapService3DCoordSys.update = updateService3D;\n      });\n      ecModel.eachSeries(function (seriesModel) {\n        if (seriesModel.get('coordinateSystem') === serviceComponentType) {\n          var mapService3DModel = seriesModel.getReferringComponents(serviceComponentType).models[0];\n\n          if (!mapService3DModel) {\n            mapService3DModel = ecModel.getComponent(serviceComponentType);\n          }\n\n          if (!mapService3DModel) {\n            throw new Error(serviceComponentType + ' \"' + retrieve.firstNotNull(seriesModel.get(serviceComponentType + 'Index'), seriesModel.get(serviceComponentType + 'Id'), 0) + '\" not found');\n          }\n\n          seriesModel.coordinateSystem = mapService3DModel.coordinateSystem;\n        }\n      });\n      afterCreate && afterCreate(mapService3DList, ecModel, api);\n      return mapService3DList;\n    }\n  };\n}", "import Mapbox3D from './mapbox3D/Mapbox3D';\nimport createMapService3DCreator from './mapServiceCommon/createMapService3DCreator';\nvar mapbox3DCreator = createMapService3DCreator('mapbox3D', Mapbox3D, function (mapbox3DList) {\n  mapbox3DList.forEach(function (mapbox3D) {\n    mapbox3D.setCameraOption(mapbox3D.model.getMapboxCameraOption());\n  });\n});\nexport default mapbox3DCreator;", "// TODO ECharts GL must be imported whatever component,charts is imported.\nimport '../../echarts-gl';\nimport Mapbox3DModel from './Mapbox3DModel';\nimport Mapbox3DView from './Mapbox3DView';\nimport mapbox3DCreator from '../../coord/mapbox3DCreator';\nexport function install(registers) {\n  registers.registerComponentModel(Mapbox3DModel);\n  registers.registerComponentView(Mapbox3DView);\n  registers.registerCoordinateSystem('mapbox3D', mapbox3DCreator);\n  registers.registerAction({\n    type: 'mapbox3DChangeCamera',\n    event: 'mapbox3dcamerachanged',\n    update: 'mapbox3D:updateCamera'\n  }, function (payload, ecModel) {\n    ecModel.eachComponent({\n      mainType: 'mapbox3D',\n      query: payload\n    }, function (componentModel) {\n      componentModel.setMapboxCameraOption(payload);\n    });\n  });\n}", "import * as echarts from 'echarts/lib/echarts';\nimport componentPostEffectMixin from '../common/componentPostEffectMixin';\nimport componentLightMixin from '../common/componentLightMixin';\nvar MAPTALKS_CAMERA_OPTION = ['zoom', 'center', 'pitch', 'bearing'];\nvar Maptalks3DModel = echarts.ComponentModel.extend({\n  type: 'maptalks3D',\n  layoutMode: 'box',\n  coordinateSystem: null,\n  defaultOption: {\n    zlevel: -10,\n    urlTemplate: 'http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png',\n    attribution: '&copy; <a href=\"http://osm.org\">OpenStreetMap</a> contributors, &copy; <a href=\"https://carto.com/\">CARTO</a>',\n    center: [0, 0],\n    zoom: 0,\n    pitch: 0,\n    bearing: 0,\n    light: {\n      main: {\n        alpha: 20,\n        beta: 30\n      }\n    },\n    altitudeScale: 1,\n    // Default depend on altitudeScale\n    boxHeight: 'auto'\n  },\n  getMaptalksCameraOption: function () {\n    var self = this;\n    return MAPTALKS_CAMERA_OPTION.reduce(function (obj, key) {\n      obj[key] = self.get(key);\n      return obj;\n    }, {});\n  },\n  setMaptalksCameraOption: function (option) {\n    if (option != null) {\n      MAPTALKS_CAMERA_OPTION.forEach(function (key) {\n        if (option[key] != null) {\n          this.option[key] = option[key];\n        }\n      }, this);\n    }\n  },\n\n  /**\n   * Get maptalks instance\n   */\n  getMaptalks: function () {\n    return this._maptalks;\n  },\n  setMaptalks: function (maptalks) {\n    this._maptalks = maptalks;\n  }\n});\necharts.util.merge(Maptalks3DModel.prototype, componentPostEffectMixin);\necharts.util.merge(Maptalks3DModel.prototype, componentLightMixin);\nexport default Maptalks3DModel;", "/**\n * @constructor\n * @alias module:echarts-gl/component/maptalks/Maptalks3DLayer\n * @param {string} id Layer ID\n * @param {module:zrender/ZRender} zr\n */\nfunction Maptalks3DLayer(id, zr, defaultCenter, defaultZoom) {\n  this.id = id;\n  this.zr = zr;\n  this.dom = document.createElement('div');\n  this.dom.style.cssText = 'position:absolute;left:0;right:0;top:0;bottom:0;'; // FIXME If in module environment.\n\n  if (!maptalks) {\n    throw new Error('Maptalks library must be included. See https://maptalks.org');\n  }\n\n  this._maptalks = new maptalks.Map(this.dom, {\n    center: defaultCenter,\n    zoom: defaultZoom,\n    doubleClickZoom: false,\n    fog: false // fogColor: [0, 0, 0]\n\n  }); // Proxy events\n\n  this._initEvents();\n}\n\nMaptalks3DLayer.prototype.setUnpainted = function () {};\n\nMaptalks3DLayer.prototype.resize = function () {\n  this._maptalks.checkSize();\n};\n\nMaptalks3DLayer.prototype.getMaptalks = function () {\n  return this._maptalks;\n};\n\nMaptalks3DLayer.prototype.clear = function () {};\n\nMaptalks3DLayer.prototype.refresh = function () {\n  this._maptalks.checkSize();\n};\n\nvar EVENTS = ['mousedown', 'mouseup', 'click', 'dblclick', 'mousemove', 'mousewheel', 'DOMMouseScroll', 'touchstart', 'touchend', 'touchmove', 'touchcancel'];\n\nMaptalks3DLayer.prototype._initEvents = function () {\n  // Event is bound on canvas container.\n  var maptalksRoot = this.dom;\n  this._handlers = this._handlers || {\n    contextmenu: function (e) {\n      e.preventDefault();\n      return false;\n    }\n  };\n  EVENTS.forEach(function (eName) {\n    this._handlers[eName] = function (e) {\n      var obj = {};\n\n      for (var name in e) {\n        obj[name] = e[name];\n      }\n\n      obj.bubbles = false;\n      var newE = new e.constructor(e.type, obj);\n\n      if (eName === 'mousewheel' || eName === 'DOMMouseScroll') {\n        // maptalks listens events to different elements?\n        maptalksRoot.dispatchEvent(newE);\n      } else {\n        maptalksRoot.firstElementChild.dispatchEvent(newE);\n      }\n    };\n\n    this.zr.dom.addEventListener(eName, this._handlers[eName]);\n  }, this); // PENDING\n\n  this.zr.dom.addEventListener('contextmenu', this._handlers.contextmenu);\n};\n\nMaptalks3DLayer.prototype.dispose = function () {\n  EVENTS.forEach(function (eName) {\n    this.zr.dom.removeEventListener(eName, this._handlers[eName]);\n  }, this);\n\n  this._maptalks.remove();\n};\n\nexport default Maptalks3DLayer;", "import * as echarts from 'echarts/lib/echarts';\nimport Maptalks3DLayer from './Maptalks3DLayer';\nimport SceneHelper from '../common/SceneHelper';\nimport graphicGL from '../../util/graphicGL';\nimport displayShadowGLSL from '../../util/shader/displayShadow.glsl.js';\ngraphicGL.Shader.import(displayShadowGLSL);\nexport default echarts.ComponentView.extend({\n  type: 'maptalks3D',\n  __ecgl__: true,\n  init: function (ecModel, api) {\n    this._groundMesh = new graphicGL.Mesh({\n      geometry: new graphicGL.PlaneGeometry(),\n      material: new graphicGL.Material({\n        shader: new graphicGL.Shader({\n          vertex: graphicGL.Shader.source('ecgl.displayShadow.vertex'),\n          fragment: graphicGL.Shader.source('ecgl.displayShadow.fragment')\n        }),\n        depthMask: false\n      }),\n      // Render first\n      renderOrder: -100,\n      culling: false,\n      castShadow: false,\n      $ignorePicking: true,\n      renderNormal: true\n    });\n  },\n  _initMaptalksLayer: function (mapbox3DModel, api) {\n    var zr = api.getZr();\n    this._zrLayer = new Maptalks3DLayer('maptalks3D', zr, mapbox3DModel.get('center'), mapbox3DModel.get('zoom'));\n    zr.painter.insertLayer(-1000, this._zrLayer);\n    this._lightRoot = new graphicGL.Node();\n    this._sceneHelper = new SceneHelper(this._lightRoot);\n\n    this._sceneHelper.initLight(this._lightRoot);\n\n    var maptalks = this._zrLayer.getMaptalks();\n\n    var dispatchInteractAction = this._dispatchInteractAction.bind(this, api, maptalks); // PENDING\n\n\n    ['zoomend', 'zooming', 'zoomstart', 'dragrotating', 'pitch', 'pitchend', 'movestart', 'moving', 'moveend', 'resize', 'touchstart', 'touchmove', 'touchend', 'animating'].forEach(function (eName) {\n      maptalks.on(eName, dispatchInteractAction);\n    });\n  },\n  render: function (maptalks3DModel, ecModel, api) {\n    if (!this._zrLayer) {\n      this._initMaptalksLayer(maptalks3DModel, api);\n    }\n\n    var mtks = this._zrLayer.getMaptalks();\n\n    var urlTemplate = maptalks3DModel.get('urlTemplate');\n    var baseLayer = mtks.getBaseLayer();\n\n    if (urlTemplate !== this._oldUrlTemplate) {\n      if (!baseLayer) {\n        baseLayer = new maptalks.TileLayer('maptalks-echarts-gl-baselayer', {\n          urlTemplate: urlTemplate,\n          // used sequentially to help with browser parallel requests per domain limitation\n          subdomains: ['a', 'b', 'c'],\n          attribution: maptalks3DModel.get('attribution')\n        });\n        mtks.setBaseLayer(baseLayer);\n      } else {\n        // PENDING setOptions may not work?\n        baseLayer.setOptions({\n          urlTemplate: urlTemplate,\n          attribution: maptalks3DModel.get('attribution')\n        });\n      }\n    }\n\n    this._oldUrlTemplate = urlTemplate;\n    mtks.setCenter(maptalks3DModel.get('center'));\n    mtks.setZoom(maptalks3DModel.get('zoom'), {\n      animation: false\n    });\n    mtks.setPitch(maptalks3DModel.get('pitch'));\n    mtks.setBearing(maptalks3DModel.get('bearing'));\n    maptalks3DModel.setMaptalks(mtks);\n    var coordSys = maptalks3DModel.coordinateSystem; // Not add to rootNode. Or light direction will be stretched by rootNode scale\n\n    coordSys.viewGL.scene.add(this._lightRoot);\n    coordSys.viewGL.add(this._groundMesh);\n\n    this._updateGroundMesh(); // Update lights\n\n\n    this._sceneHelper.setScene(coordSys.viewGL.scene);\n\n    this._sceneHelper.updateLight(maptalks3DModel); // Update post effects\n\n\n    coordSys.viewGL.setPostEffect(maptalks3DModel.getModel('postEffect'), api);\n    coordSys.viewGL.setTemporalSuperSampling(maptalks3DModel.getModel('temporalSuperSampling'));\n    this._maptalks3DModel = maptalks3DModel;\n  },\n  afterRender: function (maptalks3DModel, ecModel, api, layerGL) {\n    var renderer = layerGL.renderer;\n\n    this._sceneHelper.updateAmbientCubemap(renderer, maptalks3DModel, api);\n\n    this._sceneHelper.updateSkybox(renderer, maptalks3DModel, api); // FIXME If other series changes coordinate system.\n    // FIXME When doing progressive rendering.\n\n\n    maptalks3DModel.coordinateSystem.viewGL.scene.traverse(function (mesh) {\n      if (mesh.material) {\n        mesh.material.define('fragment', 'NORMAL_UP_AXIS', 2);\n        mesh.material.define('fragment', 'NORMAL_FRONT_AXIS', 1);\n      }\n    });\n  },\n  updateCamera: function (maptalks3DModel, ecModel, api, payload) {\n    maptalks3DModel.coordinateSystem.setCameraOption(payload);\n\n    this._updateGroundMesh();\n\n    api.getZr().refresh();\n  },\n  _dispatchInteractAction: function (api, maptalks, maptalks3DModel) {\n    api.dispatchAction({\n      type: 'maptalks3DChangeCamera',\n      pitch: maptalks.getPitch(),\n      zoom: getMapboxZoom(maptalks.getResolution()) + 1,\n      center: maptalks.getCenter().toArray(),\n      bearing: maptalks.getBearing(),\n      maptalks3DId: this._maptalks3DModel && this._maptalks3DModel.id\n    });\n  },\n  _updateGroundMesh: function () {\n    if (this._maptalks3DModel) {\n      var coordSys = this._maptalks3DModel.coordinateSystem;\n      var pt = coordSys.dataToPoint(coordSys.center);\n\n      this._groundMesh.position.set(pt[0], pt[1], -0.001);\n\n      var plane = new graphicGL.Plane(new graphicGL.Vector3(0, 0, 1), 0);\n      var ray1 = coordSys.viewGL.camera.castRay(new graphicGL.Vector2(-1, -1));\n      var ray2 = coordSys.viewGL.camera.castRay(new graphicGL.Vector2(1, 1));\n      var pos0 = ray1.intersectPlane(plane);\n      var pos1 = ray2.intersectPlane(plane);\n      var scale = pos0.dist(pos1) / coordSys.viewGL.rootNode.scale.x;\n\n      this._groundMesh.scale.set(scale, scale, 1);\n    }\n  },\n  dispose: function (ecModel, api) {\n    if (this._zrLayer) {\n      this._zrLayer.dispose();\n    }\n\n    api.getZr().painter.delLayer(-1000);\n  }\n});\nconst MAX_RES = 2 * 6378137 * Math.PI / (256 * Math.pow(2, 20));\n\nfunction getMapboxZoom(res) {\n  return 19 - Math.log(res / MAX_RES) / Math.LN2;\n}", "import MapService3D from '../mapServiceCommon/MapService3D';\n\nfunction Maptalks3D() {\n  MapService3D.apply(this, arguments);\n  this.maxPitch = 85;\n  this.zoomOffset = 1;\n}\n\nMaptalks3D.prototype = new MapService3D();\nMaptalks3D.prototype.constructor = Maptalks3D;\nMaptalks3D.prototype.type = 'maptalks3D';\nexport default Maptalks3D;", "import Maptalks3D from './maptalks3D/Maptalks3D';\nimport createMapService3DCreator from './mapServiceCommon/createMapService3DCreator';\nvar maptalks3DCreator = createMapService3DCreator('maptalks3D', Maptalks3D, function (maptalks3DList) {\n  maptalks3DList.forEach(function (maptalks3D) {\n    maptalks3D.setCameraOption(maptalks3D.model.getMaptalksCameraOption());\n  });\n});\nexport default maptalks3DCreator;", "// TODO ECharts GL must be imported whatever component,charts is imported.\nimport '../../echarts-gl';\nimport Maptalks3DModel from './Maptalks3DModel';\nimport Maptalks3DView from './Maptalks3DView';\nimport maptalks3DCreator from '../../coord/maptalks3DCreator';\nexport function install(registers) {\n  registers.registerComponentModel(Maptalks3DModel);\n  registers.registerComponentView(Maptalks3DView);\n  registers.registerCoordinateSystem('maptalks3D', maptalks3DCreator);\n  registers.registerAction({\n    type: 'maptalks3DChangeCamera',\n    event: 'maptalks3dcamerachanged',\n    update: 'maptalks3D:updateCamera'\n  }, function (payload, ecModel) {\n    ecModel.eachComponent({\n      mainType: 'maptalks3D',\n      query: payload\n    }, function (componentModel) {\n      componentModel.setMaptalksCameraOption(payload);\n    });\n  });\n}"],
  "mappings": "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",
  "names": ["firstNotNull", "dimIndicesMap", "firstNotNull", "dimIndicesMap", "Component_default", "e", "axis", "otherDim", "ecModel", "install", "Component_default", "texture", "vec3", "install", "e", "Component_default", "PI", "install", "maptalks", "EVENTS", "e", "Component_default", "maptalks", "install"]
}
